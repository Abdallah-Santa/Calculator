
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a00  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00003a00  00003a74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002280  00000000  00000000  00003a90  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bd1  00000000  00000000  00005d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000068e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008c15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000ac98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000ae18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000b0da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b968  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 47 06 	call	0xc8e	; 0xc8e <main>
      7a:	0c 94 fe 1c 	jmp	0x39fc	; 0x39fc <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 c7 1c 	jmp	0x398e	; 0x398e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a1 e7       	ldi	r26, 0x71	; 113
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 d3 1c 	jmp	0x39a6	; 0x39a6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 d3 1c 	jmp	0x39a6	; 0x39a6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 c7 1c 	jmp	0x398e	; 0x398e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	81 e7       	ldi	r24, 0x71	; 113
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 cf 1c 	jmp	0x399e	; 0x399e <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	61 e7       	ldi	r22, 0x71	; 113
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 eb 1c 	jmp	0x39d6	; 0x39d6 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 d3 1c 	jmp	0x39a6	; 0x39a6 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 d3 1c 	jmp	0x39a6	; 0x39a6 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 d3 1c 	jmp	0x39a6	; 0x39a6 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <main>:
	HLCD_VoidSendCommand(0x01);\
}while(0) // One Time Execute


void main(void)
{
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	c3 54       	subi	r28, 0x43	; 67
     c9c:	d0 40       	sbci	r29, 0x00	; 0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
#if 1
	/*Initialize HardWare*/
	HLCD_VoidInit();
     ca8:	0e 94 4f 12 	call	0x249e	; 0x249e <HLCD_VoidInit>
	HKPD_VoidInit();
     cac:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <HKPD_VoidInit>

	/*Define Variables*/

	/*Operations Array*/
u8 opr[10]={0};
     cb0:	8a e0       	ldi	r24, 0x0A	; 10
     cb2:	fe 01       	movw	r30, r28
     cb4:	3e 96       	adiw	r30, 0x0e	; 14
     cb6:	df 01       	movw	r26, r30
     cb8:	28 2f       	mov	r18, r24
     cba:	1d 92       	st	X+, r1
     cbc:	2a 95       	dec	r18
     cbe:	e9 f7       	brne	.-6      	; 0xcba <main+0x2c>

/*Operands Array*/
u32 opd[10]={0};
     cc0:	88 e2       	ldi	r24, 0x28	; 40
     cc2:	fe 01       	movw	r30, r28
     cc4:	78 96       	adiw	r30, 0x18	; 24
     cc6:	df 01       	movw	r26, r30
     cc8:	28 2f       	mov	r18, r24
     cca:	1d 92       	st	X+, r1
     ccc:	2a 95       	dec	r18
     cce:	e9 f7       	brne	.-6      	; 0xcca <main+0x3c>

/*Index Of Operands Array*/
u8 num=0;
     cd0:	1d 86       	std	Y+13, r1	; 0x0d
/*Index Operations Array*/
u8 sym=0;
     cd2:	1c 86       	std	Y+12, r1	; 0x0c

u32 Result=0;
     cd4:	18 86       	std	Y+8, r1	; 0x08
     cd6:	19 86       	std	Y+9, r1	; 0x09
     cd8:	1a 86       	std	Y+10, r1	; 0x0a
     cda:	1b 86       	std	Y+11, r1	; 0x0b
u8 Divide_By_Zero=FALSE;
     cdc:	1f 82       	std	Y+7, r1	; 0x07
u8 OPD_Last=FALSE;
     cde:	1e 82       	std	Y+6, r1	; 0x06
u8 Result_Exist=FALSE;
     ce0:	1d 82       	std	Y+5, r1	; 0x05
u8 Result_Disp=FALSE;
     ce2:	1c 82       	std	Y+4, r1	; 0x04
u8 cursor=1;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	8b 83       	std	Y+3, r24	; 0x03
#if 1

	while(1) //Super Loop
	{
    /*Get Key From KeyPad*/
	button=HKPD_U8GetPressedKey();
     ce8:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <HKPD_U8GetPressedKey>
     cec:	8a 83       	std	Y+2, r24	; 0x02

	/*If There A Key Pressed*/
if(button!=50)
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	82 33       	cpi	r24, 0x32	; 50
     cf2:	d1 f3       	breq	.-12     	; 0xce8 <main+0x5a>
{
	/*If There Is a Result Stored*/
	if(Result_Exist)
     cf4:	8d 81       	ldd	r24, Y+5	; 0x05
     cf6:	88 23       	and	r24, r24
     cf8:	09 f4       	brne	.+2      	; 0xcfc <main+0x6e>
     cfa:	9d c0       	rjmp	.+314    	; 0xe36 <main+0x1a8>
	{
	if(button=='+'|| button=='*'|| button=='-'|| button=='/')
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	8b 32       	cpi	r24, 0x2B	; 43
     d00:	51 f0       	breq	.+20     	; 0xd16 <main+0x88>
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	8a 32       	cpi	r24, 0x2A	; 42
     d06:	39 f0       	breq	.+14     	; 0xd16 <main+0x88>
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	8d 32       	cpi	r24, 0x2D	; 45
     d0c:	21 f0       	breq	.+8      	; 0xd16 <main+0x88>
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	8f 32       	cpi	r24, 0x2F	; 47
     d12:	09 f0       	breq	.+2      	; 0xd16 <main+0x88>
     d14:	90 c0       	rjmp	.+288    	; 0xe36 <main+0x1a8>
	{
		/*Clear Calculator*/
    Reset_Calc;
     d16:	1d 86       	std	Y+13, r1	; 0x0d
     d18:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1a:	8c 87       	std	Y+12, r24	; 0x0c
     d1c:	82 e3       	ldi	r24, 0x32	; 50
     d1e:	8a 83       	std	Y+2, r24	; 0x02
     d20:	1c ae       	std	Y+60, r1	; 0x3c
     d22:	1d ae       	std	Y+61, r1	; 0x3d
     d24:	1e ae       	std	Y+62, r1	; 0x3e
     d26:	1f ae       	std	Y+63, r1	; 0x3f
     d28:	8c ad       	ldd	r24, Y+60	; 0x3c
     d2a:	9d ad       	ldd	r25, Y+61	; 0x3d
     d2c:	ae ad       	ldd	r26, Y+62	; 0x3e
     d2e:	bf ad       	ldd	r27, Y+63	; 0x3f
     d30:	88 af       	std	Y+56, r24	; 0x38
     d32:	99 af       	std	Y+57, r25	; 0x39
     d34:	aa af       	std	Y+58, r26	; 0x3a
     d36:	bb af       	std	Y+59, r27	; 0x3b
     d38:	88 ad       	ldd	r24, Y+56	; 0x38
     d3a:	99 ad       	ldd	r25, Y+57	; 0x39
     d3c:	aa ad       	ldd	r26, Y+58	; 0x3a
     d3e:	bb ad       	ldd	r27, Y+59	; 0x3b
     d40:	8c ab       	std	Y+52, r24	; 0x34
     d42:	9d ab       	std	Y+53, r25	; 0x35
     d44:	ae ab       	std	Y+54, r26	; 0x36
     d46:	bf ab       	std	Y+55, r27	; 0x37
     d48:	8c a9       	ldd	r24, Y+52	; 0x34
     d4a:	9d a9       	ldd	r25, Y+53	; 0x35
     d4c:	ae a9       	ldd	r26, Y+54	; 0x36
     d4e:	bf a9       	ldd	r27, Y+55	; 0x37
     d50:	88 ab       	std	Y+48, r24	; 0x30
     d52:	99 ab       	std	Y+49, r25	; 0x31
     d54:	aa ab       	std	Y+50, r26	; 0x32
     d56:	bb ab       	std	Y+51, r27	; 0x33
     d58:	88 a9       	ldd	r24, Y+48	; 0x30
     d5a:	99 a9       	ldd	r25, Y+49	; 0x31
     d5c:	aa a9       	ldd	r26, Y+50	; 0x32
     d5e:	bb a9       	ldd	r27, Y+51	; 0x33
     d60:	8c a7       	std	Y+44, r24	; 0x2c
     d62:	9d a7       	std	Y+45, r25	; 0x2d
     d64:	ae a7       	std	Y+46, r26	; 0x2e
     d66:	bf a7       	std	Y+47, r27	; 0x2f
     d68:	8c a5       	ldd	r24, Y+44	; 0x2c
     d6a:	9d a5       	ldd	r25, Y+45	; 0x2d
     d6c:	ae a5       	ldd	r26, Y+46	; 0x2e
     d6e:	bf a5       	ldd	r27, Y+47	; 0x2f
     d70:	88 a7       	std	Y+40, r24	; 0x28
     d72:	99 a7       	std	Y+41, r25	; 0x29
     d74:	aa a7       	std	Y+42, r26	; 0x2a
     d76:	bb a7       	std	Y+43, r27	; 0x2b
     d78:	88 a5       	ldd	r24, Y+40	; 0x28
     d7a:	99 a5       	ldd	r25, Y+41	; 0x29
     d7c:	aa a5       	ldd	r26, Y+42	; 0x2a
     d7e:	bb a5       	ldd	r27, Y+43	; 0x2b
     d80:	8c a3       	std	Y+36, r24	; 0x24
     d82:	9d a3       	std	Y+37, r25	; 0x25
     d84:	ae a3       	std	Y+38, r26	; 0x26
     d86:	bf a3       	std	Y+39, r27	; 0x27
     d88:	8c a1       	ldd	r24, Y+36	; 0x24
     d8a:	9d a1       	ldd	r25, Y+37	; 0x25
     d8c:	ae a1       	ldd	r26, Y+38	; 0x26
     d8e:	bf a1       	ldd	r27, Y+39	; 0x27
     d90:	88 a3       	std	Y+32, r24	; 0x20
     d92:	99 a3       	std	Y+33, r25	; 0x21
     d94:	aa a3       	std	Y+34, r26	; 0x22
     d96:	bb a3       	std	Y+35, r27	; 0x23
     d98:	88 a1       	ldd	r24, Y+32	; 0x20
     d9a:	99 a1       	ldd	r25, Y+33	; 0x21
     d9c:	aa a1       	ldd	r26, Y+34	; 0x22
     d9e:	bb a1       	ldd	r27, Y+35	; 0x23
     da0:	8c 8f       	std	Y+28, r24	; 0x1c
     da2:	9d 8f       	std	Y+29, r25	; 0x1d
     da4:	ae 8f       	std	Y+30, r26	; 0x1e
     da6:	bf 8f       	std	Y+31, r27	; 0x1f
     da8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     daa:	9d 8d       	ldd	r25, Y+29	; 0x1d
     dac:	ae 8d       	ldd	r26, Y+30	; 0x1e
     dae:	bf 8d       	ldd	r27, Y+31	; 0x1f
     db0:	88 8f       	std	Y+24, r24	; 0x18
     db2:	99 8f       	std	Y+25, r25	; 0x19
     db4:	aa 8f       	std	Y+26, r26	; 0x1a
     db6:	bb 8f       	std	Y+27, r27	; 0x1b
     db8:	1f 8a       	std	Y+23, r1	; 0x17
     dba:	8f 89       	ldd	r24, Y+23	; 0x17
     dbc:	8e 8b       	std	Y+22, r24	; 0x16
     dbe:	8e 89       	ldd	r24, Y+22	; 0x16
     dc0:	8d 8b       	std	Y+21, r24	; 0x15
     dc2:	8d 89       	ldd	r24, Y+21	; 0x15
     dc4:	8c 8b       	std	Y+20, r24	; 0x14
     dc6:	8c 89       	ldd	r24, Y+20	; 0x14
     dc8:	8b 8b       	std	Y+19, r24	; 0x13
     dca:	8b 89       	ldd	r24, Y+19	; 0x13
     dcc:	8a 8b       	std	Y+18, r24	; 0x12
     dce:	8a 89       	ldd	r24, Y+18	; 0x12
     dd0:	89 8b       	std	Y+17, r24	; 0x11
     dd2:	89 89       	ldd	r24, Y+17	; 0x11
     dd4:	88 8b       	std	Y+16, r24	; 0x10
     dd6:	88 89       	ldd	r24, Y+16	; 0x10
     dd8:	8f 87       	std	Y+15, r24	; 0x0f
     dda:	8f 85       	ldd	r24, Y+15	; 0x0f
     ddc:	8e 87       	std	Y+14, r24	; 0x0e
     dde:	1f 82       	std	Y+7, r1	; 0x07
     de0:	8f 81       	ldd	r24, Y+7	; 0x07
     de2:	8c 83       	std	Y+4, r24	; 0x04
     de4:	8c 81       	ldd	r24, Y+4	; 0x04
     de6:	8d 83       	std	Y+5, r24	; 0x05
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	8e 83       	std	Y+6, r24	; 0x06
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	8b 83       	std	Y+3, r24	; 0x03
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	0e 94 c8 10 	call	0x2190	; 0x2190 <HLCD_VoidSendCommand>
    /*Put A Result In Array*/
    opd[num]=Result;
     df6:	8d 85       	ldd	r24, Y+13	; 0x0d
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	9c 01       	movw	r18, r24
     dfe:	22 0f       	add	r18, r18
     e00:	33 1f       	adc	r19, r19
     e02:	22 0f       	add	r18, r18
     e04:	33 1f       	adc	r19, r19
     e06:	ce 01       	movw	r24, r28
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	82 0f       	add	r24, r18
     e0c:	93 1f       	adc	r25, r19
     e0e:	fc 01       	movw	r30, r24
     e10:	77 96       	adiw	r30, 0x17	; 23
     e12:	88 85       	ldd	r24, Y+8	; 0x08
     e14:	99 85       	ldd	r25, Y+9	; 0x09
     e16:	aa 85       	ldd	r26, Y+10	; 0x0a
     e18:	bb 85       	ldd	r27, Y+11	; 0x0b
     e1a:	80 83       	st	Z, r24
     e1c:	91 83       	std	Z+1, r25	; 0x01
     e1e:	a2 83       	std	Z+2, r26	; 0x02
     e20:	b3 83       	std	Z+3, r27	; 0x03
    /*Last Key Is An Operand*/
    OPD_Last=TRUE;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	8e 83       	std	Y+6, r24	; 0x06
    /*Show Result On Display*/
    HLCD_VoidSendNumber(Result);
     e26:	88 85       	ldd	r24, Y+8	; 0x08
     e28:	99 85       	ldd	r25, Y+9	; 0x09
     e2a:	aa 85       	ldd	r26, Y+10	; 0x0a
     e2c:	bb 85       	ldd	r27, Y+11	; 0x0b
     e2e:	bc 01       	movw	r22, r24
     e30:	cd 01       	movw	r24, r26
     e32:	0e 94 45 18 	call	0x308a	; 0x308a <HLCD_VoidSendNumber>

	}
	}

	/*Check Which Key Is Pressed*/
 switch(button)
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	a8 2f       	mov	r26, r24
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	24 96       	adiw	r28, 0x04	; 4
     e3e:	bf af       	std	Y+63, r27	; 0x3f
     e40:	ae af       	std	Y+62, r26	; 0x3e
     e42:	24 97       	sbiw	r28, 0x04	; 4
     e44:	24 96       	adiw	r28, 0x04	; 4
     e46:	2e ad       	ldd	r18, Y+62	; 0x3e
     e48:	3f ad       	ldd	r19, Y+63	; 0x3f
     e4a:	24 97       	sbiw	r28, 0x04	; 4
     e4c:	27 30       	cpi	r18, 0x07	; 7
     e4e:	31 05       	cpc	r19, r1
     e50:	09 f4       	brne	.+2      	; 0xe54 <main+0x1c6>
     e52:	6e c3       	rjmp	.+1756   	; 0x1530 <main+0x8a2>
     e54:	24 96       	adiw	r28, 0x04	; 4
     e56:	8e ad       	ldd	r24, Y+62	; 0x3e
     e58:	9f ad       	ldd	r25, Y+63	; 0x3f
     e5a:	24 97       	sbiw	r28, 0x04	; 4
     e5c:	88 30       	cpi	r24, 0x08	; 8
     e5e:	91 05       	cpc	r25, r1
     e60:	cc f5       	brge	.+114    	; 0xed4 <main+0x246>
     e62:	24 96       	adiw	r28, 0x04	; 4
     e64:	ae ad       	ldd	r26, Y+62	; 0x3e
     e66:	bf ad       	ldd	r27, Y+63	; 0x3f
     e68:	24 97       	sbiw	r28, 0x04	; 4
     e6a:	a3 30       	cpi	r26, 0x03	; 3
     e6c:	b1 05       	cpc	r27, r1
     e6e:	09 f4       	brne	.+2      	; 0xe72 <main+0x1e4>
     e70:	bb c1       	rjmp	.+886    	; 0x11e8 <main+0x55a>
     e72:	24 96       	adiw	r28, 0x04	; 4
     e74:	2e ad       	ldd	r18, Y+62	; 0x3e
     e76:	3f ad       	ldd	r19, Y+63	; 0x3f
     e78:	24 97       	sbiw	r28, 0x04	; 4
     e7a:	24 30       	cpi	r18, 0x04	; 4
     e7c:	31 05       	cpc	r19, r1
     e7e:	cc f4       	brge	.+50     	; 0xeb2 <main+0x224>
     e80:	24 96       	adiw	r28, 0x04	; 4
     e82:	8e ad       	ldd	r24, Y+62	; 0x3e
     e84:	9f ad       	ldd	r25, Y+63	; 0x3f
     e86:	24 97       	sbiw	r28, 0x04	; 4
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	91 05       	cpc	r25, r1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <main+0x202>
     e8e:	dc c0       	rjmp	.+440    	; 0x1048 <main+0x3ba>
     e90:	24 96       	adiw	r28, 0x04	; 4
     e92:	ae ad       	ldd	r26, Y+62	; 0x3e
     e94:	bf ad       	ldd	r27, Y+63	; 0x3f
     e96:	24 97       	sbiw	r28, 0x04	; 4
     e98:	a2 30       	cpi	r26, 0x02	; 2
     e9a:	b1 05       	cpc	r27, r1
     e9c:	0c f0       	brlt	.+2      	; 0xea0 <main+0x212>
     e9e:	3d c1       	rjmp	.+634    	; 0x111a <main+0x48c>
     ea0:	24 96       	adiw	r28, 0x04	; 4
     ea2:	2e ad       	ldd	r18, Y+62	; 0x3e
     ea4:	3f ad       	ldd	r19, Y+63	; 0x3f
     ea6:	24 97       	sbiw	r28, 0x04	; 4
     ea8:	21 15       	cp	r18, r1
     eaa:	31 05       	cpc	r19, r1
     eac:	09 f4       	brne	.+2      	; 0xeb0 <main+0x222>
     eae:	63 c0       	rjmp	.+198    	; 0xf76 <main+0x2e8>
     eb0:	64 c6       	rjmp	.+3272   	; 0x1b7a <main+0xeec>
     eb2:	24 96       	adiw	r28, 0x04	; 4
     eb4:	8e ad       	ldd	r24, Y+62	; 0x3e
     eb6:	9f ad       	ldd	r25, Y+63	; 0x3f
     eb8:	24 97       	sbiw	r28, 0x04	; 4
     eba:	85 30       	cpi	r24, 0x05	; 5
     ebc:	91 05       	cpc	r25, r1
     ebe:	09 f4       	brne	.+2      	; 0xec2 <main+0x234>
     ec0:	65 c2       	rjmp	.+1226   	; 0x138c <main+0x6fe>
     ec2:	24 96       	adiw	r28, 0x04	; 4
     ec4:	ae ad       	ldd	r26, Y+62	; 0x3e
     ec6:	bf ad       	ldd	r27, Y+63	; 0x3f
     ec8:	24 97       	sbiw	r28, 0x04	; 4
     eca:	a6 30       	cpi	r26, 0x06	; 6
     ecc:	b1 05       	cpc	r27, r1
     ece:	0c f0       	brlt	.+2      	; 0xed2 <main+0x244>
     ed0:	c6 c2       	rjmp	.+1420   	; 0x145e <main+0x7d0>
     ed2:	f3 c1       	rjmp	.+998    	; 0x12ba <main+0x62c>
     ed4:	24 96       	adiw	r28, 0x04	; 4
     ed6:	2e ad       	ldd	r18, Y+62	; 0x3e
     ed8:	3f ad       	ldd	r19, Y+63	; 0x3f
     eda:	24 97       	sbiw	r28, 0x04	; 4
     edc:	2b 32       	cpi	r18, 0x2B	; 43
     ede:	31 05       	cpc	r19, r1
     ee0:	09 f4       	brne	.+2      	; 0xee4 <main+0x256>
     ee2:	61 c4       	rjmp	.+2242   	; 0x17a6 <main+0xb18>
     ee4:	24 96       	adiw	r28, 0x04	; 4
     ee6:	8e ad       	ldd	r24, Y+62	; 0x3e
     ee8:	9f ad       	ldd	r25, Y+63	; 0x3f
     eea:	24 97       	sbiw	r28, 0x04	; 4
     eec:	8c 32       	cpi	r24, 0x2C	; 44
     eee:	91 05       	cpc	r25, r1
     ef0:	cc f4       	brge	.+50     	; 0xf24 <main+0x296>
     ef2:	24 96       	adiw	r28, 0x04	; 4
     ef4:	ae ad       	ldd	r26, Y+62	; 0x3e
     ef6:	bf ad       	ldd	r27, Y+63	; 0x3f
     ef8:	24 97       	sbiw	r28, 0x04	; 4
     efa:	a9 30       	cpi	r26, 0x09	; 9
     efc:	b1 05       	cpc	r27, r1
     efe:	09 f4       	brne	.+2      	; 0xf02 <main+0x274>
     f00:	e9 c3       	rjmp	.+2002   	; 0x16d4 <main+0xa46>
     f02:	24 96       	adiw	r28, 0x04	; 4
     f04:	2e ad       	ldd	r18, Y+62	; 0x3e
     f06:	3f ad       	ldd	r19, Y+63	; 0x3f
     f08:	24 97       	sbiw	r28, 0x04	; 4
     f0a:	29 30       	cpi	r18, 0x09	; 9
     f0c:	31 05       	cpc	r19, r1
     f0e:	0c f4       	brge	.+2      	; 0xf12 <main+0x284>
     f10:	78 c3       	rjmp	.+1776   	; 0x1602 <main+0x974>
     f12:	24 96       	adiw	r28, 0x04	; 4
     f14:	8e ad       	ldd	r24, Y+62	; 0x3e
     f16:	9f ad       	ldd	r25, Y+63	; 0x3f
     f18:	24 97       	sbiw	r28, 0x04	; 4
     f1a:	8a 32       	cpi	r24, 0x2A	; 42
     f1c:	91 05       	cpc	r25, r1
     f1e:	09 f4       	brne	.+2      	; 0xf22 <main+0x294>
     f20:	78 c4       	rjmp	.+2288   	; 0x1812 <main+0xb84>
     f22:	2b c6       	rjmp	.+3158   	; 0x1b7a <main+0xeec>
     f24:	24 96       	adiw	r28, 0x04	; 4
     f26:	ae ad       	ldd	r26, Y+62	; 0x3e
     f28:	bf ad       	ldd	r27, Y+63	; 0x3f
     f2a:	24 97       	sbiw	r28, 0x04	; 4
     f2c:	af 32       	cpi	r26, 0x2F	; 47
     f2e:	b1 05       	cpc	r27, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <main+0x2a6>
     f32:	8a c4       	rjmp	.+2324   	; 0x1848 <main+0xbba>
     f34:	24 96       	adiw	r28, 0x04	; 4
     f36:	2e ad       	ldd	r18, Y+62	; 0x3e
     f38:	3f ad       	ldd	r19, Y+63	; 0x3f
     f3a:	24 97       	sbiw	r28, 0x04	; 4
     f3c:	20 33       	cpi	r18, 0x30	; 48
     f3e:	31 05       	cpc	r19, r1
     f40:	4c f4       	brge	.+18     	; 0xf54 <main+0x2c6>
     f42:	24 96       	adiw	r28, 0x04	; 4
     f44:	8e ad       	ldd	r24, Y+62	; 0x3e
     f46:	9f ad       	ldd	r25, Y+63	; 0x3f
     f48:	24 97       	sbiw	r28, 0x04	; 4
     f4a:	8d 32       	cpi	r24, 0x2D	; 45
     f4c:	91 05       	cpc	r25, r1
     f4e:	09 f4       	brne	.+2      	; 0xf52 <main+0x2c4>
     f50:	45 c4       	rjmp	.+2186   	; 0x17dc <main+0xb4e>
     f52:	13 c6       	rjmp	.+3110   	; 0x1b7a <main+0xeec>
     f54:	24 96       	adiw	r28, 0x04	; 4
     f56:	ae ad       	ldd	r26, Y+62	; 0x3e
     f58:	bf ad       	ldd	r27, Y+63	; 0x3f
     f5a:	24 97       	sbiw	r28, 0x04	; 4
     f5c:	ad 33       	cpi	r26, 0x3D	; 61
     f5e:	b1 05       	cpc	r27, r1
     f60:	09 f4       	brne	.+2      	; 0xf64 <main+0x2d6>
     f62:	8d c4       	rjmp	.+2330   	; 0x187e <main+0xbf0>
     f64:	24 96       	adiw	r28, 0x04	; 4
     f66:	2e ad       	ldd	r18, Y+62	; 0x3e
     f68:	3f ad       	ldd	r19, Y+63	; 0x3f
     f6a:	24 97       	sbiw	r28, 0x04	; 4
     f6c:	23 34       	cpi	r18, 0x43	; 67
     f6e:	31 05       	cpc	r19, r1
     f70:	09 f4       	brne	.+2      	; 0xf74 <main+0x2e6>
     f72:	93 c5       	rjmp	.+2854   	; 0x1a9a <main+0xe0c>
     f74:	02 c6       	rjmp	.+3076   	; 0x1b7a <main+0xeec>
 {

  case 0:
	  opd[num]*=10;
     f76:	8d 85       	ldd	r24, Y+13	; 0x0d
     f78:	08 2f       	mov	r16, r24
     f7a:	10 e0       	ldi	r17, 0x00	; 0
     f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9c 01       	movw	r18, r24
     f84:	22 0f       	add	r18, r18
     f86:	33 1f       	adc	r19, r19
     f88:	22 0f       	add	r18, r18
     f8a:	33 1f       	adc	r19, r19
     f8c:	ce 01       	movw	r24, r28
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	82 0f       	add	r24, r18
     f92:	93 1f       	adc	r25, r19
     f94:	fc 01       	movw	r30, r24
     f96:	77 96       	adiw	r30, 0x17	; 23
     f98:	80 81       	ld	r24, Z
     f9a:	91 81       	ldd	r25, Z+1	; 0x01
     f9c:	a2 81       	ldd	r26, Z+2	; 0x02
     f9e:	b3 81       	ldd	r27, Z+3	; 0x03
     fa0:	2a e0       	ldi	r18, 0x0A	; 10
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
     fb0:	ab 01       	movw	r20, r22
     fb2:	bc 01       	movw	r22, r24
     fb4:	98 01       	movw	r18, r16
     fb6:	22 0f       	add	r18, r18
     fb8:	33 1f       	adc	r19, r19
     fba:	22 0f       	add	r18, r18
     fbc:	33 1f       	adc	r19, r19
     fbe:	ce 01       	movw	r24, r28
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	82 0f       	add	r24, r18
     fc4:	93 1f       	adc	r25, r19
     fc6:	fc 01       	movw	r30, r24
     fc8:	77 96       	adiw	r30, 0x17	; 23
     fca:	40 83       	st	Z, r20
     fcc:	51 83       	std	Z+1, r21	; 0x01
     fce:	62 83       	std	Z+2, r22	; 0x02
     fd0:	73 83       	std	Z+3, r23	; 0x03
	  opd[num]+=button;
     fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd4:	08 2f       	mov	r16, r24
     fd6:	10 e0       	ldi	r17, 0x00	; 0
     fd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fda:	88 2f       	mov	r24, r24
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	9c 01       	movw	r18, r24
     fe0:	22 0f       	add	r18, r18
     fe2:	33 1f       	adc	r19, r19
     fe4:	22 0f       	add	r18, r18
     fe6:	33 1f       	adc	r19, r19
     fe8:	ce 01       	movw	r24, r28
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	82 0f       	add	r24, r18
     fee:	93 1f       	adc	r25, r19
     ff0:	fc 01       	movw	r30, r24
     ff2:	77 96       	adiw	r30, 0x17	; 23
     ff4:	20 81       	ld	r18, Z
     ff6:	31 81       	ldd	r19, Z+1	; 0x01
     ff8:	42 81       	ldd	r20, Z+2	; 0x02
     ffa:	53 81       	ldd	r21, Z+3	; 0x03
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	a0 e0       	ldi	r26, 0x00	; 0
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	ba 01       	movw	r22, r20
    1008:	a9 01       	movw	r20, r18
    100a:	48 0f       	add	r20, r24
    100c:	59 1f       	adc	r21, r25
    100e:	6a 1f       	adc	r22, r26
    1010:	7b 1f       	adc	r23, r27
    1012:	98 01       	movw	r18, r16
    1014:	22 0f       	add	r18, r18
    1016:	33 1f       	adc	r19, r19
    1018:	22 0f       	add	r18, r18
    101a:	33 1f       	adc	r19, r19
    101c:	ce 01       	movw	r24, r28
    101e:	01 96       	adiw	r24, 0x01	; 1
    1020:	82 0f       	add	r24, r18
    1022:	93 1f       	adc	r25, r19
    1024:	fc 01       	movw	r30, r24
    1026:	77 96       	adiw	r30, 0x17	; 23
    1028:	40 83       	st	Z, r20
    102a:	51 83       	std	Z+1, r21	; 0x01
    102c:	62 83       	std	Z+2, r22	; 0x02
    102e:	73 83       	std	Z+3, r23	; 0x03
      OPD_Last=TRUE;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	8e 83       	std	Y+6, r24	; 0x06
HLCD_VoidSendNumber(button);
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	88 2f       	mov	r24, r24
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	a0 e0       	ldi	r26, 0x00	; 0
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	bc 01       	movw	r22, r24
    1040:	cd 01       	movw	r24, r26
    1042:	0e 94 45 18 	call	0x308a	; 0x308a <HLCD_VoidSendNumber>
    1046:	99 c5       	rjmp	.+2866   	; 0x1b7a <main+0xeec>
      break;

  case 1:
	  opd[num]*=10;
    1048:	8d 85       	ldd	r24, Y+13	; 0x0d
    104a:	08 2f       	mov	r16, r24
    104c:	10 e0       	ldi	r17, 0x00	; 0
    104e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	9c 01       	movw	r18, r24
    1056:	22 0f       	add	r18, r18
    1058:	33 1f       	adc	r19, r19
    105a:	22 0f       	add	r18, r18
    105c:	33 1f       	adc	r19, r19
    105e:	ce 01       	movw	r24, r28
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	82 0f       	add	r24, r18
    1064:	93 1f       	adc	r25, r19
    1066:	fc 01       	movw	r30, r24
    1068:	77 96       	adiw	r30, 0x17	; 23
    106a:	80 81       	ld	r24, Z
    106c:	91 81       	ldd	r25, Z+1	; 0x01
    106e:	a2 81       	ldd	r26, Z+2	; 0x02
    1070:	b3 81       	ldd	r27, Z+3	; 0x03
    1072:	2a e0       	ldi	r18, 0x0A	; 10
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	50 e0       	ldi	r21, 0x00	; 0
    107a:	bc 01       	movw	r22, r24
    107c:	cd 01       	movw	r24, r26
    107e:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    1082:	ab 01       	movw	r20, r22
    1084:	bc 01       	movw	r22, r24
    1086:	98 01       	movw	r18, r16
    1088:	22 0f       	add	r18, r18
    108a:	33 1f       	adc	r19, r19
    108c:	22 0f       	add	r18, r18
    108e:	33 1f       	adc	r19, r19
    1090:	ce 01       	movw	r24, r28
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	82 0f       	add	r24, r18
    1096:	93 1f       	adc	r25, r19
    1098:	fc 01       	movw	r30, r24
    109a:	77 96       	adiw	r30, 0x17	; 23
    109c:	40 83       	st	Z, r20
    109e:	51 83       	std	Z+1, r21	; 0x01
    10a0:	62 83       	std	Z+2, r22	; 0x02
    10a2:	73 83       	std	Z+3, r23	; 0x03
	  opd[num]+=button;
    10a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a6:	08 2f       	mov	r16, r24
    10a8:	10 e0       	ldi	r17, 0x00	; 0
    10aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	9c 01       	movw	r18, r24
    10b2:	22 0f       	add	r18, r18
    10b4:	33 1f       	adc	r19, r19
    10b6:	22 0f       	add	r18, r18
    10b8:	33 1f       	adc	r19, r19
    10ba:	ce 01       	movw	r24, r28
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	82 0f       	add	r24, r18
    10c0:	93 1f       	adc	r25, r19
    10c2:	fc 01       	movw	r30, r24
    10c4:	77 96       	adiw	r30, 0x17	; 23
    10c6:	20 81       	ld	r18, Z
    10c8:	31 81       	ldd	r19, Z+1	; 0x01
    10ca:	42 81       	ldd	r20, Z+2	; 0x02
    10cc:	53 81       	ldd	r21, Z+3	; 0x03
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	88 2f       	mov	r24, r24
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a0 e0       	ldi	r26, 0x00	; 0
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	ba 01       	movw	r22, r20
    10da:	a9 01       	movw	r20, r18
    10dc:	48 0f       	add	r20, r24
    10de:	59 1f       	adc	r21, r25
    10e0:	6a 1f       	adc	r22, r26
    10e2:	7b 1f       	adc	r23, r27
    10e4:	98 01       	movw	r18, r16
    10e6:	22 0f       	add	r18, r18
    10e8:	33 1f       	adc	r19, r19
    10ea:	22 0f       	add	r18, r18
    10ec:	33 1f       	adc	r19, r19
    10ee:	ce 01       	movw	r24, r28
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	82 0f       	add	r24, r18
    10f4:	93 1f       	adc	r25, r19
    10f6:	fc 01       	movw	r30, r24
    10f8:	77 96       	adiw	r30, 0x17	; 23
    10fa:	40 83       	st	Z, r20
    10fc:	51 83       	std	Z+1, r21	; 0x01
    10fe:	62 83       	std	Z+2, r22	; 0x02
    1100:	73 83       	std	Z+3, r23	; 0x03
      OPD_Last=TRUE;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	8e 83       	std	Y+6, r24	; 0x06
      HLCD_VoidSendNumber(button);
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	a0 e0       	ldi	r26, 0x00	; 0
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	bc 01       	movw	r22, r24
    1112:	cd 01       	movw	r24, r26
    1114:	0e 94 45 18 	call	0x308a	; 0x308a <HLCD_VoidSendNumber>
    1118:	30 c5       	rjmp	.+2656   	; 0x1b7a <main+0xeec>
      break;

  case 2:
	  opd[num]*=10;
    111a:	8d 85       	ldd	r24, Y+13	; 0x0d
    111c:	08 2f       	mov	r16, r24
    111e:	10 e0       	ldi	r17, 0x00	; 0
    1120:	8d 85       	ldd	r24, Y+13	; 0x0d
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9c 01       	movw	r18, r24
    1128:	22 0f       	add	r18, r18
    112a:	33 1f       	adc	r19, r19
    112c:	22 0f       	add	r18, r18
    112e:	33 1f       	adc	r19, r19
    1130:	ce 01       	movw	r24, r28
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	82 0f       	add	r24, r18
    1136:	93 1f       	adc	r25, r19
    1138:	fc 01       	movw	r30, r24
    113a:	77 96       	adiw	r30, 0x17	; 23
    113c:	80 81       	ld	r24, Z
    113e:	91 81       	ldd	r25, Z+1	; 0x01
    1140:	a2 81       	ldd	r26, Z+2	; 0x02
    1142:	b3 81       	ldd	r27, Z+3	; 0x03
    1144:	2a e0       	ldi	r18, 0x0A	; 10
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e0       	ldi	r20, 0x00	; 0
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	bc 01       	movw	r22, r24
    114e:	cd 01       	movw	r24, r26
    1150:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    1154:	ab 01       	movw	r20, r22
    1156:	bc 01       	movw	r22, r24
    1158:	98 01       	movw	r18, r16
    115a:	22 0f       	add	r18, r18
    115c:	33 1f       	adc	r19, r19
    115e:	22 0f       	add	r18, r18
    1160:	33 1f       	adc	r19, r19
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	82 0f       	add	r24, r18
    1168:	93 1f       	adc	r25, r19
    116a:	fc 01       	movw	r30, r24
    116c:	77 96       	adiw	r30, 0x17	; 23
    116e:	40 83       	st	Z, r20
    1170:	51 83       	std	Z+1, r21	; 0x01
    1172:	62 83       	std	Z+2, r22	; 0x02
    1174:	73 83       	std	Z+3, r23	; 0x03
	  opd[num]+=button;
    1176:	8d 85       	ldd	r24, Y+13	; 0x0d
    1178:	08 2f       	mov	r16, r24
    117a:	10 e0       	ldi	r17, 0x00	; 0
    117c:	8d 85       	ldd	r24, Y+13	; 0x0d
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9c 01       	movw	r18, r24
    1184:	22 0f       	add	r18, r18
    1186:	33 1f       	adc	r19, r19
    1188:	22 0f       	add	r18, r18
    118a:	33 1f       	adc	r19, r19
    118c:	ce 01       	movw	r24, r28
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	82 0f       	add	r24, r18
    1192:	93 1f       	adc	r25, r19
    1194:	fc 01       	movw	r30, r24
    1196:	77 96       	adiw	r30, 0x17	; 23
    1198:	20 81       	ld	r18, Z
    119a:	31 81       	ldd	r19, Z+1	; 0x01
    119c:	42 81       	ldd	r20, Z+2	; 0x02
    119e:	53 81       	ldd	r21, Z+3	; 0x03
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	a0 e0       	ldi	r26, 0x00	; 0
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	ba 01       	movw	r22, r20
    11ac:	a9 01       	movw	r20, r18
    11ae:	48 0f       	add	r20, r24
    11b0:	59 1f       	adc	r21, r25
    11b2:	6a 1f       	adc	r22, r26
    11b4:	7b 1f       	adc	r23, r27
    11b6:	98 01       	movw	r18, r16
    11b8:	22 0f       	add	r18, r18
    11ba:	33 1f       	adc	r19, r19
    11bc:	22 0f       	add	r18, r18
    11be:	33 1f       	adc	r19, r19
    11c0:	ce 01       	movw	r24, r28
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	82 0f       	add	r24, r18
    11c6:	93 1f       	adc	r25, r19
    11c8:	fc 01       	movw	r30, r24
    11ca:	77 96       	adiw	r30, 0x17	; 23
    11cc:	40 83       	st	Z, r20
    11ce:	51 83       	std	Z+1, r21	; 0x01
    11d0:	62 83       	std	Z+2, r22	; 0x02
    11d2:	73 83       	std	Z+3, r23	; 0x03
	  HLCD_VoidSendNumber(button);
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	88 2f       	mov	r24, r24
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	a0 e0       	ldi	r26, 0x00	; 0
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	bc 01       	movw	r22, r24
    11e0:	cd 01       	movw	r24, r26
    11e2:	0e 94 45 18 	call	0x308a	; 0x308a <HLCD_VoidSendNumber>
    11e6:	c9 c4       	rjmp	.+2450   	; 0x1b7a <main+0xeec>
      break;

  case 3:
	  opd[num]*=10;
    11e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ea:	08 2f       	mov	r16, r24
    11ec:	10 e0       	ldi	r17, 0x00	; 0
    11ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f0:	88 2f       	mov	r24, r24
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	9c 01       	movw	r18, r24
    11f6:	22 0f       	add	r18, r18
    11f8:	33 1f       	adc	r19, r19
    11fa:	22 0f       	add	r18, r18
    11fc:	33 1f       	adc	r19, r19
    11fe:	ce 01       	movw	r24, r28
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	82 0f       	add	r24, r18
    1204:	93 1f       	adc	r25, r19
    1206:	fc 01       	movw	r30, r24
    1208:	77 96       	adiw	r30, 0x17	; 23
    120a:	80 81       	ld	r24, Z
    120c:	91 81       	ldd	r25, Z+1	; 0x01
    120e:	a2 81       	ldd	r26, Z+2	; 0x02
    1210:	b3 81       	ldd	r27, Z+3	; 0x03
    1212:	2a e0       	ldi	r18, 0x0A	; 10
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	40 e0       	ldi	r20, 0x00	; 0
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	bc 01       	movw	r22, r24
    121c:	cd 01       	movw	r24, r26
    121e:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    1222:	ab 01       	movw	r20, r22
    1224:	bc 01       	movw	r22, r24
    1226:	98 01       	movw	r18, r16
    1228:	22 0f       	add	r18, r18
    122a:	33 1f       	adc	r19, r19
    122c:	22 0f       	add	r18, r18
    122e:	33 1f       	adc	r19, r19
    1230:	ce 01       	movw	r24, r28
    1232:	01 96       	adiw	r24, 0x01	; 1
    1234:	82 0f       	add	r24, r18
    1236:	93 1f       	adc	r25, r19
    1238:	fc 01       	movw	r30, r24
    123a:	77 96       	adiw	r30, 0x17	; 23
    123c:	40 83       	st	Z, r20
    123e:	51 83       	std	Z+1, r21	; 0x01
    1240:	62 83       	std	Z+2, r22	; 0x02
    1242:	73 83       	std	Z+3, r23	; 0x03
	  opd[num]+=button;
    1244:	8d 85       	ldd	r24, Y+13	; 0x0d
    1246:	08 2f       	mov	r16, r24
    1248:	10 e0       	ldi	r17, 0x00	; 0
    124a:	8d 85       	ldd	r24, Y+13	; 0x0d
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	9c 01       	movw	r18, r24
    1252:	22 0f       	add	r18, r18
    1254:	33 1f       	adc	r19, r19
    1256:	22 0f       	add	r18, r18
    1258:	33 1f       	adc	r19, r19
    125a:	ce 01       	movw	r24, r28
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	82 0f       	add	r24, r18
    1260:	93 1f       	adc	r25, r19
    1262:	fc 01       	movw	r30, r24
    1264:	77 96       	adiw	r30, 0x17	; 23
    1266:	20 81       	ld	r18, Z
    1268:	31 81       	ldd	r19, Z+1	; 0x01
    126a:	42 81       	ldd	r20, Z+2	; 0x02
    126c:	53 81       	ldd	r21, Z+3	; 0x03
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	88 2f       	mov	r24, r24
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	a0 e0       	ldi	r26, 0x00	; 0
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	ba 01       	movw	r22, r20
    127a:	a9 01       	movw	r20, r18
    127c:	48 0f       	add	r20, r24
    127e:	59 1f       	adc	r21, r25
    1280:	6a 1f       	adc	r22, r26
    1282:	7b 1f       	adc	r23, r27
    1284:	98 01       	movw	r18, r16
    1286:	22 0f       	add	r18, r18
    1288:	33 1f       	adc	r19, r19
    128a:	22 0f       	add	r18, r18
    128c:	33 1f       	adc	r19, r19
    128e:	ce 01       	movw	r24, r28
    1290:	01 96       	adiw	r24, 0x01	; 1
    1292:	82 0f       	add	r24, r18
    1294:	93 1f       	adc	r25, r19
    1296:	fc 01       	movw	r30, r24
    1298:	77 96       	adiw	r30, 0x17	; 23
    129a:	40 83       	st	Z, r20
    129c:	51 83       	std	Z+1, r21	; 0x01
    129e:	62 83       	std	Z+2, r22	; 0x02
    12a0:	73 83       	std	Z+3, r23	; 0x03
      OPD_Last=TRUE;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	8e 83       	std	Y+6, r24	; 0x06
      HLCD_VoidSendNumber(button);
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	88 2f       	mov	r24, r24
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	a0 e0       	ldi	r26, 0x00	; 0
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	bc 01       	movw	r22, r24
    12b2:	cd 01       	movw	r24, r26
    12b4:	0e 94 45 18 	call	0x308a	; 0x308a <HLCD_VoidSendNumber>
    12b8:	60 c4       	rjmp	.+2240   	; 0x1b7a <main+0xeec>
      break;

  case 4:
	  opd[num]*=10;
    12ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    12bc:	08 2f       	mov	r16, r24
    12be:	10 e0       	ldi	r17, 0x00	; 0
    12c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c2:	88 2f       	mov	r24, r24
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	9c 01       	movw	r18, r24
    12c8:	22 0f       	add	r18, r18
    12ca:	33 1f       	adc	r19, r19
    12cc:	22 0f       	add	r18, r18
    12ce:	33 1f       	adc	r19, r19
    12d0:	ce 01       	movw	r24, r28
    12d2:	01 96       	adiw	r24, 0x01	; 1
    12d4:	82 0f       	add	r24, r18
    12d6:	93 1f       	adc	r25, r19
    12d8:	fc 01       	movw	r30, r24
    12da:	77 96       	adiw	r30, 0x17	; 23
    12dc:	80 81       	ld	r24, Z
    12de:	91 81       	ldd	r25, Z+1	; 0x01
    12e0:	a2 81       	ldd	r26, Z+2	; 0x02
    12e2:	b3 81       	ldd	r27, Z+3	; 0x03
    12e4:	2a e0       	ldi	r18, 0x0A	; 10
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	bc 01       	movw	r22, r24
    12ee:	cd 01       	movw	r24, r26
    12f0:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    12f4:	ab 01       	movw	r20, r22
    12f6:	bc 01       	movw	r22, r24
    12f8:	98 01       	movw	r18, r16
    12fa:	22 0f       	add	r18, r18
    12fc:	33 1f       	adc	r19, r19
    12fe:	22 0f       	add	r18, r18
    1300:	33 1f       	adc	r19, r19
    1302:	ce 01       	movw	r24, r28
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	82 0f       	add	r24, r18
    1308:	93 1f       	adc	r25, r19
    130a:	fc 01       	movw	r30, r24
    130c:	77 96       	adiw	r30, 0x17	; 23
    130e:	40 83       	st	Z, r20
    1310:	51 83       	std	Z+1, r21	; 0x01
    1312:	62 83       	std	Z+2, r22	; 0x02
    1314:	73 83       	std	Z+3, r23	; 0x03
	  opd[num]+=button;
    1316:	8d 85       	ldd	r24, Y+13	; 0x0d
    1318:	08 2f       	mov	r16, r24
    131a:	10 e0       	ldi	r17, 0x00	; 0
    131c:	8d 85       	ldd	r24, Y+13	; 0x0d
    131e:	88 2f       	mov	r24, r24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	9c 01       	movw	r18, r24
    1324:	22 0f       	add	r18, r18
    1326:	33 1f       	adc	r19, r19
    1328:	22 0f       	add	r18, r18
    132a:	33 1f       	adc	r19, r19
    132c:	ce 01       	movw	r24, r28
    132e:	01 96       	adiw	r24, 0x01	; 1
    1330:	82 0f       	add	r24, r18
    1332:	93 1f       	adc	r25, r19
    1334:	fc 01       	movw	r30, r24
    1336:	77 96       	adiw	r30, 0x17	; 23
    1338:	20 81       	ld	r18, Z
    133a:	31 81       	ldd	r19, Z+1	; 0x01
    133c:	42 81       	ldd	r20, Z+2	; 0x02
    133e:	53 81       	ldd	r21, Z+3	; 0x03
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	88 2f       	mov	r24, r24
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a0 e0       	ldi	r26, 0x00	; 0
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	ba 01       	movw	r22, r20
    134c:	a9 01       	movw	r20, r18
    134e:	48 0f       	add	r20, r24
    1350:	59 1f       	adc	r21, r25
    1352:	6a 1f       	adc	r22, r26
    1354:	7b 1f       	adc	r23, r27
    1356:	98 01       	movw	r18, r16
    1358:	22 0f       	add	r18, r18
    135a:	33 1f       	adc	r19, r19
    135c:	22 0f       	add	r18, r18
    135e:	33 1f       	adc	r19, r19
    1360:	ce 01       	movw	r24, r28
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	82 0f       	add	r24, r18
    1366:	93 1f       	adc	r25, r19
    1368:	fc 01       	movw	r30, r24
    136a:	77 96       	adiw	r30, 0x17	; 23
    136c:	40 83       	st	Z, r20
    136e:	51 83       	std	Z+1, r21	; 0x01
    1370:	62 83       	std	Z+2, r22	; 0x02
    1372:	73 83       	std	Z+3, r23	; 0x03
      OPD_Last=TRUE;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	8e 83       	std	Y+6, r24	; 0x06
      HLCD_VoidSendNumber(button);
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	88 2f       	mov	r24, r24
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	a0 e0       	ldi	r26, 0x00	; 0
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	bc 01       	movw	r22, r24
    1384:	cd 01       	movw	r24, r26
    1386:	0e 94 45 18 	call	0x308a	; 0x308a <HLCD_VoidSendNumber>
    138a:	f7 c3       	rjmp	.+2030   	; 0x1b7a <main+0xeec>
      break;

  case 5:
	  opd[num]*=10;
    138c:	8d 85       	ldd	r24, Y+13	; 0x0d
    138e:	08 2f       	mov	r16, r24
    1390:	10 e0       	ldi	r17, 0x00	; 0
    1392:	8d 85       	ldd	r24, Y+13	; 0x0d
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	9c 01       	movw	r18, r24
    139a:	22 0f       	add	r18, r18
    139c:	33 1f       	adc	r19, r19
    139e:	22 0f       	add	r18, r18
    13a0:	33 1f       	adc	r19, r19
    13a2:	ce 01       	movw	r24, r28
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	82 0f       	add	r24, r18
    13a8:	93 1f       	adc	r25, r19
    13aa:	fc 01       	movw	r30, r24
    13ac:	77 96       	adiw	r30, 0x17	; 23
    13ae:	80 81       	ld	r24, Z
    13b0:	91 81       	ldd	r25, Z+1	; 0x01
    13b2:	a2 81       	ldd	r26, Z+2	; 0x02
    13b4:	b3 81       	ldd	r27, Z+3	; 0x03
    13b6:	2a e0       	ldi	r18, 0x0A	; 10
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	bc 01       	movw	r22, r24
    13c0:	cd 01       	movw	r24, r26
    13c2:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    13c6:	ab 01       	movw	r20, r22
    13c8:	bc 01       	movw	r22, r24
    13ca:	98 01       	movw	r18, r16
    13cc:	22 0f       	add	r18, r18
    13ce:	33 1f       	adc	r19, r19
    13d0:	22 0f       	add	r18, r18
    13d2:	33 1f       	adc	r19, r19
    13d4:	ce 01       	movw	r24, r28
    13d6:	01 96       	adiw	r24, 0x01	; 1
    13d8:	82 0f       	add	r24, r18
    13da:	93 1f       	adc	r25, r19
    13dc:	fc 01       	movw	r30, r24
    13de:	77 96       	adiw	r30, 0x17	; 23
    13e0:	40 83       	st	Z, r20
    13e2:	51 83       	std	Z+1, r21	; 0x01
    13e4:	62 83       	std	Z+2, r22	; 0x02
    13e6:	73 83       	std	Z+3, r23	; 0x03
	  opd[num]+=button;
    13e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ea:	08 2f       	mov	r16, r24
    13ec:	10 e0       	ldi	r17, 0x00	; 0
    13ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	9c 01       	movw	r18, r24
    13f6:	22 0f       	add	r18, r18
    13f8:	33 1f       	adc	r19, r19
    13fa:	22 0f       	add	r18, r18
    13fc:	33 1f       	adc	r19, r19
    13fe:	ce 01       	movw	r24, r28
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	82 0f       	add	r24, r18
    1404:	93 1f       	adc	r25, r19
    1406:	fc 01       	movw	r30, r24
    1408:	77 96       	adiw	r30, 0x17	; 23
    140a:	20 81       	ld	r18, Z
    140c:	31 81       	ldd	r19, Z+1	; 0x01
    140e:	42 81       	ldd	r20, Z+2	; 0x02
    1410:	53 81       	ldd	r21, Z+3	; 0x03
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	88 2f       	mov	r24, r24
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	a0 e0       	ldi	r26, 0x00	; 0
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	ba 01       	movw	r22, r20
    141e:	a9 01       	movw	r20, r18
    1420:	48 0f       	add	r20, r24
    1422:	59 1f       	adc	r21, r25
    1424:	6a 1f       	adc	r22, r26
    1426:	7b 1f       	adc	r23, r27
    1428:	98 01       	movw	r18, r16
    142a:	22 0f       	add	r18, r18
    142c:	33 1f       	adc	r19, r19
    142e:	22 0f       	add	r18, r18
    1430:	33 1f       	adc	r19, r19
    1432:	ce 01       	movw	r24, r28
    1434:	01 96       	adiw	r24, 0x01	; 1
    1436:	82 0f       	add	r24, r18
    1438:	93 1f       	adc	r25, r19
    143a:	fc 01       	movw	r30, r24
    143c:	77 96       	adiw	r30, 0x17	; 23
    143e:	40 83       	st	Z, r20
    1440:	51 83       	std	Z+1, r21	; 0x01
    1442:	62 83       	std	Z+2, r22	; 0x02
    1444:	73 83       	std	Z+3, r23	; 0x03
      OPD_Last=TRUE;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	8e 83       	std	Y+6, r24	; 0x06
      HLCD_VoidSendNumber(button);
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	88 2f       	mov	r24, r24
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	a0 e0       	ldi	r26, 0x00	; 0
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	bc 01       	movw	r22, r24
    1456:	cd 01       	movw	r24, r26
    1458:	0e 94 45 18 	call	0x308a	; 0x308a <HLCD_VoidSendNumber>
    145c:	8e c3       	rjmp	.+1820   	; 0x1b7a <main+0xeec>
      break;

  case 6:
	  opd[num]*=10;
    145e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1460:	08 2f       	mov	r16, r24
    1462:	10 e0       	ldi	r17, 0x00	; 0
    1464:	8d 85       	ldd	r24, Y+13	; 0x0d
    1466:	88 2f       	mov	r24, r24
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	9c 01       	movw	r18, r24
    146c:	22 0f       	add	r18, r18
    146e:	33 1f       	adc	r19, r19
    1470:	22 0f       	add	r18, r18
    1472:	33 1f       	adc	r19, r19
    1474:	ce 01       	movw	r24, r28
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	82 0f       	add	r24, r18
    147a:	93 1f       	adc	r25, r19
    147c:	fc 01       	movw	r30, r24
    147e:	77 96       	adiw	r30, 0x17	; 23
    1480:	80 81       	ld	r24, Z
    1482:	91 81       	ldd	r25, Z+1	; 0x01
    1484:	a2 81       	ldd	r26, Z+2	; 0x02
    1486:	b3 81       	ldd	r27, Z+3	; 0x03
    1488:	2a e0       	ldi	r18, 0x0A	; 10
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	bc 01       	movw	r22, r24
    1492:	cd 01       	movw	r24, r26
    1494:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    1498:	ab 01       	movw	r20, r22
    149a:	bc 01       	movw	r22, r24
    149c:	98 01       	movw	r18, r16
    149e:	22 0f       	add	r18, r18
    14a0:	33 1f       	adc	r19, r19
    14a2:	22 0f       	add	r18, r18
    14a4:	33 1f       	adc	r19, r19
    14a6:	ce 01       	movw	r24, r28
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	82 0f       	add	r24, r18
    14ac:	93 1f       	adc	r25, r19
    14ae:	fc 01       	movw	r30, r24
    14b0:	77 96       	adiw	r30, 0x17	; 23
    14b2:	40 83       	st	Z, r20
    14b4:	51 83       	std	Z+1, r21	; 0x01
    14b6:	62 83       	std	Z+2, r22	; 0x02
    14b8:	73 83       	std	Z+3, r23	; 0x03
	  opd[num]+=button;
    14ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    14bc:	08 2f       	mov	r16, r24
    14be:	10 e0       	ldi	r17, 0x00	; 0
    14c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	9c 01       	movw	r18, r24
    14c8:	22 0f       	add	r18, r18
    14ca:	33 1f       	adc	r19, r19
    14cc:	22 0f       	add	r18, r18
    14ce:	33 1f       	adc	r19, r19
    14d0:	ce 01       	movw	r24, r28
    14d2:	01 96       	adiw	r24, 0x01	; 1
    14d4:	82 0f       	add	r24, r18
    14d6:	93 1f       	adc	r25, r19
    14d8:	fc 01       	movw	r30, r24
    14da:	77 96       	adiw	r30, 0x17	; 23
    14dc:	20 81       	ld	r18, Z
    14de:	31 81       	ldd	r19, Z+1	; 0x01
    14e0:	42 81       	ldd	r20, Z+2	; 0x02
    14e2:	53 81       	ldd	r21, Z+3	; 0x03
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	88 2f       	mov	r24, r24
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	a0 e0       	ldi	r26, 0x00	; 0
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	ba 01       	movw	r22, r20
    14f0:	a9 01       	movw	r20, r18
    14f2:	48 0f       	add	r20, r24
    14f4:	59 1f       	adc	r21, r25
    14f6:	6a 1f       	adc	r22, r26
    14f8:	7b 1f       	adc	r23, r27
    14fa:	98 01       	movw	r18, r16
    14fc:	22 0f       	add	r18, r18
    14fe:	33 1f       	adc	r19, r19
    1500:	22 0f       	add	r18, r18
    1502:	33 1f       	adc	r19, r19
    1504:	ce 01       	movw	r24, r28
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	82 0f       	add	r24, r18
    150a:	93 1f       	adc	r25, r19
    150c:	fc 01       	movw	r30, r24
    150e:	77 96       	adiw	r30, 0x17	; 23
    1510:	40 83       	st	Z, r20
    1512:	51 83       	std	Z+1, r21	; 0x01
    1514:	62 83       	std	Z+2, r22	; 0x02
    1516:	73 83       	std	Z+3, r23	; 0x03
      OPD_Last=TRUE;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	8e 83       	std	Y+6, r24	; 0x06
      HLCD_VoidSendNumber(button);
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	88 2f       	mov	r24, r24
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	a0 e0       	ldi	r26, 0x00	; 0
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 45 18 	call	0x308a	; 0x308a <HLCD_VoidSendNumber>
    152e:	25 c3       	rjmp	.+1610   	; 0x1b7a <main+0xeec>
      break;

  case 7:
	  opd[num]*=10;
    1530:	8d 85       	ldd	r24, Y+13	; 0x0d
    1532:	08 2f       	mov	r16, r24
    1534:	10 e0       	ldi	r17, 0x00	; 0
    1536:	8d 85       	ldd	r24, Y+13	; 0x0d
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	9c 01       	movw	r18, r24
    153e:	22 0f       	add	r18, r18
    1540:	33 1f       	adc	r19, r19
    1542:	22 0f       	add	r18, r18
    1544:	33 1f       	adc	r19, r19
    1546:	ce 01       	movw	r24, r28
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	82 0f       	add	r24, r18
    154c:	93 1f       	adc	r25, r19
    154e:	fc 01       	movw	r30, r24
    1550:	77 96       	adiw	r30, 0x17	; 23
    1552:	80 81       	ld	r24, Z
    1554:	91 81       	ldd	r25, Z+1	; 0x01
    1556:	a2 81       	ldd	r26, Z+2	; 0x02
    1558:	b3 81       	ldd	r27, Z+3	; 0x03
    155a:	2a e0       	ldi	r18, 0x0A	; 10
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	bc 01       	movw	r22, r24
    1564:	cd 01       	movw	r24, r26
    1566:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    156a:	ab 01       	movw	r20, r22
    156c:	bc 01       	movw	r22, r24
    156e:	98 01       	movw	r18, r16
    1570:	22 0f       	add	r18, r18
    1572:	33 1f       	adc	r19, r19
    1574:	22 0f       	add	r18, r18
    1576:	33 1f       	adc	r19, r19
    1578:	ce 01       	movw	r24, r28
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	82 0f       	add	r24, r18
    157e:	93 1f       	adc	r25, r19
    1580:	fc 01       	movw	r30, r24
    1582:	77 96       	adiw	r30, 0x17	; 23
    1584:	40 83       	st	Z, r20
    1586:	51 83       	std	Z+1, r21	; 0x01
    1588:	62 83       	std	Z+2, r22	; 0x02
    158a:	73 83       	std	Z+3, r23	; 0x03
	  opd[num]+=button;
    158c:	8d 85       	ldd	r24, Y+13	; 0x0d
    158e:	08 2f       	mov	r16, r24
    1590:	10 e0       	ldi	r17, 0x00	; 0
    1592:	8d 85       	ldd	r24, Y+13	; 0x0d
    1594:	88 2f       	mov	r24, r24
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	9c 01       	movw	r18, r24
    159a:	22 0f       	add	r18, r18
    159c:	33 1f       	adc	r19, r19
    159e:	22 0f       	add	r18, r18
    15a0:	33 1f       	adc	r19, r19
    15a2:	ce 01       	movw	r24, r28
    15a4:	01 96       	adiw	r24, 0x01	; 1
    15a6:	82 0f       	add	r24, r18
    15a8:	93 1f       	adc	r25, r19
    15aa:	fc 01       	movw	r30, r24
    15ac:	77 96       	adiw	r30, 0x17	; 23
    15ae:	20 81       	ld	r18, Z
    15b0:	31 81       	ldd	r19, Z+1	; 0x01
    15b2:	42 81       	ldd	r20, Z+2	; 0x02
    15b4:	53 81       	ldd	r21, Z+3	; 0x03
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	88 2f       	mov	r24, r24
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a0 e0       	ldi	r26, 0x00	; 0
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	ba 01       	movw	r22, r20
    15c2:	a9 01       	movw	r20, r18
    15c4:	48 0f       	add	r20, r24
    15c6:	59 1f       	adc	r21, r25
    15c8:	6a 1f       	adc	r22, r26
    15ca:	7b 1f       	adc	r23, r27
    15cc:	98 01       	movw	r18, r16
    15ce:	22 0f       	add	r18, r18
    15d0:	33 1f       	adc	r19, r19
    15d2:	22 0f       	add	r18, r18
    15d4:	33 1f       	adc	r19, r19
    15d6:	ce 01       	movw	r24, r28
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	82 0f       	add	r24, r18
    15dc:	93 1f       	adc	r25, r19
    15de:	fc 01       	movw	r30, r24
    15e0:	77 96       	adiw	r30, 0x17	; 23
    15e2:	40 83       	st	Z, r20
    15e4:	51 83       	std	Z+1, r21	; 0x01
    15e6:	62 83       	std	Z+2, r22	; 0x02
    15e8:	73 83       	std	Z+3, r23	; 0x03
      OPD_Last=TRUE;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	8e 83       	std	Y+6, r24	; 0x06
      HLCD_VoidSendNumber(button);
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	a0 e0       	ldi	r26, 0x00	; 0
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	bc 01       	movw	r22, r24
    15fa:	cd 01       	movw	r24, r26
    15fc:	0e 94 45 18 	call	0x308a	; 0x308a <HLCD_VoidSendNumber>
    1600:	bc c2       	rjmp	.+1400   	; 0x1b7a <main+0xeec>
      break;

  case 8:
	  opd[num]*=10;
    1602:	8d 85       	ldd	r24, Y+13	; 0x0d
    1604:	08 2f       	mov	r16, r24
    1606:	10 e0       	ldi	r17, 0x00	; 0
    1608:	8d 85       	ldd	r24, Y+13	; 0x0d
    160a:	88 2f       	mov	r24, r24
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	9c 01       	movw	r18, r24
    1610:	22 0f       	add	r18, r18
    1612:	33 1f       	adc	r19, r19
    1614:	22 0f       	add	r18, r18
    1616:	33 1f       	adc	r19, r19
    1618:	ce 01       	movw	r24, r28
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	82 0f       	add	r24, r18
    161e:	93 1f       	adc	r25, r19
    1620:	fc 01       	movw	r30, r24
    1622:	77 96       	adiw	r30, 0x17	; 23
    1624:	80 81       	ld	r24, Z
    1626:	91 81       	ldd	r25, Z+1	; 0x01
    1628:	a2 81       	ldd	r26, Z+2	; 0x02
    162a:	b3 81       	ldd	r27, Z+3	; 0x03
    162c:	2a e0       	ldi	r18, 0x0A	; 10
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	bc 01       	movw	r22, r24
    1636:	cd 01       	movw	r24, r26
    1638:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    163c:	ab 01       	movw	r20, r22
    163e:	bc 01       	movw	r22, r24
    1640:	98 01       	movw	r18, r16
    1642:	22 0f       	add	r18, r18
    1644:	33 1f       	adc	r19, r19
    1646:	22 0f       	add	r18, r18
    1648:	33 1f       	adc	r19, r19
    164a:	ce 01       	movw	r24, r28
    164c:	01 96       	adiw	r24, 0x01	; 1
    164e:	82 0f       	add	r24, r18
    1650:	93 1f       	adc	r25, r19
    1652:	fc 01       	movw	r30, r24
    1654:	77 96       	adiw	r30, 0x17	; 23
    1656:	40 83       	st	Z, r20
    1658:	51 83       	std	Z+1, r21	; 0x01
    165a:	62 83       	std	Z+2, r22	; 0x02
    165c:	73 83       	std	Z+3, r23	; 0x03
	  opd[num]+=button;
    165e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1660:	08 2f       	mov	r16, r24
    1662:	10 e0       	ldi	r17, 0x00	; 0
    1664:	8d 85       	ldd	r24, Y+13	; 0x0d
    1666:	88 2f       	mov	r24, r24
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	9c 01       	movw	r18, r24
    166c:	22 0f       	add	r18, r18
    166e:	33 1f       	adc	r19, r19
    1670:	22 0f       	add	r18, r18
    1672:	33 1f       	adc	r19, r19
    1674:	ce 01       	movw	r24, r28
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	82 0f       	add	r24, r18
    167a:	93 1f       	adc	r25, r19
    167c:	fc 01       	movw	r30, r24
    167e:	77 96       	adiw	r30, 0x17	; 23
    1680:	20 81       	ld	r18, Z
    1682:	31 81       	ldd	r19, Z+1	; 0x01
    1684:	42 81       	ldd	r20, Z+2	; 0x02
    1686:	53 81       	ldd	r21, Z+3	; 0x03
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	88 2f       	mov	r24, r24
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	a0 e0       	ldi	r26, 0x00	; 0
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	ba 01       	movw	r22, r20
    1694:	a9 01       	movw	r20, r18
    1696:	48 0f       	add	r20, r24
    1698:	59 1f       	adc	r21, r25
    169a:	6a 1f       	adc	r22, r26
    169c:	7b 1f       	adc	r23, r27
    169e:	98 01       	movw	r18, r16
    16a0:	22 0f       	add	r18, r18
    16a2:	33 1f       	adc	r19, r19
    16a4:	22 0f       	add	r18, r18
    16a6:	33 1f       	adc	r19, r19
    16a8:	ce 01       	movw	r24, r28
    16aa:	01 96       	adiw	r24, 0x01	; 1
    16ac:	82 0f       	add	r24, r18
    16ae:	93 1f       	adc	r25, r19
    16b0:	fc 01       	movw	r30, r24
    16b2:	77 96       	adiw	r30, 0x17	; 23
    16b4:	40 83       	st	Z, r20
    16b6:	51 83       	std	Z+1, r21	; 0x01
    16b8:	62 83       	std	Z+2, r22	; 0x02
    16ba:	73 83       	std	Z+3, r23	; 0x03
      OPD_Last=TRUE;
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	8e 83       	std	Y+6, r24	; 0x06
      HLCD_VoidSendNumber(button);
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	a0 e0       	ldi	r26, 0x00	; 0
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	bc 01       	movw	r22, r24
    16cc:	cd 01       	movw	r24, r26
    16ce:	0e 94 45 18 	call	0x308a	; 0x308a <HLCD_VoidSendNumber>
    16d2:	53 c2       	rjmp	.+1190   	; 0x1b7a <main+0xeec>
      break;

  case 9:
	  opd[num]*=10;
    16d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d6:	08 2f       	mov	r16, r24
    16d8:	10 e0       	ldi	r17, 0x00	; 0
    16da:	8d 85       	ldd	r24, Y+13	; 0x0d
    16dc:	88 2f       	mov	r24, r24
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	9c 01       	movw	r18, r24
    16e2:	22 0f       	add	r18, r18
    16e4:	33 1f       	adc	r19, r19
    16e6:	22 0f       	add	r18, r18
    16e8:	33 1f       	adc	r19, r19
    16ea:	ce 01       	movw	r24, r28
    16ec:	01 96       	adiw	r24, 0x01	; 1
    16ee:	82 0f       	add	r24, r18
    16f0:	93 1f       	adc	r25, r19
    16f2:	fc 01       	movw	r30, r24
    16f4:	77 96       	adiw	r30, 0x17	; 23
    16f6:	80 81       	ld	r24, Z
    16f8:	91 81       	ldd	r25, Z+1	; 0x01
    16fa:	a2 81       	ldd	r26, Z+2	; 0x02
    16fc:	b3 81       	ldd	r27, Z+3	; 0x03
    16fe:	2a e0       	ldi	r18, 0x0A	; 10
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	bc 01       	movw	r22, r24
    1708:	cd 01       	movw	r24, r26
    170a:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    170e:	ab 01       	movw	r20, r22
    1710:	bc 01       	movw	r22, r24
    1712:	98 01       	movw	r18, r16
    1714:	22 0f       	add	r18, r18
    1716:	33 1f       	adc	r19, r19
    1718:	22 0f       	add	r18, r18
    171a:	33 1f       	adc	r19, r19
    171c:	ce 01       	movw	r24, r28
    171e:	01 96       	adiw	r24, 0x01	; 1
    1720:	82 0f       	add	r24, r18
    1722:	93 1f       	adc	r25, r19
    1724:	fc 01       	movw	r30, r24
    1726:	77 96       	adiw	r30, 0x17	; 23
    1728:	40 83       	st	Z, r20
    172a:	51 83       	std	Z+1, r21	; 0x01
    172c:	62 83       	std	Z+2, r22	; 0x02
    172e:	73 83       	std	Z+3, r23	; 0x03
	  opd[num]+=button;
    1730:	8d 85       	ldd	r24, Y+13	; 0x0d
    1732:	08 2f       	mov	r16, r24
    1734:	10 e0       	ldi	r17, 0x00	; 0
    1736:	8d 85       	ldd	r24, Y+13	; 0x0d
    1738:	88 2f       	mov	r24, r24
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	9c 01       	movw	r18, r24
    173e:	22 0f       	add	r18, r18
    1740:	33 1f       	adc	r19, r19
    1742:	22 0f       	add	r18, r18
    1744:	33 1f       	adc	r19, r19
    1746:	ce 01       	movw	r24, r28
    1748:	01 96       	adiw	r24, 0x01	; 1
    174a:	82 0f       	add	r24, r18
    174c:	93 1f       	adc	r25, r19
    174e:	fc 01       	movw	r30, r24
    1750:	77 96       	adiw	r30, 0x17	; 23
    1752:	20 81       	ld	r18, Z
    1754:	31 81       	ldd	r19, Z+1	; 0x01
    1756:	42 81       	ldd	r20, Z+2	; 0x02
    1758:	53 81       	ldd	r21, Z+3	; 0x03
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a0 e0       	ldi	r26, 0x00	; 0
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	ba 01       	movw	r22, r20
    1766:	a9 01       	movw	r20, r18
    1768:	48 0f       	add	r20, r24
    176a:	59 1f       	adc	r21, r25
    176c:	6a 1f       	adc	r22, r26
    176e:	7b 1f       	adc	r23, r27
    1770:	98 01       	movw	r18, r16
    1772:	22 0f       	add	r18, r18
    1774:	33 1f       	adc	r19, r19
    1776:	22 0f       	add	r18, r18
    1778:	33 1f       	adc	r19, r19
    177a:	ce 01       	movw	r24, r28
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	82 0f       	add	r24, r18
    1780:	93 1f       	adc	r25, r19
    1782:	fc 01       	movw	r30, r24
    1784:	77 96       	adiw	r30, 0x17	; 23
    1786:	40 83       	st	Z, r20
    1788:	51 83       	std	Z+1, r21	; 0x01
    178a:	62 83       	std	Z+2, r22	; 0x02
    178c:	73 83       	std	Z+3, r23	; 0x03
      OPD_Last=TRUE;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	8e 83       	std	Y+6, r24	; 0x06
      HLCD_VoidSendNumber(button);
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	88 2f       	mov	r24, r24
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	a0 e0       	ldi	r26, 0x00	; 0
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	bc 01       	movw	r22, r24
    179e:	cd 01       	movw	r24, r26
    17a0:	0e 94 45 18 	call	0x308a	; 0x308a <HLCD_VoidSendNumber>
    17a4:	ea c1       	rjmp	.+980    	; 0x1b7a <main+0xeec>
      break;


  case '+' :
	  /*If Last Key Is A Number*/
	  if(OPD_Last)
    17a6:	8e 81       	ldd	r24, Y+6	; 0x06
    17a8:	88 23       	and	r24, r24
    17aa:	a9 f0       	breq	.+42     	; 0x17d6 <main+0xb48>
	  {
		  /*Put The Symbol In Operations Array*/
		  opr[sym++]='+';
    17ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	ce 01       	movw	r24, r28
    17b4:	0e 96       	adiw	r24, 0x0e	; 14
    17b6:	fc 01       	movw	r30, r24
    17b8:	e2 0f       	add	r30, r18
    17ba:	f3 1f       	adc	r31, r19
    17bc:	8b e2       	ldi	r24, 0x2B	; 43
    17be:	80 83       	st	Z, r24
    17c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    17c2:	8f 5f       	subi	r24, 0xFF	; 255
    17c4:	8c 87       	std	Y+12, r24	; 0x0c
		  num++;
    17c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c8:	8f 5f       	subi	r24, 0xFF	; 255
    17ca:	8d 87       	std	Y+13, r24	; 0x0d
		  OPD_Last=FALSE;
    17cc:	1e 82       	std	Y+6, r1	; 0x06
HLCD_VoidSendChar('+');
    17ce:	8b e2       	ldi	r24, 0x2B	; 43
    17d0:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <HLCD_VoidSendChar>
    17d4:	d2 c1       	rjmp	.+932    	; 0x1b7a <main+0xeec>
	  }
	  else
	  {
		  OPD_Last=TRUE;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	8e 83       	std	Y+6, r24	; 0x06
    17da:	cf c1       	rjmp	.+926    	; 0x1b7a <main+0xeec>
	  }
	  break;

  case '-' :
	  /*If Last Key Is A Number*/
	  if(OPD_Last)
    17dc:	8e 81       	ldd	r24, Y+6	; 0x06
    17de:	88 23       	and	r24, r24
    17e0:	a9 f0       	breq	.+42     	; 0x180c <main+0xb7e>
	  {
		  /*Put The Symbol In Operations Array*/
		  opr[sym++]='-';
    17e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	ce 01       	movw	r24, r28
    17ea:	0e 96       	adiw	r24, 0x0e	; 14
    17ec:	fc 01       	movw	r30, r24
    17ee:	e2 0f       	add	r30, r18
    17f0:	f3 1f       	adc	r31, r19
    17f2:	8d e2       	ldi	r24, 0x2D	; 45
    17f4:	80 83       	st	Z, r24
    17f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    17f8:	8f 5f       	subi	r24, 0xFF	; 255
    17fa:	8c 87       	std	Y+12, r24	; 0x0c
		  num++;
    17fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17fe:	8f 5f       	subi	r24, 0xFF	; 255
    1800:	8d 87       	std	Y+13, r24	; 0x0d
		  OPD_Last=FALSE;
    1802:	1e 82       	std	Y+6, r1	; 0x06
		  HLCD_VoidSendChar('-');
    1804:	8d e2       	ldi	r24, 0x2D	; 45
    1806:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <HLCD_VoidSendChar>
    180a:	b7 c1       	rjmp	.+878    	; 0x1b7a <main+0xeec>
	  }
	  else
	  {
		  OPD_Last=TRUE;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	8e 83       	std	Y+6, r24	; 0x06
    1810:	b4 c1       	rjmp	.+872    	; 0x1b7a <main+0xeec>
	  }
	  break;

  case '*' :
	  /*If Last Key Is A Number*/
	  if(OPD_Last)
    1812:	8e 81       	ldd	r24, Y+6	; 0x06
    1814:	88 23       	and	r24, r24
    1816:	a9 f0       	breq	.+42     	; 0x1842 <main+0xbb4>
	  {
		  /*Put The Symbol In Operations Array*/
		  opr[sym++]='*';
    1818:	8c 85       	ldd	r24, Y+12	; 0x0c
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	ce 01       	movw	r24, r28
    1820:	0e 96       	adiw	r24, 0x0e	; 14
    1822:	fc 01       	movw	r30, r24
    1824:	e2 0f       	add	r30, r18
    1826:	f3 1f       	adc	r31, r19
    1828:	8a e2       	ldi	r24, 0x2A	; 42
    182a:	80 83       	st	Z, r24
    182c:	8c 85       	ldd	r24, Y+12	; 0x0c
    182e:	8f 5f       	subi	r24, 0xFF	; 255
    1830:	8c 87       	std	Y+12, r24	; 0x0c
		  num++;
    1832:	8d 85       	ldd	r24, Y+13	; 0x0d
    1834:	8f 5f       	subi	r24, 0xFF	; 255
    1836:	8d 87       	std	Y+13, r24	; 0x0d
		  OPD_Last=FALSE;
    1838:	1e 82       	std	Y+6, r1	; 0x06
		  HLCD_VoidSendChar('*');
    183a:	8a e2       	ldi	r24, 0x2A	; 42
    183c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <HLCD_VoidSendChar>
    1840:	9c c1       	rjmp	.+824    	; 0x1b7a <main+0xeec>
	  }
	  else
	  {
		  OPD_Last=TRUE;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	8e 83       	std	Y+6, r24	; 0x06
    1846:	99 c1       	rjmp	.+818    	; 0x1b7a <main+0xeec>
	  }
	  break;

  case '/' :
	  /*If Last Key Is A Number*/
	  if(OPD_Last)
    1848:	8e 81       	ldd	r24, Y+6	; 0x06
    184a:	88 23       	and	r24, r24
    184c:	a9 f0       	breq	.+42     	; 0x1878 <main+0xbea>
	  {

		  /*Put The Symbol In Operations Array*/
		  opr[sym++]='/';
    184e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	ce 01       	movw	r24, r28
    1856:	0e 96       	adiw	r24, 0x0e	; 14
    1858:	fc 01       	movw	r30, r24
    185a:	e2 0f       	add	r30, r18
    185c:	f3 1f       	adc	r31, r19
    185e:	8f e2       	ldi	r24, 0x2F	; 47
    1860:	80 83       	st	Z, r24
    1862:	8c 85       	ldd	r24, Y+12	; 0x0c
    1864:	8f 5f       	subi	r24, 0xFF	; 255
    1866:	8c 87       	std	Y+12, r24	; 0x0c
		  num++;
    1868:	8d 85       	ldd	r24, Y+13	; 0x0d
    186a:	8f 5f       	subi	r24, 0xFF	; 255
    186c:	8d 87       	std	Y+13, r24	; 0x0d
		  OPD_Last=FALSE;
    186e:	1e 82       	std	Y+6, r1	; 0x06
		  HLCD_VoidSendChar('/');
    1870:	8f e2       	ldi	r24, 0x2F	; 47
    1872:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <HLCD_VoidSendChar>
    1876:	81 c1       	rjmp	.+770    	; 0x1b7a <main+0xeec>

	  }
	  else
	  {
		  OPD_Last=TRUE;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	8e 83       	std	Y+6, r24	; 0x06
    187c:	7e c1       	rjmp	.+764    	; 0x1b7a <main+0xeec>
	  }
	  break;

  case '=' :
	  /*Calculate The Result*/
	  HLCD_VoidSendChar('=');
    187e:	8d e3       	ldi	r24, 0x3D	; 61
    1880:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <HLCD_VoidSendChar>
	 Result=opd[0];
    1884:	88 8d       	ldd	r24, Y+24	; 0x18
    1886:	99 8d       	ldd	r25, Y+25	; 0x19
    1888:	aa 8d       	ldd	r26, Y+26	; 0x1a
    188a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    188c:	88 87       	std	Y+8, r24	; 0x08
    188e:	99 87       	std	Y+9, r25	; 0x09
    1890:	aa 87       	std	Y+10, r26	; 0x0a
    1892:	bb 87       	std	Y+11, r27	; 0x0b
	 u8 calc;
	 for(calc=0;calc<=sym;calc++)
    1894:	19 82       	std	Y+1, r1	; 0x01
    1896:	f3 c0       	rjmp	.+486    	; 0x1a7e <main+0xdf0>
	 {
		 switch(opr[calc])
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	ce 01       	movw	r24, r28
    18a0:	0e 96       	adiw	r24, 0x0e	; 14
    18a2:	fc 01       	movw	r30, r24
    18a4:	e2 0f       	add	r30, r18
    18a6:	f3 1f       	adc	r31, r19
    18a8:	80 81       	ld	r24, Z
    18aa:	a8 2f       	mov	r26, r24
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	22 96       	adiw	r28, 0x02	; 2
    18b0:	bf af       	std	Y+63, r27	; 0x3f
    18b2:	ae af       	std	Y+62, r26	; 0x3e
    18b4:	22 97       	sbiw	r28, 0x02	; 2
    18b6:	22 96       	adiw	r28, 0x02	; 2
    18b8:	2e ad       	ldd	r18, Y+62	; 0x3e
    18ba:	3f ad       	ldd	r19, Y+63	; 0x3f
    18bc:	22 97       	sbiw	r28, 0x02	; 2
    18be:	2b 32       	cpi	r18, 0x2B	; 43
    18c0:	31 05       	cpc	r19, r1
    18c2:	01 f1       	breq	.+64     	; 0x1904 <main+0xc76>
    18c4:	22 96       	adiw	r28, 0x02	; 2
    18c6:	8e ad       	ldd	r24, Y+62	; 0x3e
    18c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    18ca:	22 97       	sbiw	r28, 0x02	; 2
    18cc:	8c 32       	cpi	r24, 0x2C	; 44
    18ce:	91 05       	cpc	r25, r1
    18d0:	4c f4       	brge	.+18     	; 0x18e4 <main+0xc56>
    18d2:	22 96       	adiw	r28, 0x02	; 2
    18d4:	ae ad       	ldd	r26, Y+62	; 0x3e
    18d6:	bf ad       	ldd	r27, Y+63	; 0x3f
    18d8:	22 97       	sbiw	r28, 0x02	; 2
    18da:	aa 32       	cpi	r26, 0x2A	; 42
    18dc:	b1 05       	cpc	r27, r1
    18de:	09 f4       	brne	.+2      	; 0x18e2 <main+0xc54>
    18e0:	51 c0       	rjmp	.+162    	; 0x1984 <main+0xcf6>
    18e2:	ca c0       	rjmp	.+404    	; 0x1a78 <main+0xdea>
    18e4:	22 96       	adiw	r28, 0x02	; 2
    18e6:	2e ad       	ldd	r18, Y+62	; 0x3e
    18e8:	3f ad       	ldd	r19, Y+63	; 0x3f
    18ea:	22 97       	sbiw	r28, 0x02	; 2
    18ec:	2d 32       	cpi	r18, 0x2D	; 45
    18ee:	31 05       	cpc	r19, r1
    18f0:	49 f1       	breq	.+82     	; 0x1944 <main+0xcb6>
    18f2:	22 96       	adiw	r28, 0x02	; 2
    18f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    18f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    18f8:	22 97       	sbiw	r28, 0x02	; 2
    18fa:	8f 32       	cpi	r24, 0x2F	; 47
    18fc:	91 05       	cpc	r25, r1
    18fe:	09 f4       	brne	.+2      	; 0x1902 <main+0xc74>
    1900:	63 c0       	rjmp	.+198    	; 0x19c8 <main+0xd3a>
    1902:	ba c0       	rjmp	.+372    	; 0x1a78 <main+0xdea>
		 {
		 case '+':
			 Result+=opd[calc+1];
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	88 2f       	mov	r24, r24
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	01 96       	adiw	r24, 0x01	; 1
    190c:	9c 01       	movw	r18, r24
    190e:	22 0f       	add	r18, r18
    1910:	33 1f       	adc	r19, r19
    1912:	22 0f       	add	r18, r18
    1914:	33 1f       	adc	r19, r19
    1916:	ce 01       	movw	r24, r28
    1918:	01 96       	adiw	r24, 0x01	; 1
    191a:	82 0f       	add	r24, r18
    191c:	93 1f       	adc	r25, r19
    191e:	fc 01       	movw	r30, r24
    1920:	77 96       	adiw	r30, 0x17	; 23
    1922:	20 81       	ld	r18, Z
    1924:	31 81       	ldd	r19, Z+1	; 0x01
    1926:	42 81       	ldd	r20, Z+2	; 0x02
    1928:	53 81       	ldd	r21, Z+3	; 0x03
    192a:	88 85       	ldd	r24, Y+8	; 0x08
    192c:	99 85       	ldd	r25, Y+9	; 0x09
    192e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1930:	bb 85       	ldd	r27, Y+11	; 0x0b
    1932:	82 0f       	add	r24, r18
    1934:	93 1f       	adc	r25, r19
    1936:	a4 1f       	adc	r26, r20
    1938:	b5 1f       	adc	r27, r21
    193a:	88 87       	std	Y+8, r24	; 0x08
    193c:	99 87       	std	Y+9, r25	; 0x09
    193e:	aa 87       	std	Y+10, r26	; 0x0a
    1940:	bb 87       	std	Y+11, r27	; 0x0b
    1942:	9a c0       	rjmp	.+308    	; 0x1a78 <main+0xdea>
			 break;

		 case '-':
				 Result-=opd[calc+1];
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	9c 01       	movw	r18, r24
    194e:	22 0f       	add	r18, r18
    1950:	33 1f       	adc	r19, r19
    1952:	22 0f       	add	r18, r18
    1954:	33 1f       	adc	r19, r19
    1956:	ce 01       	movw	r24, r28
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	82 0f       	add	r24, r18
    195c:	93 1f       	adc	r25, r19
    195e:	fc 01       	movw	r30, r24
    1960:	77 96       	adiw	r30, 0x17	; 23
    1962:	20 81       	ld	r18, Z
    1964:	31 81       	ldd	r19, Z+1	; 0x01
    1966:	42 81       	ldd	r20, Z+2	; 0x02
    1968:	53 81       	ldd	r21, Z+3	; 0x03
    196a:	88 85       	ldd	r24, Y+8	; 0x08
    196c:	99 85       	ldd	r25, Y+9	; 0x09
    196e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1970:	bb 85       	ldd	r27, Y+11	; 0x0b
    1972:	82 1b       	sub	r24, r18
    1974:	93 0b       	sbc	r25, r19
    1976:	a4 0b       	sbc	r26, r20
    1978:	b5 0b       	sbc	r27, r21
    197a:	88 87       	std	Y+8, r24	; 0x08
    197c:	99 87       	std	Y+9, r25	; 0x09
    197e:	aa 87       	std	Y+10, r26	; 0x0a
    1980:	bb 87       	std	Y+11, r27	; 0x0b
    1982:	7a c0       	rjmp	.+244    	; 0x1a78 <main+0xdea>
				 break;

		 case '*':
				 Result*=opd[calc+1];
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	88 2f       	mov	r24, r24
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	9c 01       	movw	r18, r24
    198e:	22 0f       	add	r18, r18
    1990:	33 1f       	adc	r19, r19
    1992:	22 0f       	add	r18, r18
    1994:	33 1f       	adc	r19, r19
    1996:	ce 01       	movw	r24, r28
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	82 0f       	add	r24, r18
    199c:	93 1f       	adc	r25, r19
    199e:	fc 01       	movw	r30, r24
    19a0:	77 96       	adiw	r30, 0x17	; 23
    19a2:	20 81       	ld	r18, Z
    19a4:	31 81       	ldd	r19, Z+1	; 0x01
    19a6:	42 81       	ldd	r20, Z+2	; 0x02
    19a8:	53 81       	ldd	r21, Z+3	; 0x03
    19aa:	88 85       	ldd	r24, Y+8	; 0x08
    19ac:	99 85       	ldd	r25, Y+9	; 0x09
    19ae:	aa 85       	ldd	r26, Y+10	; 0x0a
    19b0:	bb 85       	ldd	r27, Y+11	; 0x0b
    19b2:	bc 01       	movw	r22, r24
    19b4:	cd 01       	movw	r24, r26
    19b6:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	88 87       	std	Y+8, r24	; 0x08
    19c0:	99 87       	std	Y+9, r25	; 0x09
    19c2:	aa 87       	std	Y+10, r26	; 0x0a
    19c4:	bb 87       	std	Y+11, r27	; 0x0b
    19c6:	58 c0       	rjmp	.+176    	; 0x1a78 <main+0xdea>
				 break;

		 case '/':
			 /*If Divide By ZERO*/
			 if(opd[num]==0)
    19c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ca:	88 2f       	mov	r24, r24
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	9c 01       	movw	r18, r24
    19d0:	22 0f       	add	r18, r18
    19d2:	33 1f       	adc	r19, r19
    19d4:	22 0f       	add	r18, r18
    19d6:	33 1f       	adc	r19, r19
    19d8:	ce 01       	movw	r24, r28
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	82 0f       	add	r24, r18
    19de:	93 1f       	adc	r25, r19
    19e0:	fc 01       	movw	r30, r24
    19e2:	77 96       	adiw	r30, 0x17	; 23
    19e4:	80 81       	ld	r24, Z
    19e6:	91 81       	ldd	r25, Z+1	; 0x01
    19e8:	a2 81       	ldd	r26, Z+2	; 0x02
    19ea:	b3 81       	ldd	r27, Z+3	; 0x03
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	a1 05       	cpc	r26, r1
    19f0:	b1 05       	cpc	r27, r1
    19f2:	59 f4       	brne	.+22     	; 0x1a0a <main+0xd7c>
			 {
				 /*Clear Calculator*/
				 HLCD_VoidSendCommand(0x01);
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	0e 94 c8 10 	call	0x2190	; 0x2190 <HLCD_VoidSendCommand>
				 HLCD_VoidSendString("ERROR Divide By0");
    19fa:	80 e6       	ldi	r24, 0x60	; 96
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	0e 94 01 18 	call	0x3002	; 0x3002 <HLCD_VoidSendString>
				 Result_Disp=FALSE;
    1a02:	1c 82       	std	Y+4, r1	; 0x04
				 Divide_By_Zero=TRUE;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	8f 83       	std	Y+7, r24	; 0x07
    1a08:	37 c0       	rjmp	.+110    	; 0x1a78 <main+0xdea>

			 }
			 else if(opd[num]!=0)
    1a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	9c 01       	movw	r18, r24
    1a12:	22 0f       	add	r18, r18
    1a14:	33 1f       	adc	r19, r19
    1a16:	22 0f       	add	r18, r18
    1a18:	33 1f       	adc	r19, r19
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	01 96       	adiw	r24, 0x01	; 1
    1a1e:	82 0f       	add	r24, r18
    1a20:	93 1f       	adc	r25, r19
    1a22:	fc 01       	movw	r30, r24
    1a24:	77 96       	adiw	r30, 0x17	; 23
    1a26:	80 81       	ld	r24, Z
    1a28:	91 81       	ldd	r25, Z+1	; 0x01
    1a2a:	a2 81       	ldd	r26, Z+2	; 0x02
    1a2c:	b3 81       	ldd	r27, Z+3	; 0x03
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	a1 05       	cpc	r26, r1
    1a32:	b1 05       	cpc	r27, r1
    1a34:	09 f1       	breq	.+66     	; 0x1a78 <main+0xdea>
			 {
				 Result/=opd[calc+1];
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	88 2f       	mov	r24, r24
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	9c 01       	movw	r18, r24
    1a40:	22 0f       	add	r18, r18
    1a42:	33 1f       	adc	r19, r19
    1a44:	22 0f       	add	r18, r18
    1a46:	33 1f       	adc	r19, r19
    1a48:	ce 01       	movw	r24, r28
    1a4a:	01 96       	adiw	r24, 0x01	; 1
    1a4c:	82 0f       	add	r24, r18
    1a4e:	93 1f       	adc	r25, r19
    1a50:	fc 01       	movw	r30, r24
    1a52:	77 96       	adiw	r30, 0x17	; 23
    1a54:	20 81       	ld	r18, Z
    1a56:	31 81       	ldd	r19, Z+1	; 0x01
    1a58:	42 81       	ldd	r20, Z+2	; 0x02
    1a5a:	53 81       	ldd	r21, Z+3	; 0x03
    1a5c:	88 85       	ldd	r24, Y+8	; 0x08
    1a5e:	99 85       	ldd	r25, Y+9	; 0x09
    1a60:	aa 85       	ldd	r26, Y+10	; 0x0a
    1a62:	bb 85       	ldd	r27, Y+11	; 0x0b
    1a64:	bc 01       	movw	r22, r24
    1a66:	cd 01       	movw	r24, r26
    1a68:	0e 94 a5 1c 	call	0x394a	; 0x394a <__udivmodsi4>
    1a6c:	da 01       	movw	r26, r20
    1a6e:	c9 01       	movw	r24, r18
    1a70:	88 87       	std	Y+8, r24	; 0x08
    1a72:	99 87       	std	Y+9, r25	; 0x09
    1a74:	aa 87       	std	Y+10, r26	; 0x0a
    1a76:	bb 87       	std	Y+11, r27	; 0x0b
  case '=' :
	  /*Calculate The Result*/
	  HLCD_VoidSendChar('=');
	 Result=opd[0];
	 u8 calc;
	 for(calc=0;calc<=sym;calc++)
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	8f 5f       	subi	r24, 0xFF	; 255
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	99 81       	ldd	r25, Y+1	; 0x01
    1a80:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a82:	89 17       	cp	r24, r25
    1a84:	08 f0       	brcs	.+2      	; 0x1a88 <main+0xdfa>
    1a86:	08 cf       	rjmp	.-496    	; 0x1898 <main+0xc0a>

		 default:
			 break;
		 }
	 }
	 if(Divide_By_Zero==FALSE)
    1a88:	8f 81       	ldd	r24, Y+7	; 0x07
    1a8a:	88 23       	and	r24, r24
    1a8c:	09 f0       	breq	.+2      	; 0x1a90 <main+0xe02>
    1a8e:	75 c0       	rjmp	.+234    	; 0x1b7a <main+0xeec>
	 {
	 Result_Exist=TRUE;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	8d 83       	std	Y+5, r24	; 0x05
     Result_Disp=TRUE;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	8c 83       	std	Y+4, r24	; 0x04
    1a98:	70 c0       	rjmp	.+224    	; 0x1b7a <main+0xeec>
	 }
          break;
  case 'C':
	  /*Clear Calculator*/
	  Reset_Calc;
    1a9a:	1d 86       	std	Y+13, r1	; 0x0d
    1a9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9e:	8c 87       	std	Y+12, r24	; 0x0c
    1aa0:	82 e3       	ldi	r24, 0x32	; 50
    1aa2:	8a 83       	std	Y+2, r24	; 0x02
    1aa4:	1c ae       	std	Y+60, r1	; 0x3c
    1aa6:	1d ae       	std	Y+61, r1	; 0x3d
    1aa8:	1e ae       	std	Y+62, r1	; 0x3e
    1aaa:	1f ae       	std	Y+63, r1	; 0x3f
    1aac:	8c ad       	ldd	r24, Y+60	; 0x3c
    1aae:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ab0:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ab2:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ab4:	88 af       	std	Y+56, r24	; 0x38
    1ab6:	99 af       	std	Y+57, r25	; 0x39
    1ab8:	aa af       	std	Y+58, r26	; 0x3a
    1aba:	bb af       	std	Y+59, r27	; 0x3b
    1abc:	88 ad       	ldd	r24, Y+56	; 0x38
    1abe:	99 ad       	ldd	r25, Y+57	; 0x39
    1ac0:	aa ad       	ldd	r26, Y+58	; 0x3a
    1ac2:	bb ad       	ldd	r27, Y+59	; 0x3b
    1ac4:	8c ab       	std	Y+52, r24	; 0x34
    1ac6:	9d ab       	std	Y+53, r25	; 0x35
    1ac8:	ae ab       	std	Y+54, r26	; 0x36
    1aca:	bf ab       	std	Y+55, r27	; 0x37
    1acc:	8c a9       	ldd	r24, Y+52	; 0x34
    1ace:	9d a9       	ldd	r25, Y+53	; 0x35
    1ad0:	ae a9       	ldd	r26, Y+54	; 0x36
    1ad2:	bf a9       	ldd	r27, Y+55	; 0x37
    1ad4:	88 ab       	std	Y+48, r24	; 0x30
    1ad6:	99 ab       	std	Y+49, r25	; 0x31
    1ad8:	aa ab       	std	Y+50, r26	; 0x32
    1ada:	bb ab       	std	Y+51, r27	; 0x33
    1adc:	88 a9       	ldd	r24, Y+48	; 0x30
    1ade:	99 a9       	ldd	r25, Y+49	; 0x31
    1ae0:	aa a9       	ldd	r26, Y+50	; 0x32
    1ae2:	bb a9       	ldd	r27, Y+51	; 0x33
    1ae4:	8c a7       	std	Y+44, r24	; 0x2c
    1ae6:	9d a7       	std	Y+45, r25	; 0x2d
    1ae8:	ae a7       	std	Y+46, r26	; 0x2e
    1aea:	bf a7       	std	Y+47, r27	; 0x2f
    1aec:	8c a5       	ldd	r24, Y+44	; 0x2c
    1aee:	9d a5       	ldd	r25, Y+45	; 0x2d
    1af0:	ae a5       	ldd	r26, Y+46	; 0x2e
    1af2:	bf a5       	ldd	r27, Y+47	; 0x2f
    1af4:	88 a7       	std	Y+40, r24	; 0x28
    1af6:	99 a7       	std	Y+41, r25	; 0x29
    1af8:	aa a7       	std	Y+42, r26	; 0x2a
    1afa:	bb a7       	std	Y+43, r27	; 0x2b
    1afc:	88 a5       	ldd	r24, Y+40	; 0x28
    1afe:	99 a5       	ldd	r25, Y+41	; 0x29
    1b00:	aa a5       	ldd	r26, Y+42	; 0x2a
    1b02:	bb a5       	ldd	r27, Y+43	; 0x2b
    1b04:	8c a3       	std	Y+36, r24	; 0x24
    1b06:	9d a3       	std	Y+37, r25	; 0x25
    1b08:	ae a3       	std	Y+38, r26	; 0x26
    1b0a:	bf a3       	std	Y+39, r27	; 0x27
    1b0c:	8c a1       	ldd	r24, Y+36	; 0x24
    1b0e:	9d a1       	ldd	r25, Y+37	; 0x25
    1b10:	ae a1       	ldd	r26, Y+38	; 0x26
    1b12:	bf a1       	ldd	r27, Y+39	; 0x27
    1b14:	88 a3       	std	Y+32, r24	; 0x20
    1b16:	99 a3       	std	Y+33, r25	; 0x21
    1b18:	aa a3       	std	Y+34, r26	; 0x22
    1b1a:	bb a3       	std	Y+35, r27	; 0x23
    1b1c:	88 a1       	ldd	r24, Y+32	; 0x20
    1b1e:	99 a1       	ldd	r25, Y+33	; 0x21
    1b20:	aa a1       	ldd	r26, Y+34	; 0x22
    1b22:	bb a1       	ldd	r27, Y+35	; 0x23
    1b24:	8c 8f       	std	Y+28, r24	; 0x1c
    1b26:	9d 8f       	std	Y+29, r25	; 0x1d
    1b28:	ae 8f       	std	Y+30, r26	; 0x1e
    1b2a:	bf 8f       	std	Y+31, r27	; 0x1f
    1b2c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b2e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b30:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1b32:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1b34:	88 8f       	std	Y+24, r24	; 0x18
    1b36:	99 8f       	std	Y+25, r25	; 0x19
    1b38:	aa 8f       	std	Y+26, r26	; 0x1a
    1b3a:	bb 8f       	std	Y+27, r27	; 0x1b
    1b3c:	1f 8a       	std	Y+23, r1	; 0x17
    1b3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b40:	8e 8b       	std	Y+22, r24	; 0x16
    1b42:	8e 89       	ldd	r24, Y+22	; 0x16
    1b44:	8d 8b       	std	Y+21, r24	; 0x15
    1b46:	8d 89       	ldd	r24, Y+21	; 0x15
    1b48:	8c 8b       	std	Y+20, r24	; 0x14
    1b4a:	8c 89       	ldd	r24, Y+20	; 0x14
    1b4c:	8b 8b       	std	Y+19, r24	; 0x13
    1b4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b50:	8a 8b       	std	Y+18, r24	; 0x12
    1b52:	8a 89       	ldd	r24, Y+18	; 0x12
    1b54:	89 8b       	std	Y+17, r24	; 0x11
    1b56:	89 89       	ldd	r24, Y+17	; 0x11
    1b58:	88 8b       	std	Y+16, r24	; 0x10
    1b5a:	88 89       	ldd	r24, Y+16	; 0x10
    1b5c:	8f 87       	std	Y+15, r24	; 0x0f
    1b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b60:	8e 87       	std	Y+14, r24	; 0x0e
    1b62:	1f 82       	std	Y+7, r1	; 0x07
    1b64:	8f 81       	ldd	r24, Y+7	; 0x07
    1b66:	8c 83       	std	Y+4, r24	; 0x04
    1b68:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6a:	8d 83       	std	Y+5, r24	; 0x05
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	8e 83       	std	Y+6, r24	; 0x06
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	8b 83       	std	Y+3, r24	; 0x03
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	0e 94 c8 10 	call	0x2190	; 0x2190 <HLCD_VoidSendCommand>
  default:
	  break;

            }

	cursor++;
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	8f 5f       	subi	r24, 0xFF	; 255
    1b7e:	8b 83       	std	Y+3, r24	; 0x03
	if(Result_Disp)
    1b80:	8c 81       	ldd	r24, Y+4	; 0x04
    1b82:	88 23       	and	r24, r24
    1b84:	69 f0       	breq	.+26     	; 0x1ba0 <main+0xf12>
	{
		/*Send The Calculated Result To LCD*/
		HLCD_VoidSendNumber(Result);
    1b86:	88 85       	ldd	r24, Y+8	; 0x08
    1b88:	99 85       	ldd	r25, Y+9	; 0x09
    1b8a:	aa 85       	ldd	r26, Y+10	; 0x0a
    1b8c:	bb 85       	ldd	r27, Y+11	; 0x0b
    1b8e:	bc 01       	movw	r22, r24
    1b90:	cd 01       	movw	r24, r26
    1b92:	0e 94 45 18 	call	0x308a	; 0x308a <HLCD_VoidSendNumber>
		HLCD_VoidSetPostion(2,1);
    1b96:	82 e0       	ldi	r24, 0x02	; 2
    1b98:	61 e0       	ldi	r22, 0x01	; 1
    1b9a:	0e 94 2a 18 	call	0x3054	; 0x3054 <HLCD_VoidSetPostion>
		Result_Disp=FALSE;
    1b9e:	1c 82       	std	Y+4, r1	; 0x04
	}
	/*Ensure The Key Is Un Pressed*/
	while( HKPD_U8GetPressedKey() == 0 ) { }
    1ba0:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <HKPD_U8GetPressedKey>
    1ba4:	88 23       	and	r24, r24
    1ba6:	e1 f3       	breq	.-8      	; 0x1ba0 <main+0xf12>
    1ba8:	9f c8       	rjmp	.-3778   	; 0xce8 <main+0x5a>

00001baa <HKPD_VoidInit>:
#include "HKPD_Config.h"
#include <avr/delay.h>


void HKPD_VoidInit(void)
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
	
	/*Set Inputs & OutPuts Pins*/
	MDIO_VoidSetPortDirection(HKPD_Port,0b11110000);
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	60 ef       	ldi	r22, 0xF0	; 240
    1bb6:	0e 94 87 1b 	call	0x370e	; 0x370e <MDIO_VoidSetPortDirection>
	
	/*Set Default State*/
	MDIO_VoidSetPortValue(HKPD_Port,0b11111111);
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	6f ef       	ldi	r22, 0xFF	; 255
    1bbe:	0e 94 c8 1b 	call	0x3790	; 0x3790 <MDIO_VoidSetPortValue>
	
}
    1bc2:	cf 91       	pop	r28
    1bc4:	df 91       	pop	r29
    1bc6:	08 95       	ret

00001bc8 <HKPD_U8GetPressedKey>:




u8 HKPD_U8GetPressedKey(void)
{
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	65 97       	sbiw	r28, 0x15	; 21
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
	/*Define Variables*/
	u8 LOC_Check;
	u8 LOC_PressedKey =50;
    1bdc:	82 e3       	ldi	r24, 0x32	; 50
    1bde:	89 8b       	std	Y+17, r24	; 0x11
	u8 ROW =0 , COL =0 ;
    1be0:	18 8a       	std	Y+16, r1	; 0x10
    1be2:	1f 86       	std	Y+15, r1	; 0x0f
	
	/*Check On Pressed Key*/
	for(COL=0;COL<4;COL++)
    1be4:	1f 86       	std	Y+15, r1	; 0x0f
    1be6:	a8 c0       	rjmp	.+336    	; 0x1d38 <HKPD_U8GetPressedKey+0x170>
	{
		
		/*Set The Sepicific COL LOW & Others HIGH*/
		MDIO_VoidSetPinValue(HKPD_Port,4+COL,0);
    1be8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bea:	98 2f       	mov	r25, r24
    1bec:	9c 5f       	subi	r25, 0xFC	; 252
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	69 2f       	mov	r22, r25
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	0e 94 87 1a 	call	0x350e	; 0x350e <MDIO_VoidSetPinValue>
		
		/*Check On Pressed Key*/
		for(ROW=0;ROW<4;ROW++)
    1bf8:	18 8a       	std	Y+16, r1	; 0x10
    1bfa:	8f c0       	rjmp	.+286    	; 0x1d1a <HKPD_U8GetPressedKey+0x152>
		{
			
			/*Get Location Of Pressed Key*/
			LOC_Check =MDIO_u8GetPinValue(HKPD_Port,ROW);
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	68 89       	ldd	r22, Y+16	; 0x10
    1c00:	0e 94 0e 1a 	call	0x341c	; 0x341c <MDIO_u8GetPinValue>
    1c04:	8a 8b       	std	Y+18, r24	; 0x12
			
			
			/*If Pressed*/
			if(0==LOC_Check)
    1c06:	8a 89       	ldd	r24, Y+18	; 0x12
    1c08:	88 23       	and	r24, r24
    1c0a:	61 f4       	brne	.+24     	; 0x1c24 <HKPD_U8GetPressedKey+0x5c>
			{
				/*Get Value Of Presse Key*/
				LOC_PressedKey=(4*ROW)+COL+1;
    1c0c:	88 89       	ldd	r24, Y+16	; 0x10
    1c0e:	88 2f       	mov	r24, r24
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	98 2f       	mov	r25, r24
    1c1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c1e:	89 0f       	add	r24, r25
    1c20:	8f 5f       	subi	r24, 0xFF	; 255
    1c22:	89 8b       	std	Y+17, r24	; 0x11
			{
				//Do Nothing
			}
			
			/*Check If User Un Pressed Key*/
			while(MDIO_u8GetPinValue(HKPD_Port,ROW)==0)
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	68 89       	ldd	r22, Y+16	; 0x10
    1c28:	0e 94 0e 1a 	call	0x341c	; 0x341c <MDIO_u8GetPinValue>
    1c2c:	88 23       	and	r24, r24
    1c2e:	d1 f3       	breq	.-12     	; 0x1c24 <HKPD_U8GetPressedKey+0x5c>
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	a0 ea       	ldi	r26, 0xA0	; 160
    1c36:	b0 e4       	ldi	r27, 0x40	; 64
    1c38:	8b 87       	std	Y+11, r24	; 0x0b
    1c3a:	9c 87       	std	Y+12, r25	; 0x0c
    1c3c:	ad 87       	std	Y+13, r26	; 0x0d
    1c3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	4a ef       	ldi	r20, 0xFA	; 250
    1c4e:	54 e4       	ldi	r21, 0x44	; 68
    1c50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	8f 83       	std	Y+7, r24	; 0x07
    1c5a:	98 87       	std	Y+8, r25	; 0x08
    1c5c:	a9 87       	std	Y+9, r26	; 0x09
    1c5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c60:	6f 81       	ldd	r22, Y+7	; 0x07
    1c62:	78 85       	ldd	r23, Y+8	; 0x08
    1c64:	89 85       	ldd	r24, Y+9	; 0x09
    1c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e8       	ldi	r20, 0x80	; 128
    1c6e:	5f e3       	ldi	r21, 0x3F	; 63
    1c70:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c74:	88 23       	and	r24, r24
    1c76:	2c f4       	brge	.+10     	; 0x1c82 <HKPD_U8GetPressedKey+0xba>
		__ticks = 1;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9e 83       	std	Y+6, r25	; 0x06
    1c7e:	8d 83       	std	Y+5, r24	; 0x05
    1c80:	3f c0       	rjmp	.+126    	; 0x1d00 <HKPD_U8GetPressedKey+0x138>
	else if (__tmp > 65535)
    1c82:	6f 81       	ldd	r22, Y+7	; 0x07
    1c84:	78 85       	ldd	r23, Y+8	; 0x08
    1c86:	89 85       	ldd	r24, Y+9	; 0x09
    1c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	3f ef       	ldi	r19, 0xFF	; 255
    1c8e:	4f e7       	ldi	r20, 0x7F	; 127
    1c90:	57 e4       	ldi	r21, 0x47	; 71
    1c92:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c96:	18 16       	cp	r1, r24
    1c98:	4c f5       	brge	.+82     	; 0x1cec <HKPD_U8GetPressedKey+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e2       	ldi	r20, 0x20	; 32
    1ca8:	51 e4       	ldi	r21, 0x41	; 65
    1caa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	cd 01       	movw	r24, r26
    1cb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	9e 83       	std	Y+6, r25	; 0x06
    1cc0:	8d 83       	std	Y+5, r24	; 0x05
    1cc2:	0f c0       	rjmp	.+30     	; 0x1ce2 <HKPD_U8GetPressedKey+0x11a>
    1cc4:	88 ec       	ldi	r24, 0xC8	; 200
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9c 83       	std	Y+4, r25	; 0x04
    1cca:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <HKPD_U8GetPressedKey+0x108>
    1cd4:	9c 83       	std	Y+4, r25	; 0x04
    1cd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	9e 81       	ldd	r25, Y+6	; 0x06
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	00 97       	sbiw	r24, 0x00	; 0
    1ce8:	69 f7       	brne	.-38     	; 0x1cc4 <HKPD_U8GetPressedKey+0xfc>
    1cea:	14 c0       	rjmp	.+40     	; 0x1d14 <HKPD_U8GetPressedKey+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cec:	6f 81       	ldd	r22, Y+7	; 0x07
    1cee:	78 85       	ldd	r23, Y+8	; 0x08
    1cf0:	89 85       	ldd	r24, Y+9	; 0x09
    1cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	8d 83       	std	Y+5, r24	; 0x05
    1d00:	8d 81       	ldd	r24, Y+5	; 0x05
    1d02:	9e 81       	ldd	r25, Y+6	; 0x06
    1d04:	9a 83       	std	Y+2, r25	; 0x02
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <HKPD_U8GetPressedKey+0x144>
    1d10:	9a 83       	std	Y+2, r25	; 0x02
    1d12:	89 83       	std	Y+1, r24	; 0x01
		
		/*Set The Sepicific COL LOW & Others HIGH*/
		MDIO_VoidSetPinValue(HKPD_Port,4+COL,0);
		
		/*Check On Pressed Key*/
		for(ROW=0;ROW<4;ROW++)
    1d14:	88 89       	ldd	r24, Y+16	; 0x10
    1d16:	8f 5f       	subi	r24, 0xFF	; 255
    1d18:	88 8b       	std	Y+16, r24	; 0x10
    1d1a:	88 89       	ldd	r24, Y+16	; 0x10
    1d1c:	84 30       	cpi	r24, 0x04	; 4
    1d1e:	08 f4       	brcc	.+2      	; 0x1d22 <HKPD_U8GetPressedKey+0x15a>
    1d20:	6d cf       	rjmp	.-294    	; 0x1bfc <HKPD_U8GetPressedKey+0x34>
			/*To Prevent Bounce*/
			_delay_ms(5);
		}
			
		/*Reverse Col To Its Orginial State*/
			MDIO_VoidSetPinValue(HKPD_Port,4+COL,1);
    1d22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d24:	98 2f       	mov	r25, r24
    1d26:	9c 5f       	subi	r25, 0xFC	; 252
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	69 2f       	mov	r22, r25
    1d2c:	41 e0       	ldi	r20, 0x01	; 1
    1d2e:	0e 94 87 1a 	call	0x350e	; 0x350e <MDIO_VoidSetPinValue>
	u8 LOC_Check;
	u8 LOC_PressedKey =50;
	u8 ROW =0 , COL =0 ;
	
	/*Check On Pressed Key*/
	for(COL=0;COL<4;COL++)
    1d32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d34:	8f 5f       	subi	r24, 0xFF	; 255
    1d36:	8f 87       	std	Y+15, r24	; 0x0f
    1d38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d3a:	84 30       	cpi	r24, 0x04	; 4
    1d3c:	08 f4       	brcc	.+2      	; 0x1d40 <HKPD_U8GetPressedKey+0x178>
    1d3e:	54 cf       	rjmp	.-344    	; 0x1be8 <HKPD_U8GetPressedKey+0x20>


		
	}
	
	switch(LOC_PressedKey)
    1d40:	89 89       	ldd	r24, Y+17	; 0x11
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	3d 8b       	std	Y+21, r19	; 0x15
    1d48:	2c 8b       	std	Y+20, r18	; 0x14
    1d4a:	8c 89       	ldd	r24, Y+20	; 0x14
    1d4c:	9d 89       	ldd	r25, Y+21	; 0x15
    1d4e:	88 30       	cpi	r24, 0x08	; 8
    1d50:	91 05       	cpc	r25, r1
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <HKPD_U8GetPressedKey+0x18e>
    1d54:	70 c0       	rjmp	.+224    	; 0x1e36 <HKPD_U8GetPressedKey+0x26e>
    1d56:	2c 89       	ldd	r18, Y+20	; 0x14
    1d58:	3d 89       	ldd	r19, Y+21	; 0x15
    1d5a:	29 30       	cpi	r18, 0x09	; 9
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	5c f5       	brge	.+86     	; 0x1db6 <HKPD_U8GetPressedKey+0x1ee>
    1d60:	8c 89       	ldd	r24, Y+20	; 0x14
    1d62:	9d 89       	ldd	r25, Y+21	; 0x15
    1d64:	84 30       	cpi	r24, 0x04	; 4
    1d66:	91 05       	cpc	r25, r1
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <HKPD_U8GetPressedKey+0x1a4>
    1d6a:	59 c0       	rjmp	.+178    	; 0x1e1e <HKPD_U8GetPressedKey+0x256>
    1d6c:	2c 89       	ldd	r18, Y+20	; 0x14
    1d6e:	3d 89       	ldd	r19, Y+21	; 0x15
    1d70:	25 30       	cpi	r18, 0x05	; 5
    1d72:	31 05       	cpc	r19, r1
    1d74:	9c f4       	brge	.+38     	; 0x1d9c <HKPD_U8GetPressedKey+0x1d4>
    1d76:	8c 89       	ldd	r24, Y+20	; 0x14
    1d78:	9d 89       	ldd	r25, Y+21	; 0x15
    1d7a:	82 30       	cpi	r24, 0x02	; 2
    1d7c:	91 05       	cpc	r25, r1
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <HKPD_U8GetPressedKey+0x1ba>
    1d80:	48 c0       	rjmp	.+144    	; 0x1e12 <HKPD_U8GetPressedKey+0x24a>
    1d82:	2c 89       	ldd	r18, Y+20	; 0x14
    1d84:	3d 89       	ldd	r19, Y+21	; 0x15
    1d86:	23 30       	cpi	r18, 0x03	; 3
    1d88:	31 05       	cpc	r19, r1
    1d8a:	0c f0       	brlt	.+2      	; 0x1d8e <HKPD_U8GetPressedKey+0x1c6>
    1d8c:	45 c0       	rjmp	.+138    	; 0x1e18 <HKPD_U8GetPressedKey+0x250>
    1d8e:	8c 89       	ldd	r24, Y+20	; 0x14
    1d90:	9d 89       	ldd	r25, Y+21	; 0x15
    1d92:	81 30       	cpi	r24, 0x01	; 1
    1d94:	91 05       	cpc	r25, r1
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <HKPD_U8GetPressedKey+0x1d2>
    1d98:	39 c0       	rjmp	.+114    	; 0x1e0c <HKPD_U8GetPressedKey+0x244>
    1d9a:	67 c0       	rjmp	.+206    	; 0x1e6a <HKPD_U8GetPressedKey+0x2a2>
    1d9c:	2c 89       	ldd	r18, Y+20	; 0x14
    1d9e:	3d 89       	ldd	r19, Y+21	; 0x15
    1da0:	26 30       	cpi	r18, 0x06	; 6
    1da2:	31 05       	cpc	r19, r1
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <HKPD_U8GetPressedKey+0x1e0>
    1da6:	41 c0       	rjmp	.+130    	; 0x1e2a <HKPD_U8GetPressedKey+0x262>
    1da8:	8c 89       	ldd	r24, Y+20	; 0x14
    1daa:	9d 89       	ldd	r25, Y+21	; 0x15
    1dac:	87 30       	cpi	r24, 0x07	; 7
    1dae:	91 05       	cpc	r25, r1
    1db0:	0c f0       	brlt	.+2      	; 0x1db4 <HKPD_U8GetPressedKey+0x1ec>
    1db2:	3e c0       	rjmp	.+124    	; 0x1e30 <HKPD_U8GetPressedKey+0x268>
    1db4:	37 c0       	rjmp	.+110    	; 0x1e24 <HKPD_U8GetPressedKey+0x25c>
    1db6:	2c 89       	ldd	r18, Y+20	; 0x14
    1db8:	3d 89       	ldd	r19, Y+21	; 0x15
    1dba:	2c 30       	cpi	r18, 0x0C	; 12
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <HKPD_U8GetPressedKey+0x1fa>
    1dc0:	46 c0       	rjmp	.+140    	; 0x1e4e <HKPD_U8GetPressedKey+0x286>
    1dc2:	8c 89       	ldd	r24, Y+20	; 0x14
    1dc4:	9d 89       	ldd	r25, Y+21	; 0x15
    1dc6:	8d 30       	cpi	r24, 0x0D	; 13
    1dc8:	91 05       	cpc	r25, r1
    1dca:	5c f4       	brge	.+22     	; 0x1de2 <HKPD_U8GetPressedKey+0x21a>
    1dcc:	2c 89       	ldd	r18, Y+20	; 0x14
    1dce:	3d 89       	ldd	r19, Y+21	; 0x15
    1dd0:	2a 30       	cpi	r18, 0x0A	; 10
    1dd2:	31 05       	cpc	r19, r1
    1dd4:	b1 f1       	breq	.+108    	; 0x1e42 <HKPD_U8GetPressedKey+0x27a>
    1dd6:	8c 89       	ldd	r24, Y+20	; 0x14
    1dd8:	9d 89       	ldd	r25, Y+21	; 0x15
    1dda:	8b 30       	cpi	r24, 0x0B	; 11
    1ddc:	91 05       	cpc	r25, r1
    1dde:	a4 f5       	brge	.+104    	; 0x1e48 <HKPD_U8GetPressedKey+0x280>
    1de0:	2d c0       	rjmp	.+90     	; 0x1e3c <HKPD_U8GetPressedKey+0x274>
    1de2:	2c 89       	ldd	r18, Y+20	; 0x14
    1de4:	3d 89       	ldd	r19, Y+21	; 0x15
    1de6:	2e 30       	cpi	r18, 0x0E	; 14
    1de8:	31 05       	cpc	r19, r1
    1dea:	b9 f1       	breq	.+110    	; 0x1e5a <HKPD_U8GetPressedKey+0x292>
    1dec:	8c 89       	ldd	r24, Y+20	; 0x14
    1dee:	9d 89       	ldd	r25, Y+21	; 0x15
    1df0:	8e 30       	cpi	r24, 0x0E	; 14
    1df2:	91 05       	cpc	r25, r1
    1df4:	7c f1       	brlt	.+94     	; 0x1e54 <HKPD_U8GetPressedKey+0x28c>
    1df6:	2c 89       	ldd	r18, Y+20	; 0x14
    1df8:	3d 89       	ldd	r19, Y+21	; 0x15
    1dfa:	2f 30       	cpi	r18, 0x0F	; 15
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	79 f1       	breq	.+94     	; 0x1e5e <HKPD_U8GetPressedKey+0x296>
    1e00:	8c 89       	ldd	r24, Y+20	; 0x14
    1e02:	9d 89       	ldd	r25, Y+21	; 0x15
    1e04:	80 31       	cpi	r24, 0x10	; 16
    1e06:	91 05       	cpc	r25, r1
    1e08:	69 f1       	breq	.+90     	; 0x1e64 <HKPD_U8GetPressedKey+0x29c>
    1e0a:	2f c0       	rjmp	.+94     	; 0x1e6a <HKPD_U8GetPressedKey+0x2a2>
{



	        case 1: return 1; break;
    1e0c:	91 e0       	ldi	r25, 0x01	; 1
    1e0e:	9b 8b       	std	Y+19, r25	; 0x13
    1e10:	2e c0       	rjmp	.+92     	; 0x1e6e <HKPD_U8GetPressedKey+0x2a6>
			case 2: return 2; break;
    1e12:	22 e0       	ldi	r18, 0x02	; 2
    1e14:	2b 8b       	std	Y+19, r18	; 0x13
    1e16:	2b c0       	rjmp	.+86     	; 0x1e6e <HKPD_U8GetPressedKey+0x2a6>
			case 3: return 3; break;
    1e18:	33 e0       	ldi	r19, 0x03	; 3
    1e1a:	3b 8b       	std	Y+19, r19	; 0x13
    1e1c:	28 c0       	rjmp	.+80     	; 0x1e6e <HKPD_U8GetPressedKey+0x2a6>
			case 4: return '+'; break;
    1e1e:	8b e2       	ldi	r24, 0x2B	; 43
    1e20:	8b 8b       	std	Y+19, r24	; 0x13
    1e22:	25 c0       	rjmp	.+74     	; 0x1e6e <HKPD_U8GetPressedKey+0x2a6>
			case 5: return 4; break;
    1e24:	94 e0       	ldi	r25, 0x04	; 4
    1e26:	9b 8b       	std	Y+19, r25	; 0x13
    1e28:	22 c0       	rjmp	.+68     	; 0x1e6e <HKPD_U8GetPressedKey+0x2a6>
			case 6: return 5; break;
    1e2a:	25 e0       	ldi	r18, 0x05	; 5
    1e2c:	2b 8b       	std	Y+19, r18	; 0x13
    1e2e:	1f c0       	rjmp	.+62     	; 0x1e6e <HKPD_U8GetPressedKey+0x2a6>
			case 7: return 6; break;
    1e30:	36 e0       	ldi	r19, 0x06	; 6
    1e32:	3b 8b       	std	Y+19, r19	; 0x13
    1e34:	1c c0       	rjmp	.+56     	; 0x1e6e <HKPD_U8GetPressedKey+0x2a6>
			case 8: return '-'; break;
    1e36:	8d e2       	ldi	r24, 0x2D	; 45
    1e38:	8b 8b       	std	Y+19, r24	; 0x13
    1e3a:	19 c0       	rjmp	.+50     	; 0x1e6e <HKPD_U8GetPressedKey+0x2a6>
			case 9: return 7; break;
    1e3c:	97 e0       	ldi	r25, 0x07	; 7
    1e3e:	9b 8b       	std	Y+19, r25	; 0x13
    1e40:	16 c0       	rjmp	.+44     	; 0x1e6e <HKPD_U8GetPressedKey+0x2a6>
			case 10: return 8; break;
    1e42:	28 e0       	ldi	r18, 0x08	; 8
    1e44:	2b 8b       	std	Y+19, r18	; 0x13
    1e46:	13 c0       	rjmp	.+38     	; 0x1e6e <HKPD_U8GetPressedKey+0x2a6>
			case 11: return 9; break;
    1e48:	39 e0       	ldi	r19, 0x09	; 9
    1e4a:	3b 8b       	std	Y+19, r19	; 0x13
    1e4c:	10 c0       	rjmp	.+32     	; 0x1e6e <HKPD_U8GetPressedKey+0x2a6>
			case 12: return '*'; break;
    1e4e:	8a e2       	ldi	r24, 0x2A	; 42
    1e50:	8b 8b       	std	Y+19, r24	; 0x13
    1e52:	0d c0       	rjmp	.+26     	; 0x1e6e <HKPD_U8GetPressedKey+0x2a6>
			case 13: return 'C'; break;
    1e54:	93 e4       	ldi	r25, 0x43	; 67
    1e56:	9b 8b       	std	Y+19, r25	; 0x13
    1e58:	0a c0       	rjmp	.+20     	; 0x1e6e <HKPD_U8GetPressedKey+0x2a6>
			case 14: return 0; break;
    1e5a:	1b 8a       	std	Y+19, r1	; 0x13
    1e5c:	08 c0       	rjmp	.+16     	; 0x1e6e <HKPD_U8GetPressedKey+0x2a6>
			case 15: return '='; break;
    1e5e:	2d e3       	ldi	r18, 0x3D	; 61
    1e60:	2b 8b       	std	Y+19, r18	; 0x13
    1e62:	05 c0       	rjmp	.+10     	; 0x1e6e <HKPD_U8GetPressedKey+0x2a6>
			case 16: return '/'; break;
    1e64:	3f e2       	ldi	r19, 0x2F	; 47
    1e66:	3b 8b       	std	Y+19, r19	; 0x13
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <HKPD_U8GetPressedKey+0x2a6>
			default: return 50;break;
    1e6a:	82 e3       	ldi	r24, 0x32	; 50
    1e6c:	8b 8b       	std	Y+19, r24	; 0x13
    1e6e:	8b 89       	ldd	r24, Y+19	; 0x13
}
	
	
	
}
    1e70:	65 96       	adiw	r28, 0x15	; 21
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <HLCD_VoidSendChar>:
#include "HLCD_Config.h"
#include <util/delay.h>
 

void HLCD_VoidSendChar(u8 Copy_U8Data)
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	ab 97       	sbiw	r28, 0x2b	; 43
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	de bf       	out	0x3e, r29	; 62
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	cd bf       	out	0x3d, r28	; 61
    1e96:	8b a7       	std	Y+43, r24	; 0x2b
	 /*Set Rs=1 , to send data*/
    MDIO_VoidSetPinValue(HLCD_Rs_Port,0,1);
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	41 e0       	ldi	r20, 0x01	; 1
    1e9e:	0e 94 87 1a 	call	0x350e	; 0x350e <MDIO_VoidSetPinValue>
	
	/*Set Rw=0 , to write on LCD*/
	MDIO_VoidSetPinValue(HLCD_Rw_Port,1,0); 
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	61 e0       	ldi	r22, 0x01	; 1
    1ea6:	40 e0       	ldi	r20, 0x00	; 0
    1ea8:	0e 94 87 1a 	call	0x350e	; 0x350e <MDIO_VoidSetPinValue>
	
	 /*Write Data On LCD*/
	MDIO_VoidSetPortValue(HLCD_DataPort,Copy_U8Data);
    1eac:	82 e0       	ldi	r24, 0x02	; 2
    1eae:	6b a5       	ldd	r22, Y+43	; 0x2b
    1eb0:	0e 94 c8 1b 	call	0x3790	; 0x3790 <MDIO_VoidSetPortValue>
	
	/*set low to enable*/
	MDIO_VoidSetPinValue(HLCD_EN_Port,2,0); 
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	62 e0       	ldi	r22, 0x02	; 2
    1eb8:	40 e0       	ldi	r20, 0x00	; 0
    1eba:	0e 94 87 1a 	call	0x350e	; 0x350e <MDIO_VoidSetPinValue>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a0 e8       	ldi	r26, 0x80	; 128
    1ec4:	bf e3       	ldi	r27, 0x3F	; 63
    1ec6:	8f a3       	std	Y+39, r24	; 0x27
    1ec8:	98 a7       	std	Y+40, r25	; 0x28
    1eca:	a9 a7       	std	Y+41, r26	; 0x29
    1ecc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	6f a1       	ldd	r22, Y+39	; 0x27
    1ed0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ed2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	4a ef       	ldi	r20, 0xFA	; 250
    1edc:	54 e4       	ldi	r21, 0x44	; 68
    1ede:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8b a3       	std	Y+35, r24	; 0x23
    1ee8:	9c a3       	std	Y+36, r25	; 0x24
    1eea:	ad a3       	std	Y+37, r26	; 0x25
    1eec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eee:	6b a1       	ldd	r22, Y+35	; 0x23
    1ef0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e8       	ldi	r20, 0x80	; 128
    1efc:	5f e3       	ldi	r21, 0x3F	; 63
    1efe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f02:	88 23       	and	r24, r24
    1f04:	2c f4       	brge	.+10     	; 0x1f10 <HLCD_VoidSendChar+0x8e>
		__ticks = 1;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9a a3       	std	Y+34, r25	; 0x22
    1f0c:	89 a3       	std	Y+33, r24	; 0x21
    1f0e:	3f c0       	rjmp	.+126    	; 0x1f8e <HLCD_VoidSendChar+0x10c>
	else if (__tmp > 65535)
    1f10:	6b a1       	ldd	r22, Y+35	; 0x23
    1f12:	7c a1       	ldd	r23, Y+36	; 0x24
    1f14:	8d a1       	ldd	r24, Y+37	; 0x25
    1f16:	9e a1       	ldd	r25, Y+38	; 0x26
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	3f ef       	ldi	r19, 0xFF	; 255
    1f1c:	4f e7       	ldi	r20, 0x7F	; 127
    1f1e:	57 e4       	ldi	r21, 0x47	; 71
    1f20:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f24:	18 16       	cp	r1, r24
    1f26:	4c f5       	brge	.+82     	; 0x1f7a <HLCD_VoidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f28:	6f a1       	ldd	r22, Y+39	; 0x27
    1f2a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f2c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e2       	ldi	r20, 0x20	; 32
    1f36:	51 e4       	ldi	r21, 0x41	; 65
    1f38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	bc 01       	movw	r22, r24
    1f42:	cd 01       	movw	r24, r26
    1f44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9a a3       	std	Y+34, r25	; 0x22
    1f4e:	89 a3       	std	Y+33, r24	; 0x21
    1f50:	0f c0       	rjmp	.+30     	; 0x1f70 <HLCD_VoidSendChar+0xee>
    1f52:	88 ec       	ldi	r24, 0xC8	; 200
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	98 a3       	std	Y+32, r25	; 0x20
    1f58:	8f 8f       	std	Y+31, r24	; 0x1f
    1f5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f5c:	98 a1       	ldd	r25, Y+32	; 0x20
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <HLCD_VoidSendChar+0xdc>
    1f62:	98 a3       	std	Y+32, r25	; 0x20
    1f64:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f66:	89 a1       	ldd	r24, Y+33	; 0x21
    1f68:	9a a1       	ldd	r25, Y+34	; 0x22
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	9a a3       	std	Y+34, r25	; 0x22
    1f6e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f70:	89 a1       	ldd	r24, Y+33	; 0x21
    1f72:	9a a1       	ldd	r25, Y+34	; 0x22
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	69 f7       	brne	.-38     	; 0x1f52 <HLCD_VoidSendChar+0xd0>
    1f78:	14 c0       	rjmp	.+40     	; 0x1fa2 <HLCD_VoidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f80:	9e a1       	ldd	r25, Y+38	; 0x26
    1f82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9a a3       	std	Y+34, r25	; 0x22
    1f8c:	89 a3       	std	Y+33, r24	; 0x21
    1f8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f90:	9a a1       	ldd	r25, Y+34	; 0x22
    1f92:	9e 8f       	std	Y+30, r25	; 0x1e
    1f94:	8d 8f       	std	Y+29, r24	; 0x1d
    1f96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <HLCD_VoidSendChar+0x118>
    1f9e:	9e 8f       	std	Y+30, r25	; 0x1e
    1fa0:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait 1 ms*/
	
	_delay_ms(1); 
	
	 /*set Hi to enable*/
	MDIO_VoidSetPinValue(HLCD_EN_Port,2,1);
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	62 e0       	ldi	r22, 0x02	; 2
    1fa6:	41 e0       	ldi	r20, 0x01	; 1
    1fa8:	0e 94 87 1a 	call	0x350e	; 0x350e <MDIO_VoidSetPinValue>
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a0 e8       	ldi	r26, 0x80	; 128
    1fb2:	bf e3       	ldi	r27, 0x3F	; 63
    1fb4:	89 8f       	std	Y+25, r24	; 0x19
    1fb6:	9a 8f       	std	Y+26, r25	; 0x1a
    1fb8:	ab 8f       	std	Y+27, r26	; 0x1b
    1fba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1fbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	4a ef       	ldi	r20, 0xFA	; 250
    1fca:	54 e4       	ldi	r21, 0x44	; 68
    1fcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	8d 8b       	std	Y+21, r24	; 0x15
    1fd6:	9e 8b       	std	Y+22, r25	; 0x16
    1fd8:	af 8b       	std	Y+23, r26	; 0x17
    1fda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fdc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fde:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e8       	ldi	r20, 0x80	; 128
    1fea:	5f e3       	ldi	r21, 0x3F	; 63
    1fec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ff0:	88 23       	and	r24, r24
    1ff2:	2c f4       	brge	.+10     	; 0x1ffe <HLCD_VoidSendChar+0x17c>
		__ticks = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9c 8b       	std	Y+20, r25	; 0x14
    1ffa:	8b 8b       	std	Y+19, r24	; 0x13
    1ffc:	3f c0       	rjmp	.+126    	; 0x207c <HLCD_VoidSendChar+0x1fa>
	else if (__tmp > 65535)
    1ffe:	6d 89       	ldd	r22, Y+21	; 0x15
    2000:	7e 89       	ldd	r23, Y+22	; 0x16
    2002:	8f 89       	ldd	r24, Y+23	; 0x17
    2004:	98 8d       	ldd	r25, Y+24	; 0x18
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	3f ef       	ldi	r19, 0xFF	; 255
    200a:	4f e7       	ldi	r20, 0x7F	; 127
    200c:	57 e4       	ldi	r21, 0x47	; 71
    200e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2012:	18 16       	cp	r1, r24
    2014:	4c f5       	brge	.+82     	; 0x2068 <HLCD_VoidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2016:	69 8d       	ldd	r22, Y+25	; 0x19
    2018:	7a 8d       	ldd	r23, Y+26	; 0x1a
    201a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    201c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e2       	ldi	r20, 0x20	; 32
    2024:	51 e4       	ldi	r21, 0x41	; 65
    2026:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	9c 8b       	std	Y+20, r25	; 0x14
    203c:	8b 8b       	std	Y+19, r24	; 0x13
    203e:	0f c0       	rjmp	.+30     	; 0x205e <HLCD_VoidSendChar+0x1dc>
    2040:	88 ec       	ldi	r24, 0xC8	; 200
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	9a 8b       	std	Y+18, r25	; 0x12
    2046:	89 8b       	std	Y+17, r24	; 0x11
    2048:	89 89       	ldd	r24, Y+17	; 0x11
    204a:	9a 89       	ldd	r25, Y+18	; 0x12
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <HLCD_VoidSendChar+0x1ca>
    2050:	9a 8b       	std	Y+18, r25	; 0x12
    2052:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2054:	8b 89       	ldd	r24, Y+19	; 0x13
    2056:	9c 89       	ldd	r25, Y+20	; 0x14
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	9c 8b       	std	Y+20, r25	; 0x14
    205c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205e:	8b 89       	ldd	r24, Y+19	; 0x13
    2060:	9c 89       	ldd	r25, Y+20	; 0x14
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	69 f7       	brne	.-38     	; 0x2040 <HLCD_VoidSendChar+0x1be>
    2066:	14 c0       	rjmp	.+40     	; 0x2090 <HLCD_VoidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2068:	6d 89       	ldd	r22, Y+21	; 0x15
    206a:	7e 89       	ldd	r23, Y+22	; 0x16
    206c:	8f 89       	ldd	r24, Y+23	; 0x17
    206e:	98 8d       	ldd	r25, Y+24	; 0x18
    2070:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9c 8b       	std	Y+20, r25	; 0x14
    207a:	8b 8b       	std	Y+19, r24	; 0x13
    207c:	8b 89       	ldd	r24, Y+19	; 0x13
    207e:	9c 89       	ldd	r25, Y+20	; 0x14
    2080:	98 8b       	std	Y+16, r25	; 0x10
    2082:	8f 87       	std	Y+15, r24	; 0x0f
    2084:	8f 85       	ldd	r24, Y+15	; 0x0f
    2086:	98 89       	ldd	r25, Y+16	; 0x10
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <HLCD_VoidSendChar+0x206>
    208c:	98 8b       	std	Y+16, r25	; 0x10
    208e:	8f 87       	std	Y+15, r24	; 0x0f
	
	 /*wait 1 ms*/
	_delay_ms(1);
	
	 /*set low to ennable*/
	MDIO_VoidSetPinValue(HLCD_EN_Port,2,0);
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	62 e0       	ldi	r22, 0x02	; 2
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	0e 94 87 1a 	call	0x350e	; 0x350e <MDIO_VoidSetPinValue>
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a0 e0       	ldi	r26, 0x00	; 0
    20a0:	b0 e4       	ldi	r27, 0x40	; 64
    20a2:	8b 87       	std	Y+11, r24	; 0x0b
    20a4:	9c 87       	std	Y+12, r25	; 0x0c
    20a6:	ad 87       	std	Y+13, r26	; 0x0d
    20a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	4a ef       	ldi	r20, 0xFA	; 250
    20b8:	54 e4       	ldi	r21, 0x44	; 68
    20ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	8f 83       	std	Y+7, r24	; 0x07
    20c4:	98 87       	std	Y+8, r25	; 0x08
    20c6:	a9 87       	std	Y+9, r26	; 0x09
    20c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ca:	6f 81       	ldd	r22, Y+7	; 0x07
    20cc:	78 85       	ldd	r23, Y+8	; 0x08
    20ce:	89 85       	ldd	r24, Y+9	; 0x09
    20d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e8       	ldi	r20, 0x80	; 128
    20d8:	5f e3       	ldi	r21, 0x3F	; 63
    20da:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20de:	88 23       	and	r24, r24
    20e0:	2c f4       	brge	.+10     	; 0x20ec <HLCD_VoidSendChar+0x26a>
		__ticks = 1;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	8d 83       	std	Y+5, r24	; 0x05
    20ea:	3f c0       	rjmp	.+126    	; 0x216a <HLCD_VoidSendChar+0x2e8>
	else if (__tmp > 65535)
    20ec:	6f 81       	ldd	r22, Y+7	; 0x07
    20ee:	78 85       	ldd	r23, Y+8	; 0x08
    20f0:	89 85       	ldd	r24, Y+9	; 0x09
    20f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	3f ef       	ldi	r19, 0xFF	; 255
    20f8:	4f e7       	ldi	r20, 0x7F	; 127
    20fa:	57 e4       	ldi	r21, 0x47	; 71
    20fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2100:	18 16       	cp	r1, r24
    2102:	4c f5       	brge	.+82     	; 0x2156 <HLCD_VoidSendChar+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2104:	6b 85       	ldd	r22, Y+11	; 0x0b
    2106:	7c 85       	ldd	r23, Y+12	; 0x0c
    2108:	8d 85       	ldd	r24, Y+13	; 0x0d
    210a:	9e 85       	ldd	r25, Y+14	; 0x0e
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e2       	ldi	r20, 0x20	; 32
    2112:	51 e4       	ldi	r21, 0x41	; 65
    2114:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	bc 01       	movw	r22, r24
    211e:	cd 01       	movw	r24, r26
    2120:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	9e 83       	std	Y+6, r25	; 0x06
    212a:	8d 83       	std	Y+5, r24	; 0x05
    212c:	0f c0       	rjmp	.+30     	; 0x214c <HLCD_VoidSendChar+0x2ca>
    212e:	88 ec       	ldi	r24, 0xC8	; 200
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	9c 83       	std	Y+4, r25	; 0x04
    2134:	8b 83       	std	Y+3, r24	; 0x03
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <HLCD_VoidSendChar+0x2b8>
    213e:	9c 83       	std	Y+4, r25	; 0x04
    2140:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	9e 83       	std	Y+6, r25	; 0x06
    214a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214c:	8d 81       	ldd	r24, Y+5	; 0x05
    214e:	9e 81       	ldd	r25, Y+6	; 0x06
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	69 f7       	brne	.-38     	; 0x212e <HLCD_VoidSendChar+0x2ac>
    2154:	14 c0       	rjmp	.+40     	; 0x217e <HLCD_VoidSendChar+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2156:	6f 81       	ldd	r22, Y+7	; 0x07
    2158:	78 85       	ldd	r23, Y+8	; 0x08
    215a:	89 85       	ldd	r24, Y+9	; 0x09
    215c:	9a 85       	ldd	r25, Y+10	; 0x0a
    215e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	9e 83       	std	Y+6, r25	; 0x06
    2168:	8d 83       	std	Y+5, r24	; 0x05
    216a:	8d 81       	ldd	r24, Y+5	; 0x05
    216c:	9e 81       	ldd	r25, Y+6	; 0x06
    216e:	9a 83       	std	Y+2, r25	; 0x02
    2170:	89 83       	std	Y+1, r24	; 0x01
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <HLCD_VoidSendChar+0x2f4>
    217a:	9a 83       	std	Y+2, r25	; 0x02
    217c:	89 83       	std	Y+1, r24	; 0x01
	
	/*wait 1 ms*/
	_delay_ms(2);
}
    217e:	ab 96       	adiw	r28, 0x2b	; 43
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <HLCD_VoidSendCommand>:
void HLCD_VoidSendCommand(u8 Copy_U8Command)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	ab 97       	sbiw	r28, 0x2b	; 43
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	8b a7       	std	Y+43, r24	; 0x2b
	/*Set Rs=0 , to send command*/
	MDIO_VoidSetPinValue(HLCD_Rs_Port,0,0);
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	0e 94 87 1a 	call	0x350e	; 0x350e <MDIO_VoidSetPinValue>
	
	/*Set Rw=0 , to write on LCD*/
	MDIO_VoidSetPinValue(HLCD_Rw_Port,1,0);
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	61 e0       	ldi	r22, 0x01	; 1
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	0e 94 87 1a 	call	0x350e	; 0x350e <MDIO_VoidSetPinValue>
	
	  /*DO command On LCD*/
	MDIO_VoidSetPortValue(HLCD_DataPort,Copy_U8Command);
    21ba:	82 e0       	ldi	r24, 0x02	; 2
    21bc:	6b a5       	ldd	r22, Y+43	; 0x2b
    21be:	0e 94 c8 1b 	call	0x3790	; 0x3790 <MDIO_VoidSetPortValue>
	
	/*set low to enable*/
	MDIO_VoidSetPinValue(HLCD_EN_Port,2,0);
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	62 e0       	ldi	r22, 0x02	; 2
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	0e 94 87 1a 	call	0x350e	; 0x350e <MDIO_VoidSetPinValue>
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	a0 e8       	ldi	r26, 0x80	; 128
    21d2:	bf e3       	ldi	r27, 0x3F	; 63
    21d4:	8f a3       	std	Y+39, r24	; 0x27
    21d6:	98 a7       	std	Y+40, r25	; 0x28
    21d8:	a9 a7       	std	Y+41, r26	; 0x29
    21da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21dc:	6f a1       	ldd	r22, Y+39	; 0x27
    21de:	78 a5       	ldd	r23, Y+40	; 0x28
    21e0:	89 a5       	ldd	r24, Y+41	; 0x29
    21e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	4a ef       	ldi	r20, 0xFA	; 250
    21ea:	54 e4       	ldi	r21, 0x44	; 68
    21ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	8b a3       	std	Y+35, r24	; 0x23
    21f6:	9c a3       	std	Y+36, r25	; 0x24
    21f8:	ad a3       	std	Y+37, r26	; 0x25
    21fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21fc:	6b a1       	ldd	r22, Y+35	; 0x23
    21fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2200:	8d a1       	ldd	r24, Y+37	; 0x25
    2202:	9e a1       	ldd	r25, Y+38	; 0x26
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e8       	ldi	r20, 0x80	; 128
    220a:	5f e3       	ldi	r21, 0x3F	; 63
    220c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2210:	88 23       	and	r24, r24
    2212:	2c f4       	brge	.+10     	; 0x221e <HLCD_VoidSendCommand+0x8e>
		__ticks = 1;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	9a a3       	std	Y+34, r25	; 0x22
    221a:	89 a3       	std	Y+33, r24	; 0x21
    221c:	3f c0       	rjmp	.+126    	; 0x229c <HLCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    221e:	6b a1       	ldd	r22, Y+35	; 0x23
    2220:	7c a1       	ldd	r23, Y+36	; 0x24
    2222:	8d a1       	ldd	r24, Y+37	; 0x25
    2224:	9e a1       	ldd	r25, Y+38	; 0x26
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	3f ef       	ldi	r19, 0xFF	; 255
    222a:	4f e7       	ldi	r20, 0x7F	; 127
    222c:	57 e4       	ldi	r21, 0x47	; 71
    222e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2232:	18 16       	cp	r1, r24
    2234:	4c f5       	brge	.+82     	; 0x2288 <HLCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2236:	6f a1       	ldd	r22, Y+39	; 0x27
    2238:	78 a5       	ldd	r23, Y+40	; 0x28
    223a:	89 a5       	ldd	r24, Y+41	; 0x29
    223c:	9a a5       	ldd	r25, Y+42	; 0x2a
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e2       	ldi	r20, 0x20	; 32
    2244:	51 e4       	ldi	r21, 0x41	; 65
    2246:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	9a a3       	std	Y+34, r25	; 0x22
    225c:	89 a3       	std	Y+33, r24	; 0x21
    225e:	0f c0       	rjmp	.+30     	; 0x227e <HLCD_VoidSendCommand+0xee>
    2260:	88 ec       	ldi	r24, 0xC8	; 200
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	98 a3       	std	Y+32, r25	; 0x20
    2266:	8f 8f       	std	Y+31, r24	; 0x1f
    2268:	8f 8d       	ldd	r24, Y+31	; 0x1f
    226a:	98 a1       	ldd	r25, Y+32	; 0x20
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <HLCD_VoidSendCommand+0xdc>
    2270:	98 a3       	std	Y+32, r25	; 0x20
    2272:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2274:	89 a1       	ldd	r24, Y+33	; 0x21
    2276:	9a a1       	ldd	r25, Y+34	; 0x22
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	9a a3       	std	Y+34, r25	; 0x22
    227c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227e:	89 a1       	ldd	r24, Y+33	; 0x21
    2280:	9a a1       	ldd	r25, Y+34	; 0x22
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	69 f7       	brne	.-38     	; 0x2260 <HLCD_VoidSendCommand+0xd0>
    2286:	14 c0       	rjmp	.+40     	; 0x22b0 <HLCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2288:	6b a1       	ldd	r22, Y+35	; 0x23
    228a:	7c a1       	ldd	r23, Y+36	; 0x24
    228c:	8d a1       	ldd	r24, Y+37	; 0x25
    228e:	9e a1       	ldd	r25, Y+38	; 0x26
    2290:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	9a a3       	std	Y+34, r25	; 0x22
    229a:	89 a3       	std	Y+33, r24	; 0x21
    229c:	89 a1       	ldd	r24, Y+33	; 0x21
    229e:	9a a1       	ldd	r25, Y+34	; 0x22
    22a0:	9e 8f       	std	Y+30, r25	; 0x1e
    22a2:	8d 8f       	std	Y+29, r24	; 0x1d
    22a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <HLCD_VoidSendCommand+0x118>
    22ac:	9e 8f       	std	Y+30, r25	; 0x1e
    22ae:	8d 8f       	std	Y+29, r24	; 0x1d
	
	 /*wait 1 ms*/
	_delay_ms(1);
	
	/*set Hi to enable*/
	MDIO_VoidSetPinValue(HLCD_EN_Port,2,1);
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	62 e0       	ldi	r22, 0x02	; 2
    22b4:	41 e0       	ldi	r20, 0x01	; 1
    22b6:	0e 94 87 1a 	call	0x350e	; 0x350e <MDIO_VoidSetPinValue>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	a0 e8       	ldi	r26, 0x80	; 128
    22c0:	bf e3       	ldi	r27, 0x3F	; 63
    22c2:	89 8f       	std	Y+25, r24	; 0x19
    22c4:	9a 8f       	std	Y+26, r25	; 0x1a
    22c6:	ab 8f       	std	Y+27, r26	; 0x1b
    22c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ca:	69 8d       	ldd	r22, Y+25	; 0x19
    22cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	4a ef       	ldi	r20, 0xFA	; 250
    22d8:	54 e4       	ldi	r21, 0x44	; 68
    22da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	8d 8b       	std	Y+21, r24	; 0x15
    22e4:	9e 8b       	std	Y+22, r25	; 0x16
    22e6:	af 8b       	std	Y+23, r26	; 0x17
    22e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22ea:	6d 89       	ldd	r22, Y+21	; 0x15
    22ec:	7e 89       	ldd	r23, Y+22	; 0x16
    22ee:	8f 89       	ldd	r24, Y+23	; 0x17
    22f0:	98 8d       	ldd	r25, Y+24	; 0x18
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22fe:	88 23       	and	r24, r24
    2300:	2c f4       	brge	.+10     	; 0x230c <HLCD_VoidSendCommand+0x17c>
		__ticks = 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9c 8b       	std	Y+20, r25	; 0x14
    2308:	8b 8b       	std	Y+19, r24	; 0x13
    230a:	3f c0       	rjmp	.+126    	; 0x238a <HLCD_VoidSendCommand+0x1fa>
	else if (__tmp > 65535)
    230c:	6d 89       	ldd	r22, Y+21	; 0x15
    230e:	7e 89       	ldd	r23, Y+22	; 0x16
    2310:	8f 89       	ldd	r24, Y+23	; 0x17
    2312:	98 8d       	ldd	r25, Y+24	; 0x18
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	3f ef       	ldi	r19, 0xFF	; 255
    2318:	4f e7       	ldi	r20, 0x7F	; 127
    231a:	57 e4       	ldi	r21, 0x47	; 71
    231c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2320:	18 16       	cp	r1, r24
    2322:	4c f5       	brge	.+82     	; 0x2376 <HLCD_VoidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2324:	69 8d       	ldd	r22, Y+25	; 0x19
    2326:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2328:	8b 8d       	ldd	r24, Y+27	; 0x1b
    232a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e2       	ldi	r20, 0x20	; 32
    2332:	51 e4       	ldi	r21, 0x41	; 65
    2334:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9c 8b       	std	Y+20, r25	; 0x14
    234a:	8b 8b       	std	Y+19, r24	; 0x13
    234c:	0f c0       	rjmp	.+30     	; 0x236c <HLCD_VoidSendCommand+0x1dc>
    234e:	88 ec       	ldi	r24, 0xC8	; 200
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9a 8b       	std	Y+18, r25	; 0x12
    2354:	89 8b       	std	Y+17, r24	; 0x11
    2356:	89 89       	ldd	r24, Y+17	; 0x11
    2358:	9a 89       	ldd	r25, Y+18	; 0x12
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <HLCD_VoidSendCommand+0x1ca>
    235e:	9a 8b       	std	Y+18, r25	; 0x12
    2360:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2362:	8b 89       	ldd	r24, Y+19	; 0x13
    2364:	9c 89       	ldd	r25, Y+20	; 0x14
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	9c 8b       	std	Y+20, r25	; 0x14
    236a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	8b 89       	ldd	r24, Y+19	; 0x13
    236e:	9c 89       	ldd	r25, Y+20	; 0x14
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	69 f7       	brne	.-38     	; 0x234e <HLCD_VoidSendCommand+0x1be>
    2374:	14 c0       	rjmp	.+40     	; 0x239e <HLCD_VoidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2376:	6d 89       	ldd	r22, Y+21	; 0x15
    2378:	7e 89       	ldd	r23, Y+22	; 0x16
    237a:	8f 89       	ldd	r24, Y+23	; 0x17
    237c:	98 8d       	ldd	r25, Y+24	; 0x18
    237e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9c 8b       	std	Y+20, r25	; 0x14
    2388:	8b 8b       	std	Y+19, r24	; 0x13
    238a:	8b 89       	ldd	r24, Y+19	; 0x13
    238c:	9c 89       	ldd	r25, Y+20	; 0x14
    238e:	98 8b       	std	Y+16, r25	; 0x10
    2390:	8f 87       	std	Y+15, r24	; 0x0f
    2392:	8f 85       	ldd	r24, Y+15	; 0x0f
    2394:	98 89       	ldd	r25, Y+16	; 0x10
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <HLCD_VoidSendCommand+0x206>
    239a:	98 8b       	std	Y+16, r25	; 0x10
    239c:	8f 87       	std	Y+15, r24	; 0x0f
	
	 /*wait 1 ms*/
	_delay_ms(1);
	
	/*set low to enable*/
	MDIO_VoidSetPinValue(HLCD_EN_Port,2,0);
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	62 e0       	ldi	r22, 0x02	; 2
    23a2:	40 e0       	ldi	r20, 0x00	; 0
    23a4:	0e 94 87 1a 	call	0x350e	; 0x350e <MDIO_VoidSetPinValue>
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	a0 e0       	ldi	r26, 0x00	; 0
    23ae:	b0 e4       	ldi	r27, 0x40	; 64
    23b0:	8b 87       	std	Y+11, r24	; 0x0b
    23b2:	9c 87       	std	Y+12, r25	; 0x0c
    23b4:	ad 87       	std	Y+13, r26	; 0x0d
    23b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    23bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23be:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	4a ef       	ldi	r20, 0xFA	; 250
    23c6:	54 e4       	ldi	r21, 0x44	; 68
    23c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	8f 83       	std	Y+7, r24	; 0x07
    23d2:	98 87       	std	Y+8, r25	; 0x08
    23d4:	a9 87       	std	Y+9, r26	; 0x09
    23d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23d8:	6f 81       	ldd	r22, Y+7	; 0x07
    23da:	78 85       	ldd	r23, Y+8	; 0x08
    23dc:	89 85       	ldd	r24, Y+9	; 0x09
    23de:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e8       	ldi	r20, 0x80	; 128
    23e6:	5f e3       	ldi	r21, 0x3F	; 63
    23e8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23ec:	88 23       	and	r24, r24
    23ee:	2c f4       	brge	.+10     	; 0x23fa <HLCD_VoidSendCommand+0x26a>
		__ticks = 1;
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	9e 83       	std	Y+6, r25	; 0x06
    23f6:	8d 83       	std	Y+5, r24	; 0x05
    23f8:	3f c0       	rjmp	.+126    	; 0x2478 <HLCD_VoidSendCommand+0x2e8>
	else if (__tmp > 65535)
    23fa:	6f 81       	ldd	r22, Y+7	; 0x07
    23fc:	78 85       	ldd	r23, Y+8	; 0x08
    23fe:	89 85       	ldd	r24, Y+9	; 0x09
    2400:	9a 85       	ldd	r25, Y+10	; 0x0a
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	3f ef       	ldi	r19, 0xFF	; 255
    2406:	4f e7       	ldi	r20, 0x7F	; 127
    2408:	57 e4       	ldi	r21, 0x47	; 71
    240a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    240e:	18 16       	cp	r1, r24
    2410:	4c f5       	brge	.+82     	; 0x2464 <HLCD_VoidSendCommand+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2412:	6b 85       	ldd	r22, Y+11	; 0x0b
    2414:	7c 85       	ldd	r23, Y+12	; 0x0c
    2416:	8d 85       	ldd	r24, Y+13	; 0x0d
    2418:	9e 85       	ldd	r25, Y+14	; 0x0e
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	40 e2       	ldi	r20, 0x20	; 32
    2420:	51 e4       	ldi	r21, 0x41	; 65
    2422:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	bc 01       	movw	r22, r24
    242c:	cd 01       	movw	r24, r26
    242e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	9e 83       	std	Y+6, r25	; 0x06
    2438:	8d 83       	std	Y+5, r24	; 0x05
    243a:	0f c0       	rjmp	.+30     	; 0x245a <HLCD_VoidSendCommand+0x2ca>
    243c:	88 ec       	ldi	r24, 0xC8	; 200
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	9c 83       	std	Y+4, r25	; 0x04
    2442:	8b 83       	std	Y+3, r24	; 0x03
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	9c 81       	ldd	r25, Y+4	; 0x04
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <HLCD_VoidSendCommand+0x2b8>
    244c:	9c 83       	std	Y+4, r25	; 0x04
    244e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2450:	8d 81       	ldd	r24, Y+5	; 0x05
    2452:	9e 81       	ldd	r25, Y+6	; 0x06
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	9e 83       	std	Y+6, r25	; 0x06
    2458:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245a:	8d 81       	ldd	r24, Y+5	; 0x05
    245c:	9e 81       	ldd	r25, Y+6	; 0x06
    245e:	00 97       	sbiw	r24, 0x00	; 0
    2460:	69 f7       	brne	.-38     	; 0x243c <HLCD_VoidSendCommand+0x2ac>
    2462:	14 c0       	rjmp	.+40     	; 0x248c <HLCD_VoidSendCommand+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2464:	6f 81       	ldd	r22, Y+7	; 0x07
    2466:	78 85       	ldd	r23, Y+8	; 0x08
    2468:	89 85       	ldd	r24, Y+9	; 0x09
    246a:	9a 85       	ldd	r25, Y+10	; 0x0a
    246c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	9e 83       	std	Y+6, r25	; 0x06
    2476:	8d 83       	std	Y+5, r24	; 0x05
    2478:	8d 81       	ldd	r24, Y+5	; 0x05
    247a:	9e 81       	ldd	r25, Y+6	; 0x06
    247c:	9a 83       	std	Y+2, r25	; 0x02
    247e:	89 83       	std	Y+1, r24	; 0x01
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	9a 81       	ldd	r25, Y+2	; 0x02
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	f1 f7       	brne	.-4      	; 0x2484 <HLCD_VoidSendCommand+0x2f4>
    2488:	9a 83       	std	Y+2, r25	; 0x02
    248a:	89 83       	std	Y+1, r24	; 0x01
	
	/*wait 1 ms*/
	_delay_ms(2);
	
}
    248c:	ab 96       	adiw	r28, 0x2b	; 43
    248e:	0f b6       	in	r0, 0x3f	; 63
    2490:	f8 94       	cli
    2492:	de bf       	out	0x3e, r29	; 62
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	cd bf       	out	0x3d, r28	; 61
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <HLCD_VoidInit>:
void HLCD_VoidInit(void)
{
    249e:	0f 93       	push	r16
    24a0:	1f 93       	push	r17
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	cc 54       	subi	r28, 0x4C	; 76
    24ac:	d0 40       	sbci	r29, 0x00	; 0
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	de bf       	out	0x3e, r29	; 62
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	cd bf       	out	0x3d, r28	; 61
	/*Set Direction Of alla Pins*/
	
	MDIO_VoidSetPortDirection(HLCD_DataPort,0xff);
    24b8:	82 e0       	ldi	r24, 0x02	; 2
    24ba:	6f ef       	ldi	r22, 0xFF	; 255
    24bc:	0e 94 87 1b 	call	0x370e	; 0x370e <MDIO_VoidSetPortDirection>
	MDIO_VoidSetPinDirection(HLCD_Rs_Port,0,1);
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	60 e0       	ldi	r22, 0x00	; 0
    24c4:	41 e0       	ldi	r20, 0x01	; 1
    24c6:	0e 94 0e 19 	call	0x321c	; 0x321c <MDIO_VoidSetPinDirection>
	MDIO_VoidSetPinDirection(HLCD_Rw_Port,1,1);
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	61 e0       	ldi	r22, 0x01	; 1
    24ce:	41 e0       	ldi	r20, 0x01	; 1
    24d0:	0e 94 0e 19 	call	0x321c	; 0x321c <MDIO_VoidSetPinDirection>
	MDIO_VoidSetPinDirection(HLCD_EN_Port,2,1);
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	62 e0       	ldi	r22, 0x02	; 2
    24d8:	41 e0       	ldi	r20, 0x01	; 1
    24da:	0e 94 0e 19 	call	0x321c	; 0x321c <MDIO_VoidSetPinDirection>
    24de:	fe 01       	movw	r30, r28
    24e0:	e7 5b       	subi	r30, 0xB7	; 183
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a0 e2       	ldi	r26, 0x20	; 32
    24ea:	b2 e4       	ldi	r27, 0x42	; 66
    24ec:	80 83       	st	Z, r24
    24ee:	91 83       	std	Z+1, r25	; 0x01
    24f0:	a2 83       	std	Z+2, r26	; 0x02
    24f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f4:	8e 01       	movw	r16, r28
    24f6:	0b 5b       	subi	r16, 0xBB	; 187
    24f8:	1f 4f       	sbci	r17, 0xFF	; 255
    24fa:	fe 01       	movw	r30, r28
    24fc:	e7 5b       	subi	r30, 0xB7	; 183
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	60 81       	ld	r22, Z
    2502:	71 81       	ldd	r23, Z+1	; 0x01
    2504:	82 81       	ldd	r24, Z+2	; 0x02
    2506:	93 81       	ldd	r25, Z+3	; 0x03
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	4a ef       	ldi	r20, 0xFA	; 250
    250e:	54 e4       	ldi	r21, 0x44	; 68
    2510:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	f8 01       	movw	r30, r16
    251a:	80 83       	st	Z, r24
    251c:	91 83       	std	Z+1, r25	; 0x01
    251e:	a2 83       	std	Z+2, r26	; 0x02
    2520:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2522:	fe 01       	movw	r30, r28
    2524:	eb 5b       	subi	r30, 0xBB	; 187
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	60 81       	ld	r22, Z
    252a:	71 81       	ldd	r23, Z+1	; 0x01
    252c:	82 81       	ldd	r24, Z+2	; 0x02
    252e:	93 81       	ldd	r25, Z+3	; 0x03
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e8       	ldi	r20, 0x80	; 128
    2536:	5f e3       	ldi	r21, 0x3F	; 63
    2538:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    253c:	88 23       	and	r24, r24
    253e:	44 f4       	brge	.+16     	; 0x2550 <HLCD_VoidInit+0xb2>
		__ticks = 1;
    2540:	fe 01       	movw	r30, r28
    2542:	ed 5b       	subi	r30, 0xBD	; 189
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	80 83       	st	Z, r24
    254e:	64 c0       	rjmp	.+200    	; 0x2618 <HLCD_VoidInit+0x17a>
	else if (__tmp > 65535)
    2550:	fe 01       	movw	r30, r28
    2552:	eb 5b       	subi	r30, 0xBB	; 187
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	60 81       	ld	r22, Z
    2558:	71 81       	ldd	r23, Z+1	; 0x01
    255a:	82 81       	ldd	r24, Z+2	; 0x02
    255c:	93 81       	ldd	r25, Z+3	; 0x03
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	3f ef       	ldi	r19, 0xFF	; 255
    2562:	4f e7       	ldi	r20, 0x7F	; 127
    2564:	57 e4       	ldi	r21, 0x47	; 71
    2566:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    256a:	18 16       	cp	r1, r24
    256c:	0c f0       	brlt	.+2      	; 0x2570 <HLCD_VoidInit+0xd2>
    256e:	43 c0       	rjmp	.+134    	; 0x25f6 <HLCD_VoidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2570:	fe 01       	movw	r30, r28
    2572:	e7 5b       	subi	r30, 0xB7	; 183
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	60 81       	ld	r22, Z
    2578:	71 81       	ldd	r23, Z+1	; 0x01
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	93 81       	ldd	r25, Z+3	; 0x03
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e2       	ldi	r20, 0x20	; 32
    2584:	51 e4       	ldi	r21, 0x41	; 65
    2586:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	8e 01       	movw	r16, r28
    2590:	0d 5b       	subi	r16, 0xBD	; 189
    2592:	1f 4f       	sbci	r17, 0xFF	; 255
    2594:	bc 01       	movw	r22, r24
    2596:	cd 01       	movw	r24, r26
    2598:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	f8 01       	movw	r30, r16
    25a2:	91 83       	std	Z+1, r25	; 0x01
    25a4:	80 83       	st	Z, r24
    25a6:	1f c0       	rjmp	.+62     	; 0x25e6 <HLCD_VoidInit+0x148>
    25a8:	fe 01       	movw	r30, r28
    25aa:	ef 5b       	subi	r30, 0xBF	; 191
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	88 ec       	ldi	r24, 0xC8	; 200
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	91 83       	std	Z+1, r25	; 0x01
    25b4:	80 83       	st	Z, r24
    25b6:	fe 01       	movw	r30, r28
    25b8:	ef 5b       	subi	r30, 0xBF	; 191
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 81       	ld	r24, Z
    25be:	91 81       	ldd	r25, Z+1	; 0x01
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <HLCD_VoidInit+0x122>
    25c4:	fe 01       	movw	r30, r28
    25c6:	ef 5b       	subi	r30, 0xBF	; 191
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	91 83       	std	Z+1, r25	; 0x01
    25cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ce:	de 01       	movw	r26, r28
    25d0:	ad 5b       	subi	r26, 0xBD	; 189
    25d2:	bf 4f       	sbci	r27, 0xFF	; 255
    25d4:	fe 01       	movw	r30, r28
    25d6:	ed 5b       	subi	r30, 0xBD	; 189
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	80 81       	ld	r24, Z
    25dc:	91 81       	ldd	r25, Z+1	; 0x01
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	11 96       	adiw	r26, 0x01	; 1
    25e2:	9c 93       	st	X, r25
    25e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e6:	fe 01       	movw	r30, r28
    25e8:	ed 5b       	subi	r30, 0xBD	; 189
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	80 81       	ld	r24, Z
    25ee:	91 81       	ldd	r25, Z+1	; 0x01
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	d1 f6       	brne	.-76     	; 0x25a8 <HLCD_VoidInit+0x10a>
    25f4:	24 c0       	rjmp	.+72     	; 0x263e <HLCD_VoidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f6:	8e 01       	movw	r16, r28
    25f8:	0d 5b       	subi	r16, 0xBD	; 189
    25fa:	1f 4f       	sbci	r17, 0xFF	; 255
    25fc:	fe 01       	movw	r30, r28
    25fe:	eb 5b       	subi	r30, 0xBB	; 187
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	60 81       	ld	r22, Z
    2604:	71 81       	ldd	r23, Z+1	; 0x01
    2606:	82 81       	ldd	r24, Z+2	; 0x02
    2608:	93 81       	ldd	r25, Z+3	; 0x03
    260a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	f8 01       	movw	r30, r16
    2614:	91 83       	std	Z+1, r25	; 0x01
    2616:	80 83       	st	Z, r24
    2618:	fe 01       	movw	r30, r28
    261a:	ed 5b       	subi	r30, 0xBD	; 189
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	80 81       	ld	r24, Z
    2620:	91 81       	ldd	r25, Z+1	; 0x01
    2622:	fe 01       	movw	r30, r28
    2624:	ff 96       	adiw	r30, 0x3f	; 63
    2626:	91 83       	std	Z+1, r25	; 0x01
    2628:	80 83       	st	Z, r24
    262a:	fe 01       	movw	r30, r28
    262c:	ff 96       	adiw	r30, 0x3f	; 63
    262e:	80 81       	ld	r24, Z
    2630:	91 81       	ldd	r25, Z+1	; 0x01
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	f1 f7       	brne	.-4      	; 0x2632 <HLCD_VoidInit+0x194>
    2636:	fe 01       	movw	r30, r28
    2638:	ff 96       	adiw	r30, 0x3f	; 63
    263a:	91 83       	std	Z+1, r25	; 0x01
    263c:	80 83       	st	Z, r24
	
		/*wait more than 30ms*/
	_delay_ms(40);
	
	/*Function Set (Set No.of Lines & Font Type*/
	HLCD_VoidSendCommand(0b00111000);
    263e:	88 e3       	ldi	r24, 0x38	; 56
    2640:	0e 94 c8 10 	call	0x2190	; 0x2190 <HLCD_VoidSendCommand>
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	a4 e3       	ldi	r26, 0x34	; 52
    264a:	b2 e4       	ldi	r27, 0x42	; 66
    264c:	8b af       	std	Y+59, r24	; 0x3b
    264e:	9c af       	std	Y+60, r25	; 0x3c
    2650:	ad af       	std	Y+61, r26	; 0x3d
    2652:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2654:	6b ad       	ldd	r22, Y+59	; 0x3b
    2656:	7c ad       	ldd	r23, Y+60	; 0x3c
    2658:	8d ad       	ldd	r24, Y+61	; 0x3d
    265a:	9e ad       	ldd	r25, Y+62	; 0x3e
    265c:	2b ea       	ldi	r18, 0xAB	; 171
    265e:	3a ea       	ldi	r19, 0xAA	; 170
    2660:	4a e2       	ldi	r20, 0x2A	; 42
    2662:	50 e4       	ldi	r21, 0x40	; 64
    2664:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	8f ab       	std	Y+55, r24	; 0x37
    266e:	98 af       	std	Y+56, r25	; 0x38
    2670:	a9 af       	std	Y+57, r26	; 0x39
    2672:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2674:	6f a9       	ldd	r22, Y+55	; 0x37
    2676:	78 ad       	ldd	r23, Y+56	; 0x38
    2678:	89 ad       	ldd	r24, Y+57	; 0x39
    267a:	9a ad       	ldd	r25, Y+58	; 0x3a
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e8       	ldi	r20, 0x80	; 128
    2682:	5f e3       	ldi	r21, 0x3F	; 63
    2684:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2688:	88 23       	and	r24, r24
    268a:	1c f4       	brge	.+6      	; 0x2692 <HLCD_VoidInit+0x1f4>
		__ticks = 1;
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	8e ab       	std	Y+54, r24	; 0x36
    2690:	91 c0       	rjmp	.+290    	; 0x27b4 <HLCD_VoidInit+0x316>
	else if (__tmp > 255)
    2692:	6f a9       	ldd	r22, Y+55	; 0x37
    2694:	78 ad       	ldd	r23, Y+56	; 0x38
    2696:	89 ad       	ldd	r24, Y+57	; 0x39
    2698:	9a ad       	ldd	r25, Y+58	; 0x3a
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	4f e7       	ldi	r20, 0x7F	; 127
    26a0:	53 e4       	ldi	r21, 0x43	; 67
    26a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26a6:	18 16       	cp	r1, r24
    26a8:	0c f0       	brlt	.+2      	; 0x26ac <HLCD_VoidInit+0x20e>
    26aa:	7b c0       	rjmp	.+246    	; 0x27a2 <HLCD_VoidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    26ac:	6b ad       	ldd	r22, Y+59	; 0x3b
    26ae:	7c ad       	ldd	r23, Y+60	; 0x3c
    26b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    26b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	4a e7       	ldi	r20, 0x7A	; 122
    26ba:	54 e4       	ldi	r21, 0x44	; 68
    26bc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	8a ab       	std	Y+50, r24	; 0x32
    26c6:	9b ab       	std	Y+51, r25	; 0x33
    26c8:	ac ab       	std	Y+52, r26	; 0x34
    26ca:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26cc:	6a a9       	ldd	r22, Y+50	; 0x32
    26ce:	7b a9       	ldd	r23, Y+51	; 0x33
    26d0:	8c a9       	ldd	r24, Y+52	; 0x34
    26d2:	9d a9       	ldd	r25, Y+53	; 0x35
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	4a ef       	ldi	r20, 0xFA	; 250
    26da:	54 e4       	ldi	r21, 0x44	; 68
    26dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	8e a7       	std	Y+46, r24	; 0x2e
    26e6:	9f a7       	std	Y+47, r25	; 0x2f
    26e8:	a8 ab       	std	Y+48, r26	; 0x30
    26ea:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    26ec:	6e a5       	ldd	r22, Y+46	; 0x2e
    26ee:	7f a5       	ldd	r23, Y+47	; 0x2f
    26f0:	88 a9       	ldd	r24, Y+48	; 0x30
    26f2:	99 a9       	ldd	r25, Y+49	; 0x31
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e8       	ldi	r20, 0x80	; 128
    26fa:	5f e3       	ldi	r21, 0x3F	; 63
    26fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2700:	88 23       	and	r24, r24
    2702:	2c f4       	brge	.+10     	; 0x270e <HLCD_VoidInit+0x270>
		__ticks = 1;
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	9d a7       	std	Y+45, r25	; 0x2d
    270a:	8c a7       	std	Y+44, r24	; 0x2c
    270c:	3f c0       	rjmp	.+126    	; 0x278c <HLCD_VoidInit+0x2ee>
	else if (__tmp > 65535)
    270e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2710:	7f a5       	ldd	r23, Y+47	; 0x2f
    2712:	88 a9       	ldd	r24, Y+48	; 0x30
    2714:	99 a9       	ldd	r25, Y+49	; 0x31
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	3f ef       	ldi	r19, 0xFF	; 255
    271a:	4f e7       	ldi	r20, 0x7F	; 127
    271c:	57 e4       	ldi	r21, 0x47	; 71
    271e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2722:	18 16       	cp	r1, r24
    2724:	4c f5       	brge	.+82     	; 0x2778 <HLCD_VoidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2726:	6a a9       	ldd	r22, Y+50	; 0x32
    2728:	7b a9       	ldd	r23, Y+51	; 0x33
    272a:	8c a9       	ldd	r24, Y+52	; 0x34
    272c:	9d a9       	ldd	r25, Y+53	; 0x35
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e2       	ldi	r20, 0x20	; 32
    2734:	51 e4       	ldi	r21, 0x41	; 65
    2736:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	bc 01       	movw	r22, r24
    2740:	cd 01       	movw	r24, r26
    2742:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	9d a7       	std	Y+45, r25	; 0x2d
    274c:	8c a7       	std	Y+44, r24	; 0x2c
    274e:	0f c0       	rjmp	.+30     	; 0x276e <HLCD_VoidInit+0x2d0>
    2750:	88 ec       	ldi	r24, 0xC8	; 200
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	9b a7       	std	Y+43, r25	; 0x2b
    2756:	8a a7       	std	Y+42, r24	; 0x2a
    2758:	8a a5       	ldd	r24, Y+42	; 0x2a
    275a:	9b a5       	ldd	r25, Y+43	; 0x2b
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <HLCD_VoidInit+0x2be>
    2760:	9b a7       	std	Y+43, r25	; 0x2b
    2762:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2764:	8c a5       	ldd	r24, Y+44	; 0x2c
    2766:	9d a5       	ldd	r25, Y+45	; 0x2d
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	9d a7       	std	Y+45, r25	; 0x2d
    276c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    276e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2770:	9d a5       	ldd	r25, Y+45	; 0x2d
    2772:	00 97       	sbiw	r24, 0x00	; 0
    2774:	69 f7       	brne	.-38     	; 0x2750 <HLCD_VoidInit+0x2b2>
    2776:	24 c0       	rjmp	.+72     	; 0x27c0 <HLCD_VoidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2778:	6e a5       	ldd	r22, Y+46	; 0x2e
    277a:	7f a5       	ldd	r23, Y+47	; 0x2f
    277c:	88 a9       	ldd	r24, Y+48	; 0x30
    277e:	99 a9       	ldd	r25, Y+49	; 0x31
    2780:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	9d a7       	std	Y+45, r25	; 0x2d
    278a:	8c a7       	std	Y+44, r24	; 0x2c
    278c:	8c a5       	ldd	r24, Y+44	; 0x2c
    278e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2790:	99 a7       	std	Y+41, r25	; 0x29
    2792:	88 a7       	std	Y+40, r24	; 0x28
    2794:	88 a5       	ldd	r24, Y+40	; 0x28
    2796:	99 a5       	ldd	r25, Y+41	; 0x29
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	f1 f7       	brne	.-4      	; 0x2798 <HLCD_VoidInit+0x2fa>
    279c:	99 a7       	std	Y+41, r25	; 0x29
    279e:	88 a7       	std	Y+40, r24	; 0x28
    27a0:	0f c0       	rjmp	.+30     	; 0x27c0 <HLCD_VoidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27a2:	6f a9       	ldd	r22, Y+55	; 0x37
    27a4:	78 ad       	ldd	r23, Y+56	; 0x38
    27a6:	89 ad       	ldd	r24, Y+57	; 0x39
    27a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    27aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	8e ab       	std	Y+54, r24	; 0x36
    27b4:	8e a9       	ldd	r24, Y+54	; 0x36
    27b6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27b8:	8f a1       	ldd	r24, Y+39	; 0x27
    27ba:	8a 95       	dec	r24
    27bc:	f1 f7       	brne	.-4      	; 0x27ba <HLCD_VoidInit+0x31c>
    27be:	8f a3       	std	Y+39, r24	; 0x27

    /*Wait More Than 39us*/
    _delay_us(45);
	
	/*Display ON/OFF Control*/
	HLCD_VoidSendCommand(0b00001110);
    27c0:	8e e0       	ldi	r24, 0x0E	; 14
    27c2:	0e 94 c8 10 	call	0x2190	; 0x2190 <HLCD_VoidSendCommand>
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	a4 e3       	ldi	r26, 0x34	; 52
    27cc:	b2 e4       	ldi	r27, 0x42	; 66
    27ce:	8b a3       	std	Y+35, r24	; 0x23
    27d0:	9c a3       	std	Y+36, r25	; 0x24
    27d2:	ad a3       	std	Y+37, r26	; 0x25
    27d4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27d6:	6b a1       	ldd	r22, Y+35	; 0x23
    27d8:	7c a1       	ldd	r23, Y+36	; 0x24
    27da:	8d a1       	ldd	r24, Y+37	; 0x25
    27dc:	9e a1       	ldd	r25, Y+38	; 0x26
    27de:	2b ea       	ldi	r18, 0xAB	; 171
    27e0:	3a ea       	ldi	r19, 0xAA	; 170
    27e2:	4a e2       	ldi	r20, 0x2A	; 42
    27e4:	50 e4       	ldi	r21, 0x40	; 64
    27e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	8f 8f       	std	Y+31, r24	; 0x1f
    27f0:	98 a3       	std	Y+32, r25	; 0x20
    27f2:	a9 a3       	std	Y+33, r26	; 0x21
    27f4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    27f6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    27f8:	78 a1       	ldd	r23, Y+32	; 0x20
    27fa:	89 a1       	ldd	r24, Y+33	; 0x21
    27fc:	9a a1       	ldd	r25, Y+34	; 0x22
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e8       	ldi	r20, 0x80	; 128
    2804:	5f e3       	ldi	r21, 0x3F	; 63
    2806:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    280a:	88 23       	and	r24, r24
    280c:	1c f4       	brge	.+6      	; 0x2814 <HLCD_VoidInit+0x376>
		__ticks = 1;
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	8e 8f       	std	Y+30, r24	; 0x1e
    2812:	91 c0       	rjmp	.+290    	; 0x2936 <HLCD_VoidInit+0x498>
	else if (__tmp > 255)
    2814:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2816:	78 a1       	ldd	r23, Y+32	; 0x20
    2818:	89 a1       	ldd	r24, Y+33	; 0x21
    281a:	9a a1       	ldd	r25, Y+34	; 0x22
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	4f e7       	ldi	r20, 0x7F	; 127
    2822:	53 e4       	ldi	r21, 0x43	; 67
    2824:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2828:	18 16       	cp	r1, r24
    282a:	0c f0       	brlt	.+2      	; 0x282e <HLCD_VoidInit+0x390>
    282c:	7b c0       	rjmp	.+246    	; 0x2924 <HLCD_VoidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    282e:	6b a1       	ldd	r22, Y+35	; 0x23
    2830:	7c a1       	ldd	r23, Y+36	; 0x24
    2832:	8d a1       	ldd	r24, Y+37	; 0x25
    2834:	9e a1       	ldd	r25, Y+38	; 0x26
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	4a e7       	ldi	r20, 0x7A	; 122
    283c:	54 e4       	ldi	r21, 0x44	; 68
    283e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	8a 8f       	std	Y+26, r24	; 0x1a
    2848:	9b 8f       	std	Y+27, r25	; 0x1b
    284a:	ac 8f       	std	Y+28, r26	; 0x1c
    284c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2850:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2852:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2854:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	4a ef       	ldi	r20, 0xFA	; 250
    285c:	54 e4       	ldi	r21, 0x44	; 68
    285e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	8e 8b       	std	Y+22, r24	; 0x16
    2868:	9f 8b       	std	Y+23, r25	; 0x17
    286a:	a8 8f       	std	Y+24, r26	; 0x18
    286c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    286e:	6e 89       	ldd	r22, Y+22	; 0x16
    2870:	7f 89       	ldd	r23, Y+23	; 0x17
    2872:	88 8d       	ldd	r24, Y+24	; 0x18
    2874:	99 8d       	ldd	r25, Y+25	; 0x19
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e8       	ldi	r20, 0x80	; 128
    287c:	5f e3       	ldi	r21, 0x3F	; 63
    287e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2882:	88 23       	and	r24, r24
    2884:	2c f4       	brge	.+10     	; 0x2890 <HLCD_VoidInit+0x3f2>
		__ticks = 1;
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	9d 8b       	std	Y+21, r25	; 0x15
    288c:	8c 8b       	std	Y+20, r24	; 0x14
    288e:	3f c0       	rjmp	.+126    	; 0x290e <HLCD_VoidInit+0x470>
	else if (__tmp > 65535)
    2890:	6e 89       	ldd	r22, Y+22	; 0x16
    2892:	7f 89       	ldd	r23, Y+23	; 0x17
    2894:	88 8d       	ldd	r24, Y+24	; 0x18
    2896:	99 8d       	ldd	r25, Y+25	; 0x19
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	3f ef       	ldi	r19, 0xFF	; 255
    289c:	4f e7       	ldi	r20, 0x7F	; 127
    289e:	57 e4       	ldi	r21, 0x47	; 71
    28a0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28a4:	18 16       	cp	r1, r24
    28a6:	4c f5       	brge	.+82     	; 0x28fa <HLCD_VoidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    28aa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    28ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    28ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e2       	ldi	r20, 0x20	; 32
    28b6:	51 e4       	ldi	r21, 0x41	; 65
    28b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	bc 01       	movw	r22, r24
    28c2:	cd 01       	movw	r24, r26
    28c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	9d 8b       	std	Y+21, r25	; 0x15
    28ce:	8c 8b       	std	Y+20, r24	; 0x14
    28d0:	0f c0       	rjmp	.+30     	; 0x28f0 <HLCD_VoidInit+0x452>
    28d2:	88 ec       	ldi	r24, 0xC8	; 200
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	9b 8b       	std	Y+19, r25	; 0x13
    28d8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28da:	8a 89       	ldd	r24, Y+18	; 0x12
    28dc:	9b 89       	ldd	r25, Y+19	; 0x13
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	f1 f7       	brne	.-4      	; 0x28de <HLCD_VoidInit+0x440>
    28e2:	9b 8b       	std	Y+19, r25	; 0x13
    28e4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e6:	8c 89       	ldd	r24, Y+20	; 0x14
    28e8:	9d 89       	ldd	r25, Y+21	; 0x15
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	9d 8b       	std	Y+21, r25	; 0x15
    28ee:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f0:	8c 89       	ldd	r24, Y+20	; 0x14
    28f2:	9d 89       	ldd	r25, Y+21	; 0x15
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	69 f7       	brne	.-38     	; 0x28d2 <HLCD_VoidInit+0x434>
    28f8:	24 c0       	rjmp	.+72     	; 0x2942 <HLCD_VoidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fa:	6e 89       	ldd	r22, Y+22	; 0x16
    28fc:	7f 89       	ldd	r23, Y+23	; 0x17
    28fe:	88 8d       	ldd	r24, Y+24	; 0x18
    2900:	99 8d       	ldd	r25, Y+25	; 0x19
    2902:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	9d 8b       	std	Y+21, r25	; 0x15
    290c:	8c 8b       	std	Y+20, r24	; 0x14
    290e:	8c 89       	ldd	r24, Y+20	; 0x14
    2910:	9d 89       	ldd	r25, Y+21	; 0x15
    2912:	99 8b       	std	Y+17, r25	; 0x11
    2914:	88 8b       	std	Y+16, r24	; 0x10
    2916:	88 89       	ldd	r24, Y+16	; 0x10
    2918:	99 89       	ldd	r25, Y+17	; 0x11
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	f1 f7       	brne	.-4      	; 0x291a <HLCD_VoidInit+0x47c>
    291e:	99 8b       	std	Y+17, r25	; 0x11
    2920:	88 8b       	std	Y+16, r24	; 0x10
    2922:	0f c0       	rjmp	.+30     	; 0x2942 <HLCD_VoidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2924:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2926:	78 a1       	ldd	r23, Y+32	; 0x20
    2928:	89 a1       	ldd	r24, Y+33	; 0x21
    292a:	9a a1       	ldd	r25, Y+34	; 0x22
    292c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	8e 8f       	std	Y+30, r24	; 0x1e
    2936:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2938:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    293a:	8f 85       	ldd	r24, Y+15	; 0x0f
    293c:	8a 95       	dec	r24
    293e:	f1 f7       	brne	.-4      	; 0x293c <HLCD_VoidInit+0x49e>
    2940:	8f 87       	std	Y+15, r24	; 0x0f
	
	/*Wait More Than 39us*/
    _delay_us(45);
	
	/*Display Clear*/
	HLCD_VoidSendCommand(0b00000001);
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	0e 94 c8 10 	call	0x2190	; 0x2190 <HLCD_VoidSendCommand>
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	a0 e0       	ldi	r26, 0x00	; 0
    294e:	b0 e4       	ldi	r27, 0x40	; 64
    2950:	8b 87       	std	Y+11, r24	; 0x0b
    2952:	9c 87       	std	Y+12, r25	; 0x0c
    2954:	ad 87       	std	Y+13, r26	; 0x0d
    2956:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2958:	6b 85       	ldd	r22, Y+11	; 0x0b
    295a:	7c 85       	ldd	r23, Y+12	; 0x0c
    295c:	8d 85       	ldd	r24, Y+13	; 0x0d
    295e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	4a ef       	ldi	r20, 0xFA	; 250
    2966:	54 e4       	ldi	r21, 0x44	; 68
    2968:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	8f 83       	std	Y+7, r24	; 0x07
    2972:	98 87       	std	Y+8, r25	; 0x08
    2974:	a9 87       	std	Y+9, r26	; 0x09
    2976:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2978:	6f 81       	ldd	r22, Y+7	; 0x07
    297a:	78 85       	ldd	r23, Y+8	; 0x08
    297c:	89 85       	ldd	r24, Y+9	; 0x09
    297e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e8       	ldi	r20, 0x80	; 128
    2986:	5f e3       	ldi	r21, 0x3F	; 63
    2988:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    298c:	88 23       	and	r24, r24
    298e:	2c f4       	brge	.+10     	; 0x299a <HLCD_VoidInit+0x4fc>
		__ticks = 1;
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	9e 83       	std	Y+6, r25	; 0x06
    2996:	8d 83       	std	Y+5, r24	; 0x05
    2998:	3f c0       	rjmp	.+126    	; 0x2a18 <HLCD_VoidInit+0x57a>
	else if (__tmp > 65535)
    299a:	6f 81       	ldd	r22, Y+7	; 0x07
    299c:	78 85       	ldd	r23, Y+8	; 0x08
    299e:	89 85       	ldd	r24, Y+9	; 0x09
    29a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	3f ef       	ldi	r19, 0xFF	; 255
    29a6:	4f e7       	ldi	r20, 0x7F	; 127
    29a8:	57 e4       	ldi	r21, 0x47	; 71
    29aa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29ae:	18 16       	cp	r1, r24
    29b0:	4c f5       	brge	.+82     	; 0x2a04 <HLCD_VoidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e2       	ldi	r20, 0x20	; 32
    29c0:	51 e4       	ldi	r21, 0x41	; 65
    29c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	bc 01       	movw	r22, r24
    29cc:	cd 01       	movw	r24, r26
    29ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	9e 83       	std	Y+6, r25	; 0x06
    29d8:	8d 83       	std	Y+5, r24	; 0x05
    29da:	0f c0       	rjmp	.+30     	; 0x29fa <HLCD_VoidInit+0x55c>
    29dc:	88 ec       	ldi	r24, 0xC8	; 200
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	9c 83       	std	Y+4, r25	; 0x04
    29e2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	9c 81       	ldd	r25, Y+4	; 0x04
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <HLCD_VoidInit+0x54a>
    29ec:	9c 83       	std	Y+4, r25	; 0x04
    29ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f0:	8d 81       	ldd	r24, Y+5	; 0x05
    29f2:	9e 81       	ldd	r25, Y+6	; 0x06
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	9e 83       	std	Y+6, r25	; 0x06
    29f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fa:	8d 81       	ldd	r24, Y+5	; 0x05
    29fc:	9e 81       	ldd	r25, Y+6	; 0x06
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	69 f7       	brne	.-38     	; 0x29dc <HLCD_VoidInit+0x53e>
    2a02:	14 c0       	rjmp	.+40     	; 0x2a2c <HLCD_VoidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a04:	6f 81       	ldd	r22, Y+7	; 0x07
    2a06:	78 85       	ldd	r23, Y+8	; 0x08
    2a08:	89 85       	ldd	r24, Y+9	; 0x09
    2a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	9e 83       	std	Y+6, r25	; 0x06
    2a16:	8d 83       	std	Y+5, r24	; 0x05
    2a18:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1c:	9a 83       	std	Y+2, r25	; 0x02
    2a1e:	89 83       	std	Y+1, r24	; 0x01
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	9a 81       	ldd	r25, Y+2	; 0x02
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <HLCD_VoidInit+0x586>
    2a28:	9a 83       	std	Y+2, r25	; 0x02
    2a2a:	89 83       	std	Y+1, r24	; 0x01
	
	/*Entry Mode Set Ù…Ø´ Ù„Ø§Ø²Ù…*/
	/*HLCD_VoidSendCommand(0b000001IS);*/
	
	
}
    2a2c:	c4 5b       	subi	r28, 0xB4	; 180
    2a2e:	df 4f       	sbci	r29, 0xFF	; 255
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	1f 91       	pop	r17
    2a40:	0f 91       	pop	r16
    2a42:	08 95       	ret

00002a44 <HLCD_VoidInit4Bit>:

void HLCD_VoidInit4Bit(void)
{
    2a44:	0f 93       	push	r16
    2a46:	1f 93       	push	r17
    2a48:	df 93       	push	r29
    2a4a:	cf 93       	push	r28
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	cc 54       	subi	r28, 0x4C	; 76
    2a52:	d0 40       	sbci	r29, 0x00	; 0
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	cd bf       	out	0x3d, r28	; 61
	/*Set Direction Of alla Pins*/
	
	MDIO_VoidSetPortDirection(HLCD_DataPort,0xff);
    2a5e:	82 e0       	ldi	r24, 0x02	; 2
    2a60:	6f ef       	ldi	r22, 0xFF	; 255
    2a62:	0e 94 87 1b 	call	0x370e	; 0x370e <MDIO_VoidSetPortDirection>
	MDIO_VoidSetPinDirection(HLCD_Rs_Port,0,1);
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	41 e0       	ldi	r20, 0x01	; 1
    2a6c:	0e 94 0e 19 	call	0x321c	; 0x321c <MDIO_VoidSetPinDirection>
	MDIO_VoidSetPinDirection(HLCD_Rw_Port,1,1);
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	61 e0       	ldi	r22, 0x01	; 1
    2a74:	41 e0       	ldi	r20, 0x01	; 1
    2a76:	0e 94 0e 19 	call	0x321c	; 0x321c <MDIO_VoidSetPinDirection>
	MDIO_VoidSetPinDirection(HLCD_EN_Port,2,1);
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	62 e0       	ldi	r22, 0x02	; 2
    2a7e:	41 e0       	ldi	r20, 0x01	; 1
    2a80:	0e 94 0e 19 	call	0x321c	; 0x321c <MDIO_VoidSetPinDirection>
    2a84:	fe 01       	movw	r30, r28
    2a86:	e7 5b       	subi	r30, 0xB7	; 183
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	a0 e2       	ldi	r26, 0x20	; 32
    2a90:	b2 e4       	ldi	r27, 0x42	; 66
    2a92:	80 83       	st	Z, r24
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	a2 83       	std	Z+2, r26	; 0x02
    2a98:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9a:	8e 01       	movw	r16, r28
    2a9c:	0b 5b       	subi	r16, 0xBB	; 187
    2a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e7 5b       	subi	r30, 0xB7	; 183
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	4a ef       	ldi	r20, 0xFA	; 250
    2ab4:	54 e4       	ldi	r21, 0x44	; 68
    2ab6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	f8 01       	movw	r30, r16
    2ac0:	80 83       	st	Z, r24
    2ac2:	91 83       	std	Z+1, r25	; 0x01
    2ac4:	a2 83       	std	Z+2, r26	; 0x02
    2ac6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ac8:	fe 01       	movw	r30, r28
    2aca:	eb 5b       	subi	r30, 0xBB	; 187
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	60 81       	ld	r22, Z
    2ad0:	71 81       	ldd	r23, Z+1	; 0x01
    2ad2:	82 81       	ldd	r24, Z+2	; 0x02
    2ad4:	93 81       	ldd	r25, Z+3	; 0x03
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	5f e3       	ldi	r21, 0x3F	; 63
    2ade:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ae2:	88 23       	and	r24, r24
    2ae4:	44 f4       	brge	.+16     	; 0x2af6 <HLCD_VoidInit4Bit+0xb2>
		__ticks = 1;
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	ed 5b       	subi	r30, 0xBD	; 189
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	91 83       	std	Z+1, r25	; 0x01
    2af2:	80 83       	st	Z, r24
    2af4:	64 c0       	rjmp	.+200    	; 0x2bbe <HLCD_VoidInit4Bit+0x17a>
	else if (__tmp > 65535)
    2af6:	fe 01       	movw	r30, r28
    2af8:	eb 5b       	subi	r30, 0xBB	; 187
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	60 81       	ld	r22, Z
    2afe:	71 81       	ldd	r23, Z+1	; 0x01
    2b00:	82 81       	ldd	r24, Z+2	; 0x02
    2b02:	93 81       	ldd	r25, Z+3	; 0x03
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	3f ef       	ldi	r19, 0xFF	; 255
    2b08:	4f e7       	ldi	r20, 0x7F	; 127
    2b0a:	57 e4       	ldi	r21, 0x47	; 71
    2b0c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b10:	18 16       	cp	r1, r24
    2b12:	0c f0       	brlt	.+2      	; 0x2b16 <HLCD_VoidInit4Bit+0xd2>
    2b14:	43 c0       	rjmp	.+134    	; 0x2b9c <HLCD_VoidInit4Bit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b16:	fe 01       	movw	r30, r28
    2b18:	e7 5b       	subi	r30, 0xB7	; 183
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	60 81       	ld	r22, Z
    2b1e:	71 81       	ldd	r23, Z+1	; 0x01
    2b20:	82 81       	ldd	r24, Z+2	; 0x02
    2b22:	93 81       	ldd	r25, Z+3	; 0x03
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e2       	ldi	r20, 0x20	; 32
    2b2a:	51 e4       	ldi	r21, 0x41	; 65
    2b2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	8e 01       	movw	r16, r28
    2b36:	0d 5b       	subi	r16, 0xBD	; 189
    2b38:	1f 4f       	sbci	r17, 0xFF	; 255
    2b3a:	bc 01       	movw	r22, r24
    2b3c:	cd 01       	movw	r24, r26
    2b3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	f8 01       	movw	r30, r16
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
    2b4c:	1f c0       	rjmp	.+62     	; 0x2b8c <HLCD_VoidInit4Bit+0x148>
    2b4e:	fe 01       	movw	r30, r28
    2b50:	ef 5b       	subi	r30, 0xBF	; 191
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	88 ec       	ldi	r24, 0xC8	; 200
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	91 83       	std	Z+1, r25	; 0x01
    2b5a:	80 83       	st	Z, r24
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	ef 5b       	subi	r30, 0xBF	; 191
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	80 81       	ld	r24, Z
    2b64:	91 81       	ldd	r25, Z+1	; 0x01
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	f1 f7       	brne	.-4      	; 0x2b66 <HLCD_VoidInit4Bit+0x122>
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	ef 5b       	subi	r30, 0xBF	; 191
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	91 83       	std	Z+1, r25	; 0x01
    2b72:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b74:	de 01       	movw	r26, r28
    2b76:	ad 5b       	subi	r26, 0xBD	; 189
    2b78:	bf 4f       	sbci	r27, 0xFF	; 255
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	ed 5b       	subi	r30, 0xBD	; 189
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	80 81       	ld	r24, Z
    2b82:	91 81       	ldd	r25, Z+1	; 0x01
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	11 96       	adiw	r26, 0x01	; 1
    2b88:	9c 93       	st	X, r25
    2b8a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	ed 5b       	subi	r30, 0xBD	; 189
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	80 81       	ld	r24, Z
    2b94:	91 81       	ldd	r25, Z+1	; 0x01
    2b96:	00 97       	sbiw	r24, 0x00	; 0
    2b98:	d1 f6       	brne	.-76     	; 0x2b4e <HLCD_VoidInit4Bit+0x10a>
    2b9a:	24 c0       	rjmp	.+72     	; 0x2be4 <HLCD_VoidInit4Bit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9c:	8e 01       	movw	r16, r28
    2b9e:	0d 5b       	subi	r16, 0xBD	; 189
    2ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	eb 5b       	subi	r30, 0xBB	; 187
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	60 81       	ld	r22, Z
    2baa:	71 81       	ldd	r23, Z+1	; 0x01
    2bac:	82 81       	ldd	r24, Z+2	; 0x02
    2bae:	93 81       	ldd	r25, Z+3	; 0x03
    2bb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	f8 01       	movw	r30, r16
    2bba:	91 83       	std	Z+1, r25	; 0x01
    2bbc:	80 83       	st	Z, r24
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	ed 5b       	subi	r30, 0xBD	; 189
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	80 81       	ld	r24, Z
    2bc6:	91 81       	ldd	r25, Z+1	; 0x01
    2bc8:	fe 01       	movw	r30, r28
    2bca:	ff 96       	adiw	r30, 0x3f	; 63
    2bcc:	91 83       	std	Z+1, r25	; 0x01
    2bce:	80 83       	st	Z, r24
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	ff 96       	adiw	r30, 0x3f	; 63
    2bd4:	80 81       	ld	r24, Z
    2bd6:	91 81       	ldd	r25, Z+1	; 0x01
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <HLCD_VoidInit4Bit+0x194>
    2bdc:	fe 01       	movw	r30, r28
    2bde:	ff 96       	adiw	r30, 0x3f	; 63
    2be0:	91 83       	std	Z+1, r25	; 0x01
    2be2:	80 83       	st	Z, r24
	
	/*wait more than 30ms*/
	_delay_ms(40);
	
	/*Function Set */
	HLCD_VoidSendCommand(0b00100000);
    2be4:	80 e2       	ldi	r24, 0x20	; 32
    2be6:	0e 94 c8 10 	call	0x2190	; 0x2190 <HLCD_VoidSendCommand>
	
	/*Function Set */
	HLCD_VoidSendCommand(0b00100000);
    2bea:	80 e2       	ldi	r24, 0x20	; 32
    2bec:	0e 94 c8 10 	call	0x2190	; 0x2190 <HLCD_VoidSendCommand>
    

	/*Function Set (Set No.of Lines & Font Type*/
	HLCD_VoidSendCommand(0b11000000);
    2bf0:	80 ec       	ldi	r24, 0xC0	; 192
    2bf2:	0e 94 c8 10 	call	0x2190	; 0x2190 <HLCD_VoidSendCommand>
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	a4 e3       	ldi	r26, 0x34	; 52
    2bfc:	b2 e4       	ldi	r27, 0x42	; 66
    2bfe:	8b af       	std	Y+59, r24	; 0x3b
    2c00:	9c af       	std	Y+60, r25	; 0x3c
    2c02:	ad af       	std	Y+61, r26	; 0x3d
    2c04:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c06:	6b ad       	ldd	r22, Y+59	; 0x3b
    2c08:	7c ad       	ldd	r23, Y+60	; 0x3c
    2c0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c0e:	2b ea       	ldi	r18, 0xAB	; 171
    2c10:	3a ea       	ldi	r19, 0xAA	; 170
    2c12:	4a e2       	ldi	r20, 0x2A	; 42
    2c14:	50 e4       	ldi	r21, 0x40	; 64
    2c16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	8f ab       	std	Y+55, r24	; 0x37
    2c20:	98 af       	std	Y+56, r25	; 0x38
    2c22:	a9 af       	std	Y+57, r26	; 0x39
    2c24:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2c26:	6f a9       	ldd	r22, Y+55	; 0x37
    2c28:	78 ad       	ldd	r23, Y+56	; 0x38
    2c2a:	89 ad       	ldd	r24, Y+57	; 0x39
    2c2c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	40 e8       	ldi	r20, 0x80	; 128
    2c34:	5f e3       	ldi	r21, 0x3F	; 63
    2c36:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c3a:	88 23       	and	r24, r24
    2c3c:	1c f4       	brge	.+6      	; 0x2c44 <HLCD_VoidInit4Bit+0x200>
		__ticks = 1;
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	8e ab       	std	Y+54, r24	; 0x36
    2c42:	91 c0       	rjmp	.+290    	; 0x2d66 <HLCD_VoidInit4Bit+0x322>
	else if (__tmp > 255)
    2c44:	6f a9       	ldd	r22, Y+55	; 0x37
    2c46:	78 ad       	ldd	r23, Y+56	; 0x38
    2c48:	89 ad       	ldd	r24, Y+57	; 0x39
    2c4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	4f e7       	ldi	r20, 0x7F	; 127
    2c52:	53 e4       	ldi	r21, 0x43	; 67
    2c54:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c58:	18 16       	cp	r1, r24
    2c5a:	0c f0       	brlt	.+2      	; 0x2c5e <HLCD_VoidInit4Bit+0x21a>
    2c5c:	7b c0       	rjmp	.+246    	; 0x2d54 <HLCD_VoidInit4Bit+0x310>
	{
		_delay_ms(__us / 1000.0);
    2c5e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2c60:	7c ad       	ldd	r23, Y+60	; 0x3c
    2c62:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c64:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	4a e7       	ldi	r20, 0x7A	; 122
    2c6c:	54 e4       	ldi	r21, 0x44	; 68
    2c6e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	8a ab       	std	Y+50, r24	; 0x32
    2c78:	9b ab       	std	Y+51, r25	; 0x33
    2c7a:	ac ab       	std	Y+52, r26	; 0x34
    2c7c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c7e:	6a a9       	ldd	r22, Y+50	; 0x32
    2c80:	7b a9       	ldd	r23, Y+51	; 0x33
    2c82:	8c a9       	ldd	r24, Y+52	; 0x34
    2c84:	9d a9       	ldd	r25, Y+53	; 0x35
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	4a ef       	ldi	r20, 0xFA	; 250
    2c8c:	54 e4       	ldi	r21, 0x44	; 68
    2c8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	8e a7       	std	Y+46, r24	; 0x2e
    2c98:	9f a7       	std	Y+47, r25	; 0x2f
    2c9a:	a8 ab       	std	Y+48, r26	; 0x30
    2c9c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2c9e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2ca0:	7f a5       	ldd	r23, Y+47	; 0x2f
    2ca2:	88 a9       	ldd	r24, Y+48	; 0x30
    2ca4:	99 a9       	ldd	r25, Y+49	; 0x31
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e8       	ldi	r20, 0x80	; 128
    2cac:	5f e3       	ldi	r21, 0x3F	; 63
    2cae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2cb2:	88 23       	and	r24, r24
    2cb4:	2c f4       	brge	.+10     	; 0x2cc0 <HLCD_VoidInit4Bit+0x27c>
		__ticks = 1;
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	9d a7       	std	Y+45, r25	; 0x2d
    2cbc:	8c a7       	std	Y+44, r24	; 0x2c
    2cbe:	3f c0       	rjmp	.+126    	; 0x2d3e <HLCD_VoidInit4Bit+0x2fa>
	else if (__tmp > 65535)
    2cc0:	6e a5       	ldd	r22, Y+46	; 0x2e
    2cc2:	7f a5       	ldd	r23, Y+47	; 0x2f
    2cc4:	88 a9       	ldd	r24, Y+48	; 0x30
    2cc6:	99 a9       	ldd	r25, Y+49	; 0x31
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	3f ef       	ldi	r19, 0xFF	; 255
    2ccc:	4f e7       	ldi	r20, 0x7F	; 127
    2cce:	57 e4       	ldi	r21, 0x47	; 71
    2cd0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2cd4:	18 16       	cp	r1, r24
    2cd6:	4c f5       	brge	.+82     	; 0x2d2a <HLCD_VoidInit4Bit+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd8:	6a a9       	ldd	r22, Y+50	; 0x32
    2cda:	7b a9       	ldd	r23, Y+51	; 0x33
    2cdc:	8c a9       	ldd	r24, Y+52	; 0x34
    2cde:	9d a9       	ldd	r25, Y+53	; 0x35
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e2       	ldi	r20, 0x20	; 32
    2ce6:	51 e4       	ldi	r21, 0x41	; 65
    2ce8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	bc 01       	movw	r22, r24
    2cf2:	cd 01       	movw	r24, r26
    2cf4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	9d a7       	std	Y+45, r25	; 0x2d
    2cfe:	8c a7       	std	Y+44, r24	; 0x2c
    2d00:	0f c0       	rjmp	.+30     	; 0x2d20 <HLCD_VoidInit4Bit+0x2dc>
    2d02:	88 ec       	ldi	r24, 0xC8	; 200
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	9b a7       	std	Y+43, r25	; 0x2b
    2d08:	8a a7       	std	Y+42, r24	; 0x2a
    2d0a:	8a a5       	ldd	r24, Y+42	; 0x2a
    2d0c:	9b a5       	ldd	r25, Y+43	; 0x2b
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	f1 f7       	brne	.-4      	; 0x2d0e <HLCD_VoidInit4Bit+0x2ca>
    2d12:	9b a7       	std	Y+43, r25	; 0x2b
    2d14:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d16:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d18:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	9d a7       	std	Y+45, r25	; 0x2d
    2d1e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d20:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d22:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d24:	00 97       	sbiw	r24, 0x00	; 0
    2d26:	69 f7       	brne	.-38     	; 0x2d02 <HLCD_VoidInit4Bit+0x2be>
    2d28:	24 c0       	rjmp	.+72     	; 0x2d72 <HLCD_VoidInit4Bit+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d2a:	6e a5       	ldd	r22, Y+46	; 0x2e
    2d2c:	7f a5       	ldd	r23, Y+47	; 0x2f
    2d2e:	88 a9       	ldd	r24, Y+48	; 0x30
    2d30:	99 a9       	ldd	r25, Y+49	; 0x31
    2d32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	9d a7       	std	Y+45, r25	; 0x2d
    2d3c:	8c a7       	std	Y+44, r24	; 0x2c
    2d3e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d40:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d42:	99 a7       	std	Y+41, r25	; 0x29
    2d44:	88 a7       	std	Y+40, r24	; 0x28
    2d46:	88 a5       	ldd	r24, Y+40	; 0x28
    2d48:	99 a5       	ldd	r25, Y+41	; 0x29
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <HLCD_VoidInit4Bit+0x306>
    2d4e:	99 a7       	std	Y+41, r25	; 0x29
    2d50:	88 a7       	std	Y+40, r24	; 0x28
    2d52:	0f c0       	rjmp	.+30     	; 0x2d72 <HLCD_VoidInit4Bit+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d54:	6f a9       	ldd	r22, Y+55	; 0x37
    2d56:	78 ad       	ldd	r23, Y+56	; 0x38
    2d58:	89 ad       	ldd	r24, Y+57	; 0x39
    2d5a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	8e ab       	std	Y+54, r24	; 0x36
    2d66:	8e a9       	ldd	r24, Y+54	; 0x36
    2d68:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d6a:	8f a1       	ldd	r24, Y+39	; 0x27
    2d6c:	8a 95       	dec	r24
    2d6e:	f1 f7       	brne	.-4      	; 0x2d6c <HLCD_VoidInit4Bit+0x328>
    2d70:	8f a3       	std	Y+39, r24	; 0x27
	
	 /*Wait More Than 39us*/
    _delay_us(45);
	
	/*Display ON/OFF Control*/
    HLCD_VoidSendCommand(0b00000000);
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	0e 94 c8 10 	call	0x2190	; 0x2190 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b11110000);
    2d78:	80 ef       	ldi	r24, 0xF0	; 240
    2d7a:	0e 94 c8 10 	call	0x2190	; 0x2190 <HLCD_VoidSendCommand>
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	a4 e3       	ldi	r26, 0x34	; 52
    2d84:	b2 e4       	ldi	r27, 0x42	; 66
    2d86:	8b a3       	std	Y+35, r24	; 0x23
    2d88:	9c a3       	std	Y+36, r25	; 0x24
    2d8a:	ad a3       	std	Y+37, r26	; 0x25
    2d8c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d90:	7c a1       	ldd	r23, Y+36	; 0x24
    2d92:	8d a1       	ldd	r24, Y+37	; 0x25
    2d94:	9e a1       	ldd	r25, Y+38	; 0x26
    2d96:	2b ea       	ldi	r18, 0xAB	; 171
    2d98:	3a ea       	ldi	r19, 0xAA	; 170
    2d9a:	4a e2       	ldi	r20, 0x2A	; 42
    2d9c:	50 e4       	ldi	r21, 0x40	; 64
    2d9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	8f 8f       	std	Y+31, r24	; 0x1f
    2da8:	98 a3       	std	Y+32, r25	; 0x20
    2daa:	a9 a3       	std	Y+33, r26	; 0x21
    2dac:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2dae:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2db0:	78 a1       	ldd	r23, Y+32	; 0x20
    2db2:	89 a1       	ldd	r24, Y+33	; 0x21
    2db4:	9a a1       	ldd	r25, Y+34	; 0x22
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	40 e8       	ldi	r20, 0x80	; 128
    2dbc:	5f e3       	ldi	r21, 0x3F	; 63
    2dbe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2dc2:	88 23       	and	r24, r24
    2dc4:	1c f4       	brge	.+6      	; 0x2dcc <HLCD_VoidInit4Bit+0x388>
		__ticks = 1;
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	8e 8f       	std	Y+30, r24	; 0x1e
    2dca:	91 c0       	rjmp	.+290    	; 0x2eee <HLCD_VoidInit4Bit+0x4aa>
	else if (__tmp > 255)
    2dcc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2dce:	78 a1       	ldd	r23, Y+32	; 0x20
    2dd0:	89 a1       	ldd	r24, Y+33	; 0x21
    2dd2:	9a a1       	ldd	r25, Y+34	; 0x22
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	4f e7       	ldi	r20, 0x7F	; 127
    2dda:	53 e4       	ldi	r21, 0x43	; 67
    2ddc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2de0:	18 16       	cp	r1, r24
    2de2:	0c f0       	brlt	.+2      	; 0x2de6 <HLCD_VoidInit4Bit+0x3a2>
    2de4:	7b c0       	rjmp	.+246    	; 0x2edc <HLCD_VoidInit4Bit+0x498>
	{
		_delay_ms(__us / 1000.0);
    2de6:	6b a1       	ldd	r22, Y+35	; 0x23
    2de8:	7c a1       	ldd	r23, Y+36	; 0x24
    2dea:	8d a1       	ldd	r24, Y+37	; 0x25
    2dec:	9e a1       	ldd	r25, Y+38	; 0x26
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	4a e7       	ldi	r20, 0x7A	; 122
    2df4:	54 e4       	ldi	r21, 0x44	; 68
    2df6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	8a 8f       	std	Y+26, r24	; 0x1a
    2e00:	9b 8f       	std	Y+27, r25	; 0x1b
    2e02:	ac 8f       	std	Y+28, r26	; 0x1c
    2e04:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e06:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2e08:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2e0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e0c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	4a ef       	ldi	r20, 0xFA	; 250
    2e14:	54 e4       	ldi	r21, 0x44	; 68
    2e16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	8e 8b       	std	Y+22, r24	; 0x16
    2e20:	9f 8b       	std	Y+23, r25	; 0x17
    2e22:	a8 8f       	std	Y+24, r26	; 0x18
    2e24:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2e26:	6e 89       	ldd	r22, Y+22	; 0x16
    2e28:	7f 89       	ldd	r23, Y+23	; 0x17
    2e2a:	88 8d       	ldd	r24, Y+24	; 0x18
    2e2c:	99 8d       	ldd	r25, Y+25	; 0x19
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	40 e8       	ldi	r20, 0x80	; 128
    2e34:	5f e3       	ldi	r21, 0x3F	; 63
    2e36:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e3a:	88 23       	and	r24, r24
    2e3c:	2c f4       	brge	.+10     	; 0x2e48 <HLCD_VoidInit4Bit+0x404>
		__ticks = 1;
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	9d 8b       	std	Y+21, r25	; 0x15
    2e44:	8c 8b       	std	Y+20, r24	; 0x14
    2e46:	3f c0       	rjmp	.+126    	; 0x2ec6 <HLCD_VoidInit4Bit+0x482>
	else if (__tmp > 65535)
    2e48:	6e 89       	ldd	r22, Y+22	; 0x16
    2e4a:	7f 89       	ldd	r23, Y+23	; 0x17
    2e4c:	88 8d       	ldd	r24, Y+24	; 0x18
    2e4e:	99 8d       	ldd	r25, Y+25	; 0x19
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	3f ef       	ldi	r19, 0xFF	; 255
    2e54:	4f e7       	ldi	r20, 0x7F	; 127
    2e56:	57 e4       	ldi	r21, 0x47	; 71
    2e58:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e5c:	18 16       	cp	r1, r24
    2e5e:	4c f5       	brge	.+82     	; 0x2eb2 <HLCD_VoidInit4Bit+0x46e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e60:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2e62:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2e64:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e66:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e2       	ldi	r20, 0x20	; 32
    2e6e:	51 e4       	ldi	r21, 0x41	; 65
    2e70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	bc 01       	movw	r22, r24
    2e7a:	cd 01       	movw	r24, r26
    2e7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	9d 8b       	std	Y+21, r25	; 0x15
    2e86:	8c 8b       	std	Y+20, r24	; 0x14
    2e88:	0f c0       	rjmp	.+30     	; 0x2ea8 <HLCD_VoidInit4Bit+0x464>
    2e8a:	88 ec       	ldi	r24, 0xC8	; 200
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	9b 8b       	std	Y+19, r25	; 0x13
    2e90:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e92:	8a 89       	ldd	r24, Y+18	; 0x12
    2e94:	9b 89       	ldd	r25, Y+19	; 0x13
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	f1 f7       	brne	.-4      	; 0x2e96 <HLCD_VoidInit4Bit+0x452>
    2e9a:	9b 8b       	std	Y+19, r25	; 0x13
    2e9c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9e:	8c 89       	ldd	r24, Y+20	; 0x14
    2ea0:	9d 89       	ldd	r25, Y+21	; 0x15
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	9d 8b       	std	Y+21, r25	; 0x15
    2ea6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea8:	8c 89       	ldd	r24, Y+20	; 0x14
    2eaa:	9d 89       	ldd	r25, Y+21	; 0x15
    2eac:	00 97       	sbiw	r24, 0x00	; 0
    2eae:	69 f7       	brne	.-38     	; 0x2e8a <HLCD_VoidInit4Bit+0x446>
    2eb0:	24 c0       	rjmp	.+72     	; 0x2efa <HLCD_VoidInit4Bit+0x4b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb2:	6e 89       	ldd	r22, Y+22	; 0x16
    2eb4:	7f 89       	ldd	r23, Y+23	; 0x17
    2eb6:	88 8d       	ldd	r24, Y+24	; 0x18
    2eb8:	99 8d       	ldd	r25, Y+25	; 0x19
    2eba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	9d 8b       	std	Y+21, r25	; 0x15
    2ec4:	8c 8b       	std	Y+20, r24	; 0x14
    2ec6:	8c 89       	ldd	r24, Y+20	; 0x14
    2ec8:	9d 89       	ldd	r25, Y+21	; 0x15
    2eca:	99 8b       	std	Y+17, r25	; 0x11
    2ecc:	88 8b       	std	Y+16, r24	; 0x10
    2ece:	88 89       	ldd	r24, Y+16	; 0x10
    2ed0:	99 89       	ldd	r25, Y+17	; 0x11
    2ed2:	01 97       	sbiw	r24, 0x01	; 1
    2ed4:	f1 f7       	brne	.-4      	; 0x2ed2 <HLCD_VoidInit4Bit+0x48e>
    2ed6:	99 8b       	std	Y+17, r25	; 0x11
    2ed8:	88 8b       	std	Y+16, r24	; 0x10
    2eda:	0f c0       	rjmp	.+30     	; 0x2efa <HLCD_VoidInit4Bit+0x4b6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2edc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ede:	78 a1       	ldd	r23, Y+32	; 0x20
    2ee0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ee2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ee4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	8e 8f       	std	Y+30, r24	; 0x1e
    2eee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ef0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ef2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ef4:	8a 95       	dec	r24
    2ef6:	f1 f7       	brne	.-4      	; 0x2ef4 <HLCD_VoidInit4Bit+0x4b0>
    2ef8:	8f 87       	std	Y+15, r24	; 0x0f
	
	/*Wait More Than 39us*/
    _delay_us(45);
	
	/*Display Clear*/
	HLCD_VoidSendCommand(0b00000000);
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	0e 94 c8 10 	call	0x2190	; 0x2190 <HLCD_VoidSendCommand>
	HLCD_VoidSendCommand(0b00010000);
    2f00:	80 e1       	ldi	r24, 0x10	; 16
    2f02:	0e 94 c8 10 	call	0x2190	; 0x2190 <HLCD_VoidSendCommand>
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	a0 e2       	ldi	r26, 0x20	; 32
    2f0c:	b1 e4       	ldi	r27, 0x41	; 65
    2f0e:	8b 87       	std	Y+11, r24	; 0x0b
    2f10:	9c 87       	std	Y+12, r25	; 0x0c
    2f12:	ad 87       	std	Y+13, r26	; 0x0d
    2f14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	4a ef       	ldi	r20, 0xFA	; 250
    2f24:	54 e4       	ldi	r21, 0x44	; 68
    2f26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	8f 83       	std	Y+7, r24	; 0x07
    2f30:	98 87       	std	Y+8, r25	; 0x08
    2f32:	a9 87       	std	Y+9, r26	; 0x09
    2f34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f36:	6f 81       	ldd	r22, Y+7	; 0x07
    2f38:	78 85       	ldd	r23, Y+8	; 0x08
    2f3a:	89 85       	ldd	r24, Y+9	; 0x09
    2f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	40 e8       	ldi	r20, 0x80	; 128
    2f44:	5f e3       	ldi	r21, 0x3F	; 63
    2f46:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2f4a:	88 23       	and	r24, r24
    2f4c:	2c f4       	brge	.+10     	; 0x2f58 <HLCD_VoidInit4Bit+0x514>
		__ticks = 1;
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	9e 83       	std	Y+6, r25	; 0x06
    2f54:	8d 83       	std	Y+5, r24	; 0x05
    2f56:	3f c0       	rjmp	.+126    	; 0x2fd6 <HLCD_VoidInit4Bit+0x592>
	else if (__tmp > 65535)
    2f58:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5a:	78 85       	ldd	r23, Y+8	; 0x08
    2f5c:	89 85       	ldd	r24, Y+9	; 0x09
    2f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	3f ef       	ldi	r19, 0xFF	; 255
    2f64:	4f e7       	ldi	r20, 0x7F	; 127
    2f66:	57 e4       	ldi	r21, 0x47	; 71
    2f68:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2f6c:	18 16       	cp	r1, r24
    2f6e:	4c f5       	brge	.+82     	; 0x2fc2 <HLCD_VoidInit4Bit+0x57e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	40 e2       	ldi	r20, 0x20	; 32
    2f7e:	51 e4       	ldi	r21, 0x41	; 65
    2f80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	bc 01       	movw	r22, r24
    2f8a:	cd 01       	movw	r24, r26
    2f8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	9e 83       	std	Y+6, r25	; 0x06
    2f96:	8d 83       	std	Y+5, r24	; 0x05
    2f98:	0f c0       	rjmp	.+30     	; 0x2fb8 <HLCD_VoidInit4Bit+0x574>
    2f9a:	88 ec       	ldi	r24, 0xC8	; 200
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	9c 83       	std	Y+4, r25	; 0x04
    2fa0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa6:	01 97       	sbiw	r24, 0x01	; 1
    2fa8:	f1 f7       	brne	.-4      	; 0x2fa6 <HLCD_VoidInit4Bit+0x562>
    2faa:	9c 83       	std	Y+4, r25	; 0x04
    2fac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fae:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb2:	01 97       	sbiw	r24, 0x01	; 1
    2fb4:	9e 83       	std	Y+6, r25	; 0x06
    2fb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fba:	9e 81       	ldd	r25, Y+6	; 0x06
    2fbc:	00 97       	sbiw	r24, 0x00	; 0
    2fbe:	69 f7       	brne	.-38     	; 0x2f9a <HLCD_VoidInit4Bit+0x556>
    2fc0:	14 c0       	rjmp	.+40     	; 0x2fea <HLCD_VoidInit4Bit+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc4:	78 85       	ldd	r23, Y+8	; 0x08
    2fc6:	89 85       	ldd	r24, Y+9	; 0x09
    2fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	9e 83       	std	Y+6, r25	; 0x06
    2fd4:	8d 83       	std	Y+5, r24	; 0x05
    2fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fda:	9a 83       	std	Y+2, r25	; 0x02
    2fdc:	89 83       	std	Y+1, r24	; 0x01
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
    2fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	f1 f7       	brne	.-4      	; 0x2fe2 <HLCD_VoidInit4Bit+0x59e>
    2fe6:	9a 83       	std	Y+2, r25	; 0x02
    2fe8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	
	
	
	
}
    2fea:	c4 5b       	subi	r28, 0xB4	; 180
    2fec:	df 4f       	sbci	r29, 0xFF	; 255
    2fee:	0f b6       	in	r0, 0x3f	; 63
    2ff0:	f8 94       	cli
    2ff2:	de bf       	out	0x3e, r29	; 62
    2ff4:	0f be       	out	0x3f, r0	; 63
    2ff6:	cd bf       	out	0x3d, r28	; 61
    2ff8:	cf 91       	pop	r28
    2ffa:	df 91       	pop	r29
    2ffc:	1f 91       	pop	r17
    2ffe:	0f 91       	pop	r16
    3000:	08 95       	ret

00003002 <HLCD_VoidSendString>:

void HLCD_VoidSendString(u8* Coby_U8String)
{
    3002:	df 93       	push	r29
    3004:	cf 93       	push	r28
    3006:	00 d0       	rcall	.+0      	; 0x3008 <HLCD_VoidSendString+0x6>
    3008:	0f 92       	push	r0
    300a:	cd b7       	in	r28, 0x3d	; 61
    300c:	de b7       	in	r29, 0x3e	; 62
    300e:	9b 83       	std	Y+3, r25	; 0x03
    3010:	8a 83       	std	Y+2, r24	; 0x02
	/*Lentgh Of String*/
	u8 LOC_LENGTH = 0;
    3012:	19 82       	std	Y+1, r1	; 0x01
    3014:	0e c0       	rjmp	.+28     	; 0x3032 <HLCD_VoidSendString+0x30>
	while(Coby_U8String[LOC_LENGTH]!=('\0'))
	{
		
		
		/*Send Character as String*/
		HLCD_VoidSendChar(Coby_U8String[LOC_LENGTH]);
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	28 2f       	mov	r18, r24
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	8a 81       	ldd	r24, Y+2	; 0x02
    301e:	9b 81       	ldd	r25, Y+3	; 0x03
    3020:	fc 01       	movw	r30, r24
    3022:	e2 0f       	add	r30, r18
    3024:	f3 1f       	adc	r31, r19
    3026:	80 81       	ld	r24, Z
    3028:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <HLCD_VoidSendChar>
		
		/*Increment Length*/
		LOC_LENGTH++;
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	8f 5f       	subi	r24, 0xFF	; 255
    3030:	89 83       	std	Y+1, r24	; 0x01
	/*Lentgh Of String*/
	u8 LOC_LENGTH = 0;
	
	
	/*Do Until String End*/
	while(Coby_U8String[LOC_LENGTH]!=('\0'))
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	28 2f       	mov	r18, r24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	8a 81       	ldd	r24, Y+2	; 0x02
    303a:	9b 81       	ldd	r25, Y+3	; 0x03
    303c:	fc 01       	movw	r30, r24
    303e:	e2 0f       	add	r30, r18
    3040:	f3 1f       	adc	r31, r19
    3042:	80 81       	ld	r24, Z
    3044:	88 23       	and	r24, r24
    3046:	39 f7       	brne	.-50     	; 0x3016 <HLCD_VoidSendString+0x14>
		/*Increment Length*/
		LOC_LENGTH++;
	}
	
	
}
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	cf 91       	pop	r28
    3050:	df 91       	pop	r29
    3052:	08 95       	ret

00003054 <HLCD_VoidSetPostion>:

void HLCD_VoidSetPostion(u8 Copy_U8Row,u8 Copy_U8Colm)
{
    3054:	df 93       	push	r29
    3056:	cf 93       	push	r28
    3058:	00 d0       	rcall	.+0      	; 0x305a <HLCD_VoidSetPostion+0x6>
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	89 83       	std	Y+1, r24	; 0x01
    3060:	6a 83       	std	Y+2, r22	; 0x02
	
	/*If U Want The First Row*/
	if(0==Copy_U8Row)
    3062:	89 81       	ldd	r24, Y+1	; 0x01
    3064:	88 23       	and	r24, r24
    3066:	29 f4       	brne	.+10     	; 0x3072 <HLCD_VoidSetPostion+0x1e>
	{
	
        /*Enter Colm NO. U Want To Display On It*/	
		HLCD_VoidSendCommand(Copy_U8Colm+128);
    3068:	8a 81       	ldd	r24, Y+2	; 0x02
    306a:	80 58       	subi	r24, 0x80	; 128
    306c:	0e 94 c8 10 	call	0x2190	; 0x2190 <HLCD_VoidSendCommand>
    3070:	07 c0       	rjmp	.+14     	; 0x3080 <HLCD_VoidSetPostion+0x2c>
	
		
	}
	
	/*If U Want The Second Row*/
	else if(1==Copy_U8Row)
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	81 30       	cpi	r24, 0x01	; 1
    3076:	21 f4       	brne	.+8      	; 0x3080 <HLCD_VoidSetPostion+0x2c>
	{
		
		
        /*Enter Colm NO. U Want To Display On It*/	
			HLCD_VoidSendCommand(Copy_U8Colm+128+64);
    3078:	8a 81       	ldd	r24, Y+2	; 0x02
    307a:	80 54       	subi	r24, 0x40	; 64
    307c:	0e 94 c8 10 	call	0x2190	; 0x2190 <HLCD_VoidSendCommand>
				

	}
	
	
}
    3080:	0f 90       	pop	r0
    3082:	0f 90       	pop	r0
    3084:	cf 91       	pop	r28
    3086:	df 91       	pop	r29
    3088:	08 95       	ret

0000308a <HLCD_VoidSendNumber>:
void HLCD_VoidSendNumber(u32 Copy_U8Number)
{
    308a:	ef 92       	push	r14
    308c:	ff 92       	push	r15
    308e:	0f 93       	push	r16
    3090:	1f 93       	push	r17
    3092:	df 93       	push	r29
    3094:	cf 93       	push	r28
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	28 97       	sbiw	r28, 0x08	; 8
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	de bf       	out	0x3e, r29	; 62
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	cd bf       	out	0x3d, r28	; 61
    30a6:	6d 83       	std	Y+5, r22	; 0x05
    30a8:	7e 83       	std	Y+6, r23	; 0x06
    30aa:	8f 83       	std	Y+7, r24	; 0x07
    30ac:	98 87       	std	Y+8, r25	; 0x08
	if(0==Copy_U8Number)
    30ae:	8d 81       	ldd	r24, Y+5	; 0x05
    30b0:	9e 81       	ldd	r25, Y+6	; 0x06
    30b2:	af 81       	ldd	r26, Y+7	; 0x07
    30b4:	b8 85       	ldd	r27, Y+8	; 0x08
    30b6:	00 97       	sbiw	r24, 0x00	; 0
    30b8:	a1 05       	cpc	r26, r1
    30ba:	b1 05       	cpc	r27, r1
    30bc:	21 f4       	brne	.+8      	; 0x30c6 <HLCD_VoidSendNumber+0x3c>
	{
		HLCD_VoidSendChar(0+48);
    30be:	80 e3       	ldi	r24, 0x30	; 48
    30c0:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <HLCD_VoidSendChar>
    30c4:	79 c0       	rjmp	.+242    	; 0x31b8 <HLCD_VoidSendNumber+0x12e>
	}
	else
	{
	u32 LOC_Rev =1;
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	a0 e0       	ldi	r26, 0x00	; 0
    30cc:	b0 e0       	ldi	r27, 0x00	; 0
    30ce:	89 83       	std	Y+1, r24	; 0x01
    30d0:	9a 83       	std	Y+2, r25	; 0x02
    30d2:	ab 83       	std	Y+3, r26	; 0x03
    30d4:	bc 83       	std	Y+4, r27	; 0x04
    30d6:	36 c0       	rjmp	.+108    	; 0x3144 <HLCD_VoidSendNumber+0xba>
	while(Copy_U8Number)
	{
		LOC_Rev = (LOC_Rev*10)+ Copy_U8Number%10;
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	9a 81       	ldd	r25, Y+2	; 0x02
    30dc:	ab 81       	ldd	r26, Y+3	; 0x03
    30de:	bc 81       	ldd	r27, Y+4	; 0x04
    30e0:	2a e0       	ldi	r18, 0x0A	; 10
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	40 e0       	ldi	r20, 0x00	; 0
    30e6:	50 e0       	ldi	r21, 0x00	; 0
    30e8:	bc 01       	movw	r22, r24
    30ea:	cd 01       	movw	r24, r26
    30ec:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    30f0:	7b 01       	movw	r14, r22
    30f2:	8c 01       	movw	r16, r24
    30f4:	8d 81       	ldd	r24, Y+5	; 0x05
    30f6:	9e 81       	ldd	r25, Y+6	; 0x06
    30f8:	af 81       	ldd	r26, Y+7	; 0x07
    30fa:	b8 85       	ldd	r27, Y+8	; 0x08
    30fc:	2a e0       	ldi	r18, 0x0A	; 10
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	40 e0       	ldi	r20, 0x00	; 0
    3102:	50 e0       	ldi	r21, 0x00	; 0
    3104:	bc 01       	movw	r22, r24
    3106:	cd 01       	movw	r24, r26
    3108:	0e 94 a5 1c 	call	0x394a	; 0x394a <__udivmodsi4>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	8e 0d       	add	r24, r14
    3112:	9f 1d       	adc	r25, r15
    3114:	a0 1f       	adc	r26, r16
    3116:	b1 1f       	adc	r27, r17
    3118:	89 83       	std	Y+1, r24	; 0x01
    311a:	9a 83       	std	Y+2, r25	; 0x02
    311c:	ab 83       	std	Y+3, r26	; 0x03
    311e:	bc 83       	std	Y+4, r27	; 0x04
		Copy_U8Number /=10 ;
    3120:	8d 81       	ldd	r24, Y+5	; 0x05
    3122:	9e 81       	ldd	r25, Y+6	; 0x06
    3124:	af 81       	ldd	r26, Y+7	; 0x07
    3126:	b8 85       	ldd	r27, Y+8	; 0x08
    3128:	2a e0       	ldi	r18, 0x0A	; 10
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	40 e0       	ldi	r20, 0x00	; 0
    312e:	50 e0       	ldi	r21, 0x00	; 0
    3130:	bc 01       	movw	r22, r24
    3132:	cd 01       	movw	r24, r26
    3134:	0e 94 a5 1c 	call	0x394a	; 0x394a <__udivmodsi4>
    3138:	da 01       	movw	r26, r20
    313a:	c9 01       	movw	r24, r18
    313c:	8d 83       	std	Y+5, r24	; 0x05
    313e:	9e 83       	std	Y+6, r25	; 0x06
    3140:	af 83       	std	Y+7, r26	; 0x07
    3142:	b8 87       	std	Y+8, r27	; 0x08
		HLCD_VoidSendChar(0+48);
	}
	else
	{
	u32 LOC_Rev =1;
	while(Copy_U8Number)
    3144:	8d 81       	ldd	r24, Y+5	; 0x05
    3146:	9e 81       	ldd	r25, Y+6	; 0x06
    3148:	af 81       	ldd	r26, Y+7	; 0x07
    314a:	b8 85       	ldd	r27, Y+8	; 0x08
    314c:	00 97       	sbiw	r24, 0x00	; 0
    314e:	a1 05       	cpc	r26, r1
    3150:	b1 05       	cpc	r27, r1
    3152:	11 f6       	brne	.-124    	; 0x30d8 <HLCD_VoidSendNumber+0x4e>
    3154:	28 c0       	rjmp	.+80     	; 0x31a6 <HLCD_VoidSendNumber+0x11c>
		
		
	}
	while(LOC_Rev>1)
	{
		Copy_U8Number = LOC_Rev%10;
    3156:	89 81       	ldd	r24, Y+1	; 0x01
    3158:	9a 81       	ldd	r25, Y+2	; 0x02
    315a:	ab 81       	ldd	r26, Y+3	; 0x03
    315c:	bc 81       	ldd	r27, Y+4	; 0x04
    315e:	2a e0       	ldi	r18, 0x0A	; 10
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e0       	ldi	r20, 0x00	; 0
    3164:	50 e0       	ldi	r21, 0x00	; 0
    3166:	bc 01       	movw	r22, r24
    3168:	cd 01       	movw	r24, r26
    316a:	0e 94 a5 1c 	call	0x394a	; 0x394a <__udivmodsi4>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	8d 83       	std	Y+5, r24	; 0x05
    3174:	9e 83       	std	Y+6, r25	; 0x06
    3176:	af 83       	std	Y+7, r26	; 0x07
    3178:	b8 87       	std	Y+8, r27	; 0x08
		HLCD_VoidSendChar(Copy_U8Number+48);
    317a:	8d 81       	ldd	r24, Y+5	; 0x05
    317c:	80 5d       	subi	r24, 0xD0	; 208
    317e:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <HLCD_VoidSendChar>
		LOC_Rev = LOC_Rev /10;
    3182:	89 81       	ldd	r24, Y+1	; 0x01
    3184:	9a 81       	ldd	r25, Y+2	; 0x02
    3186:	ab 81       	ldd	r26, Y+3	; 0x03
    3188:	bc 81       	ldd	r27, Y+4	; 0x04
    318a:	2a e0       	ldi	r18, 0x0A	; 10
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	40 e0       	ldi	r20, 0x00	; 0
    3190:	50 e0       	ldi	r21, 0x00	; 0
    3192:	bc 01       	movw	r22, r24
    3194:	cd 01       	movw	r24, r26
    3196:	0e 94 a5 1c 	call	0x394a	; 0x394a <__udivmodsi4>
    319a:	da 01       	movw	r26, r20
    319c:	c9 01       	movw	r24, r18
    319e:	89 83       	std	Y+1, r24	; 0x01
    31a0:	9a 83       	std	Y+2, r25	; 0x02
    31a2:	ab 83       	std	Y+3, r26	; 0x03
    31a4:	bc 83       	std	Y+4, r27	; 0x04
		LOC_Rev = (LOC_Rev*10)+ Copy_U8Number%10;
		Copy_U8Number /=10 ;
		
		
	}
	while(LOC_Rev>1)
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	9a 81       	ldd	r25, Y+2	; 0x02
    31aa:	ab 81       	ldd	r26, Y+3	; 0x03
    31ac:	bc 81       	ldd	r27, Y+4	; 0x04
    31ae:	82 30       	cpi	r24, 0x02	; 2
    31b0:	91 05       	cpc	r25, r1
    31b2:	a1 05       	cpc	r26, r1
    31b4:	b1 05       	cpc	r27, r1
    31b6:	78 f6       	brcc	.-98     	; 0x3156 <HLCD_VoidSendNumber+0xcc>
		
	}
		
	}
	
}
    31b8:	28 96       	adiw	r28, 0x08	; 8
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	de bf       	out	0x3e, r29	; 62
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	cd bf       	out	0x3d, r28	; 61
    31c4:	cf 91       	pop	r28
    31c6:	df 91       	pop	r29
    31c8:	1f 91       	pop	r17
    31ca:	0f 91       	pop	r16
    31cc:	ff 90       	pop	r15
    31ce:	ef 90       	pop	r14
    31d0:	08 95       	ret

000031d2 <HLCD_VoidDrawChar>:

void HLCD_VoidDrawChar(void)
{
    31d2:	df 93       	push	r29
    31d4:	cf 93       	push	r28
    31d6:	cd b7       	in	r28, 0x3d	; 61
    31d8:	de b7       	in	r29, 0x3e	; 62
	
	HLCD_VoidSendCommand(0b01000000);
    31da:	80 e4       	ldi	r24, 0x40	; 64
    31dc:	0e 94 c8 10 	call	0x2190	; 0x2190 <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(0b00111);
    31e0:	87 e0       	ldi	r24, 0x07	; 7
    31e2:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01000);
    31e6:	88 e0       	ldi	r24, 0x08	; 8
    31e8:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01000);
    31ec:	88 e0       	ldi	r24, 0x08	; 8
    31ee:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00111);
    31f2:	87 e0       	ldi	r24, 0x07	; 7
    31f4:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00100);
    31f8:	84 e0       	ldi	r24, 0x04	; 4
    31fa:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00100);
    31fe:	84 e0       	ldi	r24, 0x04	; 4
    3200:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00111);
    3204:	87 e0       	ldi	r24, 0x07	; 7
    3206:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <HLCD_VoidSendChar>
	HLCD_VoidSendCommand(128+1);
    320a:	81 e8       	ldi	r24, 0x81	; 129
    320c:	0e 94 c8 10 	call	0x2190	; 0x2190 <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(0b00000000);
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <HLCD_VoidSendChar>
	
	
	
	
}
    3216:	cf 91       	pop	r28
    3218:	df 91       	pop	r29
    321a:	08 95       	ret

0000321c <MDIO_VoidSetPinDirection>:




void MDIO_VoidSetPinDirection(u8 Copy_U8Port ,u8 Copy_U8Pin ,u8 Copy_U8Direction)
{
    321c:	df 93       	push	r29
    321e:	cf 93       	push	r28
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
    3224:	27 97       	sbiw	r28, 0x07	; 7
    3226:	0f b6       	in	r0, 0x3f	; 63
    3228:	f8 94       	cli
    322a:	de bf       	out	0x3e, r29	; 62
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	cd bf       	out	0x3d, r28	; 61
    3230:	89 83       	std	Y+1, r24	; 0x01
    3232:	6a 83       	std	Y+2, r22	; 0x02
    3234:	4b 83       	std	Y+3, r20	; 0x03
	if(1== Copy_U8Direction)
    3236:	8b 81       	ldd	r24, Y+3	; 0x03
    3238:	81 30       	cpi	r24, 0x01	; 1
    323a:	09 f0       	breq	.+2      	; 0x323e <MDIO_VoidSetPinDirection+0x22>
    323c:	6f c0       	rjmp	.+222    	; 0x331c <MDIO_VoidSetPinDirection+0x100>
	{
		switch(Copy_U8Port)
    323e:	89 81       	ldd	r24, Y+1	; 0x01
    3240:	28 2f       	mov	r18, r24
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	3f 83       	std	Y+7, r19	; 0x07
    3246:	2e 83       	std	Y+6, r18	; 0x06
    3248:	8e 81       	ldd	r24, Y+6	; 0x06
    324a:	9f 81       	ldd	r25, Y+7	; 0x07
    324c:	81 30       	cpi	r24, 0x01	; 1
    324e:	91 05       	cpc	r25, r1
    3250:	49 f1       	breq	.+82     	; 0x32a4 <MDIO_VoidSetPinDirection+0x88>
    3252:	2e 81       	ldd	r18, Y+6	; 0x06
    3254:	3f 81       	ldd	r19, Y+7	; 0x07
    3256:	22 30       	cpi	r18, 0x02	; 2
    3258:	31 05       	cpc	r19, r1
    325a:	2c f4       	brge	.+10     	; 0x3266 <MDIO_VoidSetPinDirection+0x4a>
    325c:	8e 81       	ldd	r24, Y+6	; 0x06
    325e:	9f 81       	ldd	r25, Y+7	; 0x07
    3260:	00 97       	sbiw	r24, 0x00	; 0
    3262:	61 f0       	breq	.+24     	; 0x327c <MDIO_VoidSetPinDirection+0x60>
    3264:	d2 c0       	rjmp	.+420    	; 0x340a <MDIO_VoidSetPinDirection+0x1ee>
    3266:	2e 81       	ldd	r18, Y+6	; 0x06
    3268:	3f 81       	ldd	r19, Y+7	; 0x07
    326a:	22 30       	cpi	r18, 0x02	; 2
    326c:	31 05       	cpc	r19, r1
    326e:	71 f1       	breq	.+92     	; 0x32cc <MDIO_VoidSetPinDirection+0xb0>
    3270:	8e 81       	ldd	r24, Y+6	; 0x06
    3272:	9f 81       	ldd	r25, Y+7	; 0x07
    3274:	83 30       	cpi	r24, 0x03	; 3
    3276:	91 05       	cpc	r25, r1
    3278:	e9 f1       	breq	.+122    	; 0x32f4 <MDIO_VoidSetPinDirection+0xd8>
    327a:	c7 c0       	rjmp	.+398    	; 0x340a <MDIO_VoidSetPinDirection+0x1ee>
		{
			case 0 : SET_BIT(DDRA_REG,Copy_U8Pin);
    327c:	aa e3       	ldi	r26, 0x3A	; 58
    327e:	b0 e0       	ldi	r27, 0x00	; 0
    3280:	ea e3       	ldi	r30, 0x3A	; 58
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	80 81       	ld	r24, Z
    3286:	48 2f       	mov	r20, r24
    3288:	8a 81       	ldd	r24, Y+2	; 0x02
    328a:	28 2f       	mov	r18, r24
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	02 2e       	mov	r0, r18
    3294:	02 c0       	rjmp	.+4      	; 0x329a <MDIO_VoidSetPinDirection+0x7e>
    3296:	88 0f       	add	r24, r24
    3298:	99 1f       	adc	r25, r25
    329a:	0a 94       	dec	r0
    329c:	e2 f7       	brpl	.-8      	; 0x3296 <MDIO_VoidSetPinDirection+0x7a>
    329e:	84 2b       	or	r24, r20
    32a0:	8c 93       	st	X, r24
    32a2:	b3 c0       	rjmp	.+358    	; 0x340a <MDIO_VoidSetPinDirection+0x1ee>
			break;
			case 1 : SET_BIT(DDRB_REG,Copy_U8Pin);
    32a4:	a7 e3       	ldi	r26, 0x37	; 55
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	e7 e3       	ldi	r30, 0x37	; 55
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	48 2f       	mov	r20, r24
    32b0:	8a 81       	ldd	r24, Y+2	; 0x02
    32b2:	28 2f       	mov	r18, r24
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	02 2e       	mov	r0, r18
    32bc:	02 c0       	rjmp	.+4      	; 0x32c2 <MDIO_VoidSetPinDirection+0xa6>
    32be:	88 0f       	add	r24, r24
    32c0:	99 1f       	adc	r25, r25
    32c2:	0a 94       	dec	r0
    32c4:	e2 f7       	brpl	.-8      	; 0x32be <MDIO_VoidSetPinDirection+0xa2>
    32c6:	84 2b       	or	r24, r20
    32c8:	8c 93       	st	X, r24
    32ca:	9f c0       	rjmp	.+318    	; 0x340a <MDIO_VoidSetPinDirection+0x1ee>
			break;
			case 2 : SET_BIT(DDRC_REG,Copy_U8Pin);
    32cc:	a4 e3       	ldi	r26, 0x34	; 52
    32ce:	b0 e0       	ldi	r27, 0x00	; 0
    32d0:	e4 e3       	ldi	r30, 0x34	; 52
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	48 2f       	mov	r20, r24
    32d8:	8a 81       	ldd	r24, Y+2	; 0x02
    32da:	28 2f       	mov	r18, r24
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	02 2e       	mov	r0, r18
    32e4:	02 c0       	rjmp	.+4      	; 0x32ea <MDIO_VoidSetPinDirection+0xce>
    32e6:	88 0f       	add	r24, r24
    32e8:	99 1f       	adc	r25, r25
    32ea:	0a 94       	dec	r0
    32ec:	e2 f7       	brpl	.-8      	; 0x32e6 <MDIO_VoidSetPinDirection+0xca>
    32ee:	84 2b       	or	r24, r20
    32f0:	8c 93       	st	X, r24
    32f2:	8b c0       	rjmp	.+278    	; 0x340a <MDIO_VoidSetPinDirection+0x1ee>
			break;
			case 3 : SET_BIT(DDRD_REG,Copy_U8Pin);
    32f4:	a1 e3       	ldi	r26, 0x31	; 49
    32f6:	b0 e0       	ldi	r27, 0x00	; 0
    32f8:	e1 e3       	ldi	r30, 0x31	; 49
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	80 81       	ld	r24, Z
    32fe:	48 2f       	mov	r20, r24
    3300:	8a 81       	ldd	r24, Y+2	; 0x02
    3302:	28 2f       	mov	r18, r24
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	02 2e       	mov	r0, r18
    330c:	02 c0       	rjmp	.+4      	; 0x3312 <MDIO_VoidSetPinDirection+0xf6>
    330e:	88 0f       	add	r24, r24
    3310:	99 1f       	adc	r25, r25
    3312:	0a 94       	dec	r0
    3314:	e2 f7       	brpl	.-8      	; 0x330e <MDIO_VoidSetPinDirection+0xf2>
    3316:	84 2b       	or	r24, r20
    3318:	8c 93       	st	X, r24
    331a:	77 c0       	rjmp	.+238    	; 0x340a <MDIO_VoidSetPinDirection+0x1ee>
			
			
			
		}
	}
	else if(0== Copy_U8Direction)
    331c:	8b 81       	ldd	r24, Y+3	; 0x03
    331e:	88 23       	and	r24, r24
    3320:	09 f0       	breq	.+2      	; 0x3324 <MDIO_VoidSetPinDirection+0x108>
    3322:	73 c0       	rjmp	.+230    	; 0x340a <MDIO_VoidSetPinDirection+0x1ee>
	{
				switch(Copy_U8Port)
    3324:	89 81       	ldd	r24, Y+1	; 0x01
    3326:	28 2f       	mov	r18, r24
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	3d 83       	std	Y+5, r19	; 0x05
    332c:	2c 83       	std	Y+4, r18	; 0x04
    332e:	8c 81       	ldd	r24, Y+4	; 0x04
    3330:	9d 81       	ldd	r25, Y+5	; 0x05
    3332:	81 30       	cpi	r24, 0x01	; 1
    3334:	91 05       	cpc	r25, r1
    3336:	59 f1       	breq	.+86     	; 0x338e <MDIO_VoidSetPinDirection+0x172>
    3338:	2c 81       	ldd	r18, Y+4	; 0x04
    333a:	3d 81       	ldd	r19, Y+5	; 0x05
    333c:	22 30       	cpi	r18, 0x02	; 2
    333e:	31 05       	cpc	r19, r1
    3340:	2c f4       	brge	.+10     	; 0x334c <MDIO_VoidSetPinDirection+0x130>
    3342:	8c 81       	ldd	r24, Y+4	; 0x04
    3344:	9d 81       	ldd	r25, Y+5	; 0x05
    3346:	00 97       	sbiw	r24, 0x00	; 0
    3348:	69 f0       	breq	.+26     	; 0x3364 <MDIO_VoidSetPinDirection+0x148>
    334a:	5f c0       	rjmp	.+190    	; 0x340a <MDIO_VoidSetPinDirection+0x1ee>
    334c:	2c 81       	ldd	r18, Y+4	; 0x04
    334e:	3d 81       	ldd	r19, Y+5	; 0x05
    3350:	22 30       	cpi	r18, 0x02	; 2
    3352:	31 05       	cpc	r19, r1
    3354:	89 f1       	breq	.+98     	; 0x33b8 <MDIO_VoidSetPinDirection+0x19c>
    3356:	8c 81       	ldd	r24, Y+4	; 0x04
    3358:	9d 81       	ldd	r25, Y+5	; 0x05
    335a:	83 30       	cpi	r24, 0x03	; 3
    335c:	91 05       	cpc	r25, r1
    335e:	09 f4       	brne	.+2      	; 0x3362 <MDIO_VoidSetPinDirection+0x146>
    3360:	40 c0       	rjmp	.+128    	; 0x33e2 <MDIO_VoidSetPinDirection+0x1c6>
    3362:	53 c0       	rjmp	.+166    	; 0x340a <MDIO_VoidSetPinDirection+0x1ee>
		{
			case 0 : CLR_BIT(DDRA_REG,Copy_U8Pin);break;
    3364:	aa e3       	ldi	r26, 0x3A	; 58
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	ea e3       	ldi	r30, 0x3A	; 58
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	80 81       	ld	r24, Z
    336e:	48 2f       	mov	r20, r24
    3370:	8a 81       	ldd	r24, Y+2	; 0x02
    3372:	28 2f       	mov	r18, r24
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	02 2e       	mov	r0, r18
    337c:	02 c0       	rjmp	.+4      	; 0x3382 <MDIO_VoidSetPinDirection+0x166>
    337e:	88 0f       	add	r24, r24
    3380:	99 1f       	adc	r25, r25
    3382:	0a 94       	dec	r0
    3384:	e2 f7       	brpl	.-8      	; 0x337e <MDIO_VoidSetPinDirection+0x162>
    3386:	80 95       	com	r24
    3388:	84 23       	and	r24, r20
    338a:	8c 93       	st	X, r24
    338c:	3e c0       	rjmp	.+124    	; 0x340a <MDIO_VoidSetPinDirection+0x1ee>
			case 1 : CLR_BIT(DDRB_REG,Copy_U8Pin);break;
    338e:	a7 e3       	ldi	r26, 0x37	; 55
    3390:	b0 e0       	ldi	r27, 0x00	; 0
    3392:	e7 e3       	ldi	r30, 0x37	; 55
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	80 81       	ld	r24, Z
    3398:	48 2f       	mov	r20, r24
    339a:	8a 81       	ldd	r24, Y+2	; 0x02
    339c:	28 2f       	mov	r18, r24
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	02 2e       	mov	r0, r18
    33a6:	02 c0       	rjmp	.+4      	; 0x33ac <MDIO_VoidSetPinDirection+0x190>
    33a8:	88 0f       	add	r24, r24
    33aa:	99 1f       	adc	r25, r25
    33ac:	0a 94       	dec	r0
    33ae:	e2 f7       	brpl	.-8      	; 0x33a8 <MDIO_VoidSetPinDirection+0x18c>
    33b0:	80 95       	com	r24
    33b2:	84 23       	and	r24, r20
    33b4:	8c 93       	st	X, r24
    33b6:	29 c0       	rjmp	.+82     	; 0x340a <MDIO_VoidSetPinDirection+0x1ee>
			case 2 : CLR_BIT(DDRC_REG,Copy_U8Pin);break;
    33b8:	a4 e3       	ldi	r26, 0x34	; 52
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	e4 e3       	ldi	r30, 0x34	; 52
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	80 81       	ld	r24, Z
    33c2:	48 2f       	mov	r20, r24
    33c4:	8a 81       	ldd	r24, Y+2	; 0x02
    33c6:	28 2f       	mov	r18, r24
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	02 2e       	mov	r0, r18
    33d0:	02 c0       	rjmp	.+4      	; 0x33d6 <MDIO_VoidSetPinDirection+0x1ba>
    33d2:	88 0f       	add	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	0a 94       	dec	r0
    33d8:	e2 f7       	brpl	.-8      	; 0x33d2 <MDIO_VoidSetPinDirection+0x1b6>
    33da:	80 95       	com	r24
    33dc:	84 23       	and	r24, r20
    33de:	8c 93       	st	X, r24
    33e0:	14 c0       	rjmp	.+40     	; 0x340a <MDIO_VoidSetPinDirection+0x1ee>
			case 3 : CLR_BIT(DDRD_REG,Copy_U8Pin);break;
    33e2:	a1 e3       	ldi	r26, 0x31	; 49
    33e4:	b0 e0       	ldi	r27, 0x00	; 0
    33e6:	e1 e3       	ldi	r30, 0x31	; 49
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	80 81       	ld	r24, Z
    33ec:	48 2f       	mov	r20, r24
    33ee:	8a 81       	ldd	r24, Y+2	; 0x02
    33f0:	28 2f       	mov	r18, r24
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	02 2e       	mov	r0, r18
    33fa:	02 c0       	rjmp	.+4      	; 0x3400 <MDIO_VoidSetPinDirection+0x1e4>
    33fc:	88 0f       	add	r24, r24
    33fe:	99 1f       	adc	r25, r25
    3400:	0a 94       	dec	r0
    3402:	e2 f7       	brpl	.-8      	; 0x33fc <MDIO_VoidSetPinDirection+0x1e0>
    3404:	80 95       	com	r24
    3406:	84 23       	and	r24, r20
    3408:	8c 93       	st	X, r24
	{
		
	/*Do Nothing*/	
	}
	
}
    340a:	27 96       	adiw	r28, 0x07	; 7
    340c:	0f b6       	in	r0, 0x3f	; 63
    340e:	f8 94       	cli
    3410:	de bf       	out	0x3e, r29	; 62
    3412:	0f be       	out	0x3f, r0	; 63
    3414:	cd bf       	out	0x3d, r28	; 61
    3416:	cf 91       	pop	r28
    3418:	df 91       	pop	r29
    341a:	08 95       	ret

0000341c <MDIO_u8GetPinValue>:
u8 MDIO_u8GetPinValue(u8 Copy_U8Port ,u8 Copy_U8Pin )
{
    341c:	df 93       	push	r29
    341e:	cf 93       	push	r28
    3420:	00 d0       	rcall	.+0      	; 0x3422 <MDIO_u8GetPinValue+0x6>
    3422:	00 d0       	rcall	.+0      	; 0x3424 <MDIO_u8GetPinValue+0x8>
    3424:	0f 92       	push	r0
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
    342a:	8a 83       	std	Y+2, r24	; 0x02
    342c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_U8RetValue;
	
	switch(Copy_U8Port)
    342e:	8a 81       	ldd	r24, Y+2	; 0x02
    3430:	28 2f       	mov	r18, r24
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	3d 83       	std	Y+5, r19	; 0x05
    3436:	2c 83       	std	Y+4, r18	; 0x04
    3438:	4c 81       	ldd	r20, Y+4	; 0x04
    343a:	5d 81       	ldd	r21, Y+5	; 0x05
    343c:	41 30       	cpi	r20, 0x01	; 1
    343e:	51 05       	cpc	r21, r1
    3440:	41 f1       	breq	.+80     	; 0x3492 <MDIO_u8GetPinValue+0x76>
    3442:	8c 81       	ldd	r24, Y+4	; 0x04
    3444:	9d 81       	ldd	r25, Y+5	; 0x05
    3446:	82 30       	cpi	r24, 0x02	; 2
    3448:	91 05       	cpc	r25, r1
    344a:	34 f4       	brge	.+12     	; 0x3458 <MDIO_u8GetPinValue+0x3c>
    344c:	2c 81       	ldd	r18, Y+4	; 0x04
    344e:	3d 81       	ldd	r19, Y+5	; 0x05
    3450:	21 15       	cp	r18, r1
    3452:	31 05       	cpc	r19, r1
    3454:	61 f0       	breq	.+24     	; 0x346e <MDIO_u8GetPinValue+0x52>
    3456:	52 c0       	rjmp	.+164    	; 0x34fc <MDIO_u8GetPinValue+0xe0>
    3458:	4c 81       	ldd	r20, Y+4	; 0x04
    345a:	5d 81       	ldd	r21, Y+5	; 0x05
    345c:	42 30       	cpi	r20, 0x02	; 2
    345e:	51 05       	cpc	r21, r1
    3460:	51 f1       	breq	.+84     	; 0x34b6 <MDIO_u8GetPinValue+0x9a>
    3462:	8c 81       	ldd	r24, Y+4	; 0x04
    3464:	9d 81       	ldd	r25, Y+5	; 0x05
    3466:	83 30       	cpi	r24, 0x03	; 3
    3468:	91 05       	cpc	r25, r1
    346a:	b9 f1       	breq	.+110    	; 0x34da <MDIO_u8GetPinValue+0xbe>
    346c:	47 c0       	rjmp	.+142    	; 0x34fc <MDIO_u8GetPinValue+0xe0>
	{
		case 0: Loc_U8RetValue=GET_BIT(PINA_REG,Copy_U8Pin);break;
    346e:	e9 e3       	ldi	r30, 0x39	; 57
    3470:	f0 e0       	ldi	r31, 0x00	; 0
    3472:	80 81       	ld	r24, Z
    3474:	28 2f       	mov	r18, r24
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	8b 81       	ldd	r24, Y+3	; 0x03
    347a:	88 2f       	mov	r24, r24
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	a9 01       	movw	r20, r18
    3480:	02 c0       	rjmp	.+4      	; 0x3486 <MDIO_u8GetPinValue+0x6a>
    3482:	55 95       	asr	r21
    3484:	47 95       	ror	r20
    3486:	8a 95       	dec	r24
    3488:	e2 f7       	brpl	.-8      	; 0x3482 <MDIO_u8GetPinValue+0x66>
    348a:	ca 01       	movw	r24, r20
    348c:	81 70       	andi	r24, 0x01	; 1
    348e:	89 83       	std	Y+1, r24	; 0x01
    3490:	35 c0       	rjmp	.+106    	; 0x34fc <MDIO_u8GetPinValue+0xe0>
		case 1: Loc_U8RetValue=GET_BIT(PINB_REG,Copy_U8Pin);break;
    3492:	e6 e3       	ldi	r30, 0x36	; 54
    3494:	f0 e0       	ldi	r31, 0x00	; 0
    3496:	80 81       	ld	r24, Z
    3498:	28 2f       	mov	r18, r24
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	8b 81       	ldd	r24, Y+3	; 0x03
    349e:	88 2f       	mov	r24, r24
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	a9 01       	movw	r20, r18
    34a4:	02 c0       	rjmp	.+4      	; 0x34aa <MDIO_u8GetPinValue+0x8e>
    34a6:	55 95       	asr	r21
    34a8:	47 95       	ror	r20
    34aa:	8a 95       	dec	r24
    34ac:	e2 f7       	brpl	.-8      	; 0x34a6 <MDIO_u8GetPinValue+0x8a>
    34ae:	ca 01       	movw	r24, r20
    34b0:	81 70       	andi	r24, 0x01	; 1
    34b2:	89 83       	std	Y+1, r24	; 0x01
    34b4:	23 c0       	rjmp	.+70     	; 0x34fc <MDIO_u8GetPinValue+0xe0>
		case 2: Loc_U8RetValue=GET_BIT(PINC_REG,Copy_U8Pin);break;
    34b6:	e3 e3       	ldi	r30, 0x33	; 51
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	80 81       	ld	r24, Z
    34bc:	28 2f       	mov	r18, r24
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	8b 81       	ldd	r24, Y+3	; 0x03
    34c2:	88 2f       	mov	r24, r24
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	a9 01       	movw	r20, r18
    34c8:	02 c0       	rjmp	.+4      	; 0x34ce <MDIO_u8GetPinValue+0xb2>
    34ca:	55 95       	asr	r21
    34cc:	47 95       	ror	r20
    34ce:	8a 95       	dec	r24
    34d0:	e2 f7       	brpl	.-8      	; 0x34ca <MDIO_u8GetPinValue+0xae>
    34d2:	ca 01       	movw	r24, r20
    34d4:	81 70       	andi	r24, 0x01	; 1
    34d6:	89 83       	std	Y+1, r24	; 0x01
    34d8:	11 c0       	rjmp	.+34     	; 0x34fc <MDIO_u8GetPinValue+0xe0>
		case 3: Loc_U8RetValue=GET_BIT(PIND_REG,Copy_U8Pin);break;
    34da:	e0 e3       	ldi	r30, 0x30	; 48
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	80 81       	ld	r24, Z
    34e0:	28 2f       	mov	r18, r24
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	8b 81       	ldd	r24, Y+3	; 0x03
    34e6:	88 2f       	mov	r24, r24
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	a9 01       	movw	r20, r18
    34ec:	02 c0       	rjmp	.+4      	; 0x34f2 <MDIO_u8GetPinValue+0xd6>
    34ee:	55 95       	asr	r21
    34f0:	47 95       	ror	r20
    34f2:	8a 95       	dec	r24
    34f4:	e2 f7       	brpl	.-8      	; 0x34ee <MDIO_u8GetPinValue+0xd2>
    34f6:	ca 01       	movw	r24, r20
    34f8:	81 70       	andi	r24, 0x01	; 1
    34fa:	89 83       	std	Y+1, r24	; 0x01
	
		
	}
	return Loc_U8RetValue;
    34fc:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    34fe:	0f 90       	pop	r0
    3500:	0f 90       	pop	r0
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	cf 91       	pop	r28
    350a:	df 91       	pop	r29
    350c:	08 95       	ret

0000350e <MDIO_VoidSetPinValue>:
void MDIO_VoidSetPinValue(u8 Copy_U8Port ,u8 Copy_U8Pin ,u8 Copy_U8Value)
{
    350e:	df 93       	push	r29
    3510:	cf 93       	push	r28
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62
    3516:	27 97       	sbiw	r28, 0x07	; 7
    3518:	0f b6       	in	r0, 0x3f	; 63
    351a:	f8 94       	cli
    351c:	de bf       	out	0x3e, r29	; 62
    351e:	0f be       	out	0x3f, r0	; 63
    3520:	cd bf       	out	0x3d, r28	; 61
    3522:	89 83       	std	Y+1, r24	; 0x01
    3524:	6a 83       	std	Y+2, r22	; 0x02
    3526:	4b 83       	std	Y+3, r20	; 0x03
	
	if(0==Copy_U8Value)
    3528:	8b 81       	ldd	r24, Y+3	; 0x03
    352a:	88 23       	and	r24, r24
    352c:	09 f0       	breq	.+2      	; 0x3530 <MDIO_VoidSetPinValue+0x22>
    352e:	74 c0       	rjmp	.+232    	; 0x3618 <MDIO_VoidSetPinValue+0x10a>
	{
		switch(Copy_U8Port)
    3530:	89 81       	ldd	r24, Y+1	; 0x01
    3532:	28 2f       	mov	r18, r24
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	3f 83       	std	Y+7, r19	; 0x07
    3538:	2e 83       	std	Y+6, r18	; 0x06
    353a:	8e 81       	ldd	r24, Y+6	; 0x06
    353c:	9f 81       	ldd	r25, Y+7	; 0x07
    353e:	81 30       	cpi	r24, 0x01	; 1
    3540:	91 05       	cpc	r25, r1
    3542:	59 f1       	breq	.+86     	; 0x359a <MDIO_VoidSetPinValue+0x8c>
    3544:	2e 81       	ldd	r18, Y+6	; 0x06
    3546:	3f 81       	ldd	r19, Y+7	; 0x07
    3548:	22 30       	cpi	r18, 0x02	; 2
    354a:	31 05       	cpc	r19, r1
    354c:	2c f4       	brge	.+10     	; 0x3558 <MDIO_VoidSetPinValue+0x4a>
    354e:	8e 81       	ldd	r24, Y+6	; 0x06
    3550:	9f 81       	ldd	r25, Y+7	; 0x07
    3552:	00 97       	sbiw	r24, 0x00	; 0
    3554:	69 f0       	breq	.+26     	; 0x3570 <MDIO_VoidSetPinValue+0x62>
    3556:	d2 c0       	rjmp	.+420    	; 0x36fc <MDIO_VoidSetPinValue+0x1ee>
    3558:	2e 81       	ldd	r18, Y+6	; 0x06
    355a:	3f 81       	ldd	r19, Y+7	; 0x07
    355c:	22 30       	cpi	r18, 0x02	; 2
    355e:	31 05       	cpc	r19, r1
    3560:	89 f1       	breq	.+98     	; 0x35c4 <MDIO_VoidSetPinValue+0xb6>
    3562:	8e 81       	ldd	r24, Y+6	; 0x06
    3564:	9f 81       	ldd	r25, Y+7	; 0x07
    3566:	83 30       	cpi	r24, 0x03	; 3
    3568:	91 05       	cpc	r25, r1
    356a:	09 f4       	brne	.+2      	; 0x356e <MDIO_VoidSetPinValue+0x60>
    356c:	40 c0       	rjmp	.+128    	; 0x35ee <MDIO_VoidSetPinValue+0xe0>
    356e:	c6 c0       	rjmp	.+396    	; 0x36fc <MDIO_VoidSetPinValue+0x1ee>
		{
			case 0 : CLR_BIT(PORTA_REG,Copy_U8Pin);break;
    3570:	ab e3       	ldi	r26, 0x3B	; 59
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	eb e3       	ldi	r30, 0x3B	; 59
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	80 81       	ld	r24, Z
    357a:	48 2f       	mov	r20, r24
    357c:	8a 81       	ldd	r24, Y+2	; 0x02
    357e:	28 2f       	mov	r18, r24
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	02 2e       	mov	r0, r18
    3588:	02 c0       	rjmp	.+4      	; 0x358e <MDIO_VoidSetPinValue+0x80>
    358a:	88 0f       	add	r24, r24
    358c:	99 1f       	adc	r25, r25
    358e:	0a 94       	dec	r0
    3590:	e2 f7       	brpl	.-8      	; 0x358a <MDIO_VoidSetPinValue+0x7c>
    3592:	80 95       	com	r24
    3594:	84 23       	and	r24, r20
    3596:	8c 93       	st	X, r24
    3598:	b1 c0       	rjmp	.+354    	; 0x36fc <MDIO_VoidSetPinValue+0x1ee>
			case 1 : CLR_BIT(PORTB_REG,Copy_U8Pin);break;
    359a:	a8 e3       	ldi	r26, 0x38	; 56
    359c:	b0 e0       	ldi	r27, 0x00	; 0
    359e:	e8 e3       	ldi	r30, 0x38	; 56
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	80 81       	ld	r24, Z
    35a4:	48 2f       	mov	r20, r24
    35a6:	8a 81       	ldd	r24, Y+2	; 0x02
    35a8:	28 2f       	mov	r18, r24
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	02 2e       	mov	r0, r18
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <MDIO_VoidSetPinValue+0xaa>
    35b4:	88 0f       	add	r24, r24
    35b6:	99 1f       	adc	r25, r25
    35b8:	0a 94       	dec	r0
    35ba:	e2 f7       	brpl	.-8      	; 0x35b4 <MDIO_VoidSetPinValue+0xa6>
    35bc:	80 95       	com	r24
    35be:	84 23       	and	r24, r20
    35c0:	8c 93       	st	X, r24
    35c2:	9c c0       	rjmp	.+312    	; 0x36fc <MDIO_VoidSetPinValue+0x1ee>
			case 2 : CLR_BIT(PORTC_REG,Copy_U8Pin);break;
    35c4:	a5 e3       	ldi	r26, 0x35	; 53
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	e5 e3       	ldi	r30, 0x35	; 53
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	48 2f       	mov	r20, r24
    35d0:	8a 81       	ldd	r24, Y+2	; 0x02
    35d2:	28 2f       	mov	r18, r24
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	81 e0       	ldi	r24, 0x01	; 1
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	02 2e       	mov	r0, r18
    35dc:	02 c0       	rjmp	.+4      	; 0x35e2 <MDIO_VoidSetPinValue+0xd4>
    35de:	88 0f       	add	r24, r24
    35e0:	99 1f       	adc	r25, r25
    35e2:	0a 94       	dec	r0
    35e4:	e2 f7       	brpl	.-8      	; 0x35de <MDIO_VoidSetPinValue+0xd0>
    35e6:	80 95       	com	r24
    35e8:	84 23       	and	r24, r20
    35ea:	8c 93       	st	X, r24
    35ec:	87 c0       	rjmp	.+270    	; 0x36fc <MDIO_VoidSetPinValue+0x1ee>
			case 3 : CLR_BIT(PORTD_REG,Copy_U8Pin);break;
    35ee:	a2 e3       	ldi	r26, 0x32	; 50
    35f0:	b0 e0       	ldi	r27, 0x00	; 0
    35f2:	e2 e3       	ldi	r30, 0x32	; 50
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	80 81       	ld	r24, Z
    35f8:	48 2f       	mov	r20, r24
    35fa:	8a 81       	ldd	r24, Y+2	; 0x02
    35fc:	28 2f       	mov	r18, r24
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	02 2e       	mov	r0, r18
    3606:	02 c0       	rjmp	.+4      	; 0x360c <MDIO_VoidSetPinValue+0xfe>
    3608:	88 0f       	add	r24, r24
    360a:	99 1f       	adc	r25, r25
    360c:	0a 94       	dec	r0
    360e:	e2 f7       	brpl	.-8      	; 0x3608 <MDIO_VoidSetPinValue+0xfa>
    3610:	80 95       	com	r24
    3612:	84 23       	and	r24, r20
    3614:	8c 93       	st	X, r24
    3616:	72 c0       	rjmp	.+228    	; 0x36fc <MDIO_VoidSetPinValue+0x1ee>
			default:/*Do Nothing*/;
			
		}
		
	}
	else if(1==Copy_U8Value)
    3618:	8b 81       	ldd	r24, Y+3	; 0x03
    361a:	81 30       	cpi	r24, 0x01	; 1
    361c:	09 f0       	breq	.+2      	; 0x3620 <MDIO_VoidSetPinValue+0x112>
    361e:	6e c0       	rjmp	.+220    	; 0x36fc <MDIO_VoidSetPinValue+0x1ee>
	{
				switch(Copy_U8Port)
    3620:	89 81       	ldd	r24, Y+1	; 0x01
    3622:	28 2f       	mov	r18, r24
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	3d 83       	std	Y+5, r19	; 0x05
    3628:	2c 83       	std	Y+4, r18	; 0x04
    362a:	8c 81       	ldd	r24, Y+4	; 0x04
    362c:	9d 81       	ldd	r25, Y+5	; 0x05
    362e:	81 30       	cpi	r24, 0x01	; 1
    3630:	91 05       	cpc	r25, r1
    3632:	49 f1       	breq	.+82     	; 0x3686 <MDIO_VoidSetPinValue+0x178>
    3634:	2c 81       	ldd	r18, Y+4	; 0x04
    3636:	3d 81       	ldd	r19, Y+5	; 0x05
    3638:	22 30       	cpi	r18, 0x02	; 2
    363a:	31 05       	cpc	r19, r1
    363c:	2c f4       	brge	.+10     	; 0x3648 <MDIO_VoidSetPinValue+0x13a>
    363e:	8c 81       	ldd	r24, Y+4	; 0x04
    3640:	9d 81       	ldd	r25, Y+5	; 0x05
    3642:	00 97       	sbiw	r24, 0x00	; 0
    3644:	61 f0       	breq	.+24     	; 0x365e <MDIO_VoidSetPinValue+0x150>
    3646:	5a c0       	rjmp	.+180    	; 0x36fc <MDIO_VoidSetPinValue+0x1ee>
    3648:	2c 81       	ldd	r18, Y+4	; 0x04
    364a:	3d 81       	ldd	r19, Y+5	; 0x05
    364c:	22 30       	cpi	r18, 0x02	; 2
    364e:	31 05       	cpc	r19, r1
    3650:	71 f1       	breq	.+92     	; 0x36ae <MDIO_VoidSetPinValue+0x1a0>
    3652:	8c 81       	ldd	r24, Y+4	; 0x04
    3654:	9d 81       	ldd	r25, Y+5	; 0x05
    3656:	83 30       	cpi	r24, 0x03	; 3
    3658:	91 05       	cpc	r25, r1
    365a:	e9 f1       	breq	.+122    	; 0x36d6 <MDIO_VoidSetPinValue+0x1c8>
    365c:	4f c0       	rjmp	.+158    	; 0x36fc <MDIO_VoidSetPinValue+0x1ee>
		{
			case 0 : SET_BIT(PORTA_REG,Copy_U8Pin);break;
    365e:	ab e3       	ldi	r26, 0x3B	; 59
    3660:	b0 e0       	ldi	r27, 0x00	; 0
    3662:	eb e3       	ldi	r30, 0x3B	; 59
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	80 81       	ld	r24, Z
    3668:	48 2f       	mov	r20, r24
    366a:	8a 81       	ldd	r24, Y+2	; 0x02
    366c:	28 2f       	mov	r18, r24
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	02 2e       	mov	r0, r18
    3676:	02 c0       	rjmp	.+4      	; 0x367c <MDIO_VoidSetPinValue+0x16e>
    3678:	88 0f       	add	r24, r24
    367a:	99 1f       	adc	r25, r25
    367c:	0a 94       	dec	r0
    367e:	e2 f7       	brpl	.-8      	; 0x3678 <MDIO_VoidSetPinValue+0x16a>
    3680:	84 2b       	or	r24, r20
    3682:	8c 93       	st	X, r24
    3684:	3b c0       	rjmp	.+118    	; 0x36fc <MDIO_VoidSetPinValue+0x1ee>
			case 1 : SET_BIT(PORTB_REG,Copy_U8Pin);break;
    3686:	a8 e3       	ldi	r26, 0x38	; 56
    3688:	b0 e0       	ldi	r27, 0x00	; 0
    368a:	e8 e3       	ldi	r30, 0x38	; 56
    368c:	f0 e0       	ldi	r31, 0x00	; 0
    368e:	80 81       	ld	r24, Z
    3690:	48 2f       	mov	r20, r24
    3692:	8a 81       	ldd	r24, Y+2	; 0x02
    3694:	28 2f       	mov	r18, r24
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	02 2e       	mov	r0, r18
    369e:	02 c0       	rjmp	.+4      	; 0x36a4 <MDIO_VoidSetPinValue+0x196>
    36a0:	88 0f       	add	r24, r24
    36a2:	99 1f       	adc	r25, r25
    36a4:	0a 94       	dec	r0
    36a6:	e2 f7       	brpl	.-8      	; 0x36a0 <MDIO_VoidSetPinValue+0x192>
    36a8:	84 2b       	or	r24, r20
    36aa:	8c 93       	st	X, r24
    36ac:	27 c0       	rjmp	.+78     	; 0x36fc <MDIO_VoidSetPinValue+0x1ee>
			case 2 : SET_BIT(PORTC_REG,Copy_U8Pin);break;
    36ae:	a5 e3       	ldi	r26, 0x35	; 53
    36b0:	b0 e0       	ldi	r27, 0x00	; 0
    36b2:	e5 e3       	ldi	r30, 0x35	; 53
    36b4:	f0 e0       	ldi	r31, 0x00	; 0
    36b6:	80 81       	ld	r24, Z
    36b8:	48 2f       	mov	r20, r24
    36ba:	8a 81       	ldd	r24, Y+2	; 0x02
    36bc:	28 2f       	mov	r18, r24
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	02 2e       	mov	r0, r18
    36c6:	02 c0       	rjmp	.+4      	; 0x36cc <MDIO_VoidSetPinValue+0x1be>
    36c8:	88 0f       	add	r24, r24
    36ca:	99 1f       	adc	r25, r25
    36cc:	0a 94       	dec	r0
    36ce:	e2 f7       	brpl	.-8      	; 0x36c8 <MDIO_VoidSetPinValue+0x1ba>
    36d0:	84 2b       	or	r24, r20
    36d2:	8c 93       	st	X, r24
    36d4:	13 c0       	rjmp	.+38     	; 0x36fc <MDIO_VoidSetPinValue+0x1ee>
			case 3 : SET_BIT(PORTD_REG,Copy_U8Pin);break;
    36d6:	a2 e3       	ldi	r26, 0x32	; 50
    36d8:	b0 e0       	ldi	r27, 0x00	; 0
    36da:	e2 e3       	ldi	r30, 0x32	; 50
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	80 81       	ld	r24, Z
    36e0:	48 2f       	mov	r20, r24
    36e2:	8a 81       	ldd	r24, Y+2	; 0x02
    36e4:	28 2f       	mov	r18, r24
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	02 2e       	mov	r0, r18
    36ee:	02 c0       	rjmp	.+4      	; 0x36f4 <MDIO_VoidSetPinValue+0x1e6>
    36f0:	88 0f       	add	r24, r24
    36f2:	99 1f       	adc	r25, r25
    36f4:	0a 94       	dec	r0
    36f6:	e2 f7       	brpl	.-8      	; 0x36f0 <MDIO_VoidSetPinValue+0x1e2>
    36f8:	84 2b       	or	r24, r20
    36fa:	8c 93       	st	X, r24
		/*Do Nothing*/
	}
	
	
	
}
    36fc:	27 96       	adiw	r28, 0x07	; 7
    36fe:	0f b6       	in	r0, 0x3f	; 63
    3700:	f8 94       	cli
    3702:	de bf       	out	0x3e, r29	; 62
    3704:	0f be       	out	0x3f, r0	; 63
    3706:	cd bf       	out	0x3d, r28	; 61
    3708:	cf 91       	pop	r28
    370a:	df 91       	pop	r29
    370c:	08 95       	ret

0000370e <MDIO_VoidSetPortDirection>:
void MDIO_VoidSetPortDirection(u8 Copy_U8Port ,u8 Copy_U8Direction)
{
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	00 d0       	rcall	.+0      	; 0x3714 <MDIO_VoidSetPortDirection+0x6>
    3714:	00 d0       	rcall	.+0      	; 0x3716 <MDIO_VoidSetPortDirection+0x8>
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
    371a:	89 83       	std	Y+1, r24	; 0x01
    371c:	6a 83       	std	Y+2, r22	; 0x02
	
	
		switch(Copy_U8Port)
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	28 2f       	mov	r18, r24
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	3c 83       	std	Y+4, r19	; 0x04
    3726:	2b 83       	std	Y+3, r18	; 0x03
    3728:	8b 81       	ldd	r24, Y+3	; 0x03
    372a:	9c 81       	ldd	r25, Y+4	; 0x04
    372c:	81 30       	cpi	r24, 0x01	; 1
    372e:	91 05       	cpc	r25, r1
    3730:	d1 f0       	breq	.+52     	; 0x3766 <MDIO_VoidSetPortDirection+0x58>
    3732:	2b 81       	ldd	r18, Y+3	; 0x03
    3734:	3c 81       	ldd	r19, Y+4	; 0x04
    3736:	22 30       	cpi	r18, 0x02	; 2
    3738:	31 05       	cpc	r19, r1
    373a:	2c f4       	brge	.+10     	; 0x3746 <MDIO_VoidSetPortDirection+0x38>
    373c:	8b 81       	ldd	r24, Y+3	; 0x03
    373e:	9c 81       	ldd	r25, Y+4	; 0x04
    3740:	00 97       	sbiw	r24, 0x00	; 0
    3742:	61 f0       	breq	.+24     	; 0x375c <MDIO_VoidSetPortDirection+0x4e>
    3744:	1e c0       	rjmp	.+60     	; 0x3782 <MDIO_VoidSetPortDirection+0x74>
    3746:	2b 81       	ldd	r18, Y+3	; 0x03
    3748:	3c 81       	ldd	r19, Y+4	; 0x04
    374a:	22 30       	cpi	r18, 0x02	; 2
    374c:	31 05       	cpc	r19, r1
    374e:	81 f0       	breq	.+32     	; 0x3770 <MDIO_VoidSetPortDirection+0x62>
    3750:	8b 81       	ldd	r24, Y+3	; 0x03
    3752:	9c 81       	ldd	r25, Y+4	; 0x04
    3754:	83 30       	cpi	r24, 0x03	; 3
    3756:	91 05       	cpc	r25, r1
    3758:	81 f0       	breq	.+32     	; 0x377a <MDIO_VoidSetPortDirection+0x6c>
    375a:	13 c0       	rjmp	.+38     	; 0x3782 <MDIO_VoidSetPortDirection+0x74>
		{
			
			case 0 : DDRA_REG=Copy_U8Direction;break;
    375c:	ea e3       	ldi	r30, 0x3A	; 58
    375e:	f0 e0       	ldi	r31, 0x00	; 0
    3760:	8a 81       	ldd	r24, Y+2	; 0x02
    3762:	80 83       	st	Z, r24
    3764:	0e c0       	rjmp	.+28     	; 0x3782 <MDIO_VoidSetPortDirection+0x74>
			case 1 : DDRB_REG=Copy_U8Direction;break;
    3766:	e7 e3       	ldi	r30, 0x37	; 55
    3768:	f0 e0       	ldi	r31, 0x00	; 0
    376a:	8a 81       	ldd	r24, Y+2	; 0x02
    376c:	80 83       	st	Z, r24
    376e:	09 c0       	rjmp	.+18     	; 0x3782 <MDIO_VoidSetPortDirection+0x74>
			case 2 : DDRC_REG=Copy_U8Direction;break;
    3770:	e4 e3       	ldi	r30, 0x34	; 52
    3772:	f0 e0       	ldi	r31, 0x00	; 0
    3774:	8a 81       	ldd	r24, Y+2	; 0x02
    3776:	80 83       	st	Z, r24
    3778:	04 c0       	rjmp	.+8      	; 0x3782 <MDIO_VoidSetPortDirection+0x74>
			case 3 : DDRD_REG=Copy_U8Direction;break;
    377a:	e1 e3       	ldi	r30, 0x31	; 49
    377c:	f0 e0       	ldi	r31, 0x00	; 0
    377e:	8a 81       	ldd	r24, Y+2	; 0x02
    3780:	80 83       	st	Z, r24
	
	
	
	
	
}
    3782:	0f 90       	pop	r0
    3784:	0f 90       	pop	r0
    3786:	0f 90       	pop	r0
    3788:	0f 90       	pop	r0
    378a:	cf 91       	pop	r28
    378c:	df 91       	pop	r29
    378e:	08 95       	ret

00003790 <MDIO_VoidSetPortValue>:
void MDIO_VoidSetPortValue(u8 Copy_U8Port ,u8 Copy_U8Value)
{
    3790:	df 93       	push	r29
    3792:	cf 93       	push	r28
    3794:	00 d0       	rcall	.+0      	; 0x3796 <MDIO_VoidSetPortValue+0x6>
    3796:	00 d0       	rcall	.+0      	; 0x3798 <MDIO_VoidSetPortValue+0x8>
    3798:	cd b7       	in	r28, 0x3d	; 61
    379a:	de b7       	in	r29, 0x3e	; 62
    379c:	89 83       	std	Y+1, r24	; 0x01
    379e:	6a 83       	std	Y+2, r22	; 0x02
	
		switch(Copy_U8Port)
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	28 2f       	mov	r18, r24
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	3c 83       	std	Y+4, r19	; 0x04
    37a8:	2b 83       	std	Y+3, r18	; 0x03
    37aa:	8b 81       	ldd	r24, Y+3	; 0x03
    37ac:	9c 81       	ldd	r25, Y+4	; 0x04
    37ae:	81 30       	cpi	r24, 0x01	; 1
    37b0:	91 05       	cpc	r25, r1
    37b2:	d1 f0       	breq	.+52     	; 0x37e8 <MDIO_VoidSetPortValue+0x58>
    37b4:	2b 81       	ldd	r18, Y+3	; 0x03
    37b6:	3c 81       	ldd	r19, Y+4	; 0x04
    37b8:	22 30       	cpi	r18, 0x02	; 2
    37ba:	31 05       	cpc	r19, r1
    37bc:	2c f4       	brge	.+10     	; 0x37c8 <MDIO_VoidSetPortValue+0x38>
    37be:	8b 81       	ldd	r24, Y+3	; 0x03
    37c0:	9c 81       	ldd	r25, Y+4	; 0x04
    37c2:	00 97       	sbiw	r24, 0x00	; 0
    37c4:	61 f0       	breq	.+24     	; 0x37de <MDIO_VoidSetPortValue+0x4e>
    37c6:	1e c0       	rjmp	.+60     	; 0x3804 <MDIO_VoidSetPortValue+0x74>
    37c8:	2b 81       	ldd	r18, Y+3	; 0x03
    37ca:	3c 81       	ldd	r19, Y+4	; 0x04
    37cc:	22 30       	cpi	r18, 0x02	; 2
    37ce:	31 05       	cpc	r19, r1
    37d0:	81 f0       	breq	.+32     	; 0x37f2 <MDIO_VoidSetPortValue+0x62>
    37d2:	8b 81       	ldd	r24, Y+3	; 0x03
    37d4:	9c 81       	ldd	r25, Y+4	; 0x04
    37d6:	83 30       	cpi	r24, 0x03	; 3
    37d8:	91 05       	cpc	r25, r1
    37da:	81 f0       	breq	.+32     	; 0x37fc <MDIO_VoidSetPortValue+0x6c>
    37dc:	13 c0       	rjmp	.+38     	; 0x3804 <MDIO_VoidSetPortValue+0x74>
		{
			case 0 : PORTA_REG =Copy_U8Value;break;
    37de:	eb e3       	ldi	r30, 0x3B	; 59
    37e0:	f0 e0       	ldi	r31, 0x00	; 0
    37e2:	8a 81       	ldd	r24, Y+2	; 0x02
    37e4:	80 83       	st	Z, r24
    37e6:	0e c0       	rjmp	.+28     	; 0x3804 <MDIO_VoidSetPortValue+0x74>
			case 1 : PORTB_REG =Copy_U8Value;break;
    37e8:	e8 e3       	ldi	r30, 0x38	; 56
    37ea:	f0 e0       	ldi	r31, 0x00	; 0
    37ec:	8a 81       	ldd	r24, Y+2	; 0x02
    37ee:	80 83       	st	Z, r24
    37f0:	09 c0       	rjmp	.+18     	; 0x3804 <MDIO_VoidSetPortValue+0x74>
			case 2 : PORTC_REG =Copy_U8Value;break;
    37f2:	e5 e3       	ldi	r30, 0x35	; 53
    37f4:	f0 e0       	ldi	r31, 0x00	; 0
    37f6:	8a 81       	ldd	r24, Y+2	; 0x02
    37f8:	80 83       	st	Z, r24
    37fa:	04 c0       	rjmp	.+8      	; 0x3804 <MDIO_VoidSetPortValue+0x74>
			case 3 : PORTD_REG =Copy_U8Value;break;
    37fc:	e2 e3       	ldi	r30, 0x32	; 50
    37fe:	f0 e0       	ldi	r31, 0x00	; 0
    3800:	8a 81       	ldd	r24, Y+2	; 0x02
    3802:	80 83       	st	Z, r24
		
		
	
	
	
}
    3804:	0f 90       	pop	r0
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	0f 90       	pop	r0
    380c:	cf 91       	pop	r28
    380e:	df 91       	pop	r29
    3810:	08 95       	ret

00003812 <MDIO_VoidTogglePin>:

void MDIO_VoidTogglePin(u8 Copy_U8Port ,u8 Copy_U8Pin )
{
    3812:	df 93       	push	r29
    3814:	cf 93       	push	r28
    3816:	00 d0       	rcall	.+0      	; 0x3818 <MDIO_VoidTogglePin+0x6>
    3818:	00 d0       	rcall	.+0      	; 0x381a <MDIO_VoidTogglePin+0x8>
    381a:	cd b7       	in	r28, 0x3d	; 61
    381c:	de b7       	in	r29, 0x3e	; 62
    381e:	89 83       	std	Y+1, r24	; 0x01
    3820:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(Copy_U8Port)
    3822:	89 81       	ldd	r24, Y+1	; 0x01
    3824:	28 2f       	mov	r18, r24
    3826:	30 e0       	ldi	r19, 0x00	; 0
    3828:	3c 83       	std	Y+4, r19	; 0x04
    382a:	2b 83       	std	Y+3, r18	; 0x03
    382c:	8b 81       	ldd	r24, Y+3	; 0x03
    382e:	9c 81       	ldd	r25, Y+4	; 0x04
    3830:	81 30       	cpi	r24, 0x01	; 1
    3832:	91 05       	cpc	r25, r1
    3834:	49 f1       	breq	.+82     	; 0x3888 <MDIO_VoidTogglePin+0x76>
    3836:	2b 81       	ldd	r18, Y+3	; 0x03
    3838:	3c 81       	ldd	r19, Y+4	; 0x04
    383a:	22 30       	cpi	r18, 0x02	; 2
    383c:	31 05       	cpc	r19, r1
    383e:	2c f4       	brge	.+10     	; 0x384a <MDIO_VoidTogglePin+0x38>
    3840:	8b 81       	ldd	r24, Y+3	; 0x03
    3842:	9c 81       	ldd	r25, Y+4	; 0x04
    3844:	00 97       	sbiw	r24, 0x00	; 0
    3846:	61 f0       	breq	.+24     	; 0x3860 <MDIO_VoidTogglePin+0x4e>
    3848:	5a c0       	rjmp	.+180    	; 0x38fe <MDIO_VoidTogglePin+0xec>
    384a:	2b 81       	ldd	r18, Y+3	; 0x03
    384c:	3c 81       	ldd	r19, Y+4	; 0x04
    384e:	22 30       	cpi	r18, 0x02	; 2
    3850:	31 05       	cpc	r19, r1
    3852:	71 f1       	breq	.+92     	; 0x38b0 <MDIO_VoidTogglePin+0x9e>
    3854:	8b 81       	ldd	r24, Y+3	; 0x03
    3856:	9c 81       	ldd	r25, Y+4	; 0x04
    3858:	83 30       	cpi	r24, 0x03	; 3
    385a:	91 05       	cpc	r25, r1
    385c:	e9 f1       	breq	.+122    	; 0x38d8 <MDIO_VoidTogglePin+0xc6>
    385e:	4f c0       	rjmp	.+158    	; 0x38fe <MDIO_VoidTogglePin+0xec>
	{
		case 0 : TOGGLE_BIT(PORTA_REG,Copy_U8Pin);break;
    3860:	ab e3       	ldi	r26, 0x3B	; 59
    3862:	b0 e0       	ldi	r27, 0x00	; 0
    3864:	eb e3       	ldi	r30, 0x3B	; 59
    3866:	f0 e0       	ldi	r31, 0x00	; 0
    3868:	80 81       	ld	r24, Z
    386a:	48 2f       	mov	r20, r24
    386c:	8a 81       	ldd	r24, Y+2	; 0x02
    386e:	28 2f       	mov	r18, r24
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	02 2e       	mov	r0, r18
    3878:	02 c0       	rjmp	.+4      	; 0x387e <MDIO_VoidTogglePin+0x6c>
    387a:	88 0f       	add	r24, r24
    387c:	99 1f       	adc	r25, r25
    387e:	0a 94       	dec	r0
    3880:	e2 f7       	brpl	.-8      	; 0x387a <MDIO_VoidTogglePin+0x68>
    3882:	84 27       	eor	r24, r20
    3884:	8c 93       	st	X, r24
    3886:	3b c0       	rjmp	.+118    	; 0x38fe <MDIO_VoidTogglePin+0xec>
		case 1 : TOGGLE_BIT(PORTB_REG,Copy_U8Pin);break;
    3888:	a8 e3       	ldi	r26, 0x38	; 56
    388a:	b0 e0       	ldi	r27, 0x00	; 0
    388c:	e8 e3       	ldi	r30, 0x38	; 56
    388e:	f0 e0       	ldi	r31, 0x00	; 0
    3890:	80 81       	ld	r24, Z
    3892:	48 2f       	mov	r20, r24
    3894:	8a 81       	ldd	r24, Y+2	; 0x02
    3896:	28 2f       	mov	r18, r24
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	02 2e       	mov	r0, r18
    38a0:	02 c0       	rjmp	.+4      	; 0x38a6 <MDIO_VoidTogglePin+0x94>
    38a2:	88 0f       	add	r24, r24
    38a4:	99 1f       	adc	r25, r25
    38a6:	0a 94       	dec	r0
    38a8:	e2 f7       	brpl	.-8      	; 0x38a2 <MDIO_VoidTogglePin+0x90>
    38aa:	84 27       	eor	r24, r20
    38ac:	8c 93       	st	X, r24
    38ae:	27 c0       	rjmp	.+78     	; 0x38fe <MDIO_VoidTogglePin+0xec>
		case 2 : TOGGLE_BIT(PORTC_REG,Copy_U8Pin);break;
    38b0:	a5 e3       	ldi	r26, 0x35	; 53
    38b2:	b0 e0       	ldi	r27, 0x00	; 0
    38b4:	e5 e3       	ldi	r30, 0x35	; 53
    38b6:	f0 e0       	ldi	r31, 0x00	; 0
    38b8:	80 81       	ld	r24, Z
    38ba:	48 2f       	mov	r20, r24
    38bc:	8a 81       	ldd	r24, Y+2	; 0x02
    38be:	28 2f       	mov	r18, r24
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	02 2e       	mov	r0, r18
    38c8:	02 c0       	rjmp	.+4      	; 0x38ce <MDIO_VoidTogglePin+0xbc>
    38ca:	88 0f       	add	r24, r24
    38cc:	99 1f       	adc	r25, r25
    38ce:	0a 94       	dec	r0
    38d0:	e2 f7       	brpl	.-8      	; 0x38ca <MDIO_VoidTogglePin+0xb8>
    38d2:	84 27       	eor	r24, r20
    38d4:	8c 93       	st	X, r24
    38d6:	13 c0       	rjmp	.+38     	; 0x38fe <MDIO_VoidTogglePin+0xec>
		case 3 : TOGGLE_BIT(PORTD_REG,Copy_U8Pin);break;
    38d8:	a2 e3       	ldi	r26, 0x32	; 50
    38da:	b0 e0       	ldi	r27, 0x00	; 0
    38dc:	e2 e3       	ldi	r30, 0x32	; 50
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	80 81       	ld	r24, Z
    38e2:	48 2f       	mov	r20, r24
    38e4:	8a 81       	ldd	r24, Y+2	; 0x02
    38e6:	28 2f       	mov	r18, r24
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	02 2e       	mov	r0, r18
    38f0:	02 c0       	rjmp	.+4      	; 0x38f6 <MDIO_VoidTogglePin+0xe4>
    38f2:	88 0f       	add	r24, r24
    38f4:	99 1f       	adc	r25, r25
    38f6:	0a 94       	dec	r0
    38f8:	e2 f7       	brpl	.-8      	; 0x38f2 <MDIO_VoidTogglePin+0xe0>
    38fa:	84 27       	eor	r24, r20
    38fc:	8c 93       	st	X, r24
		
		
		
	}
	
}
    38fe:	0f 90       	pop	r0
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	cf 91       	pop	r28
    3908:	df 91       	pop	r29
    390a:	08 95       	ret

0000390c <__mulsi3>:
    390c:	62 9f       	mul	r22, r18
    390e:	d0 01       	movw	r26, r0
    3910:	73 9f       	mul	r23, r19
    3912:	f0 01       	movw	r30, r0
    3914:	82 9f       	mul	r24, r18
    3916:	e0 0d       	add	r30, r0
    3918:	f1 1d       	adc	r31, r1
    391a:	64 9f       	mul	r22, r20
    391c:	e0 0d       	add	r30, r0
    391e:	f1 1d       	adc	r31, r1
    3920:	92 9f       	mul	r25, r18
    3922:	f0 0d       	add	r31, r0
    3924:	83 9f       	mul	r24, r19
    3926:	f0 0d       	add	r31, r0
    3928:	74 9f       	mul	r23, r20
    392a:	f0 0d       	add	r31, r0
    392c:	65 9f       	mul	r22, r21
    392e:	f0 0d       	add	r31, r0
    3930:	99 27       	eor	r25, r25
    3932:	72 9f       	mul	r23, r18
    3934:	b0 0d       	add	r27, r0
    3936:	e1 1d       	adc	r30, r1
    3938:	f9 1f       	adc	r31, r25
    393a:	63 9f       	mul	r22, r19
    393c:	b0 0d       	add	r27, r0
    393e:	e1 1d       	adc	r30, r1
    3940:	f9 1f       	adc	r31, r25
    3942:	bd 01       	movw	r22, r26
    3944:	cf 01       	movw	r24, r30
    3946:	11 24       	eor	r1, r1
    3948:	08 95       	ret

0000394a <__udivmodsi4>:
    394a:	a1 e2       	ldi	r26, 0x21	; 33
    394c:	1a 2e       	mov	r1, r26
    394e:	aa 1b       	sub	r26, r26
    3950:	bb 1b       	sub	r27, r27
    3952:	fd 01       	movw	r30, r26
    3954:	0d c0       	rjmp	.+26     	; 0x3970 <__udivmodsi4_ep>

00003956 <__udivmodsi4_loop>:
    3956:	aa 1f       	adc	r26, r26
    3958:	bb 1f       	adc	r27, r27
    395a:	ee 1f       	adc	r30, r30
    395c:	ff 1f       	adc	r31, r31
    395e:	a2 17       	cp	r26, r18
    3960:	b3 07       	cpc	r27, r19
    3962:	e4 07       	cpc	r30, r20
    3964:	f5 07       	cpc	r31, r21
    3966:	20 f0       	brcs	.+8      	; 0x3970 <__udivmodsi4_ep>
    3968:	a2 1b       	sub	r26, r18
    396a:	b3 0b       	sbc	r27, r19
    396c:	e4 0b       	sbc	r30, r20
    396e:	f5 0b       	sbc	r31, r21

00003970 <__udivmodsi4_ep>:
    3970:	66 1f       	adc	r22, r22
    3972:	77 1f       	adc	r23, r23
    3974:	88 1f       	adc	r24, r24
    3976:	99 1f       	adc	r25, r25
    3978:	1a 94       	dec	r1
    397a:	69 f7       	brne	.-38     	; 0x3956 <__udivmodsi4_loop>
    397c:	60 95       	com	r22
    397e:	70 95       	com	r23
    3980:	80 95       	com	r24
    3982:	90 95       	com	r25
    3984:	9b 01       	movw	r18, r22
    3986:	ac 01       	movw	r20, r24
    3988:	bd 01       	movw	r22, r26
    398a:	cf 01       	movw	r24, r30
    398c:	08 95       	ret

0000398e <__prologue_saves__>:
    398e:	2f 92       	push	r2
    3990:	3f 92       	push	r3
    3992:	4f 92       	push	r4
    3994:	5f 92       	push	r5
    3996:	6f 92       	push	r6
    3998:	7f 92       	push	r7
    399a:	8f 92       	push	r8
    399c:	9f 92       	push	r9
    399e:	af 92       	push	r10
    39a0:	bf 92       	push	r11
    39a2:	cf 92       	push	r12
    39a4:	df 92       	push	r13
    39a6:	ef 92       	push	r14
    39a8:	ff 92       	push	r15
    39aa:	0f 93       	push	r16
    39ac:	1f 93       	push	r17
    39ae:	cf 93       	push	r28
    39b0:	df 93       	push	r29
    39b2:	cd b7       	in	r28, 0x3d	; 61
    39b4:	de b7       	in	r29, 0x3e	; 62
    39b6:	ca 1b       	sub	r28, r26
    39b8:	db 0b       	sbc	r29, r27
    39ba:	0f b6       	in	r0, 0x3f	; 63
    39bc:	f8 94       	cli
    39be:	de bf       	out	0x3e, r29	; 62
    39c0:	0f be       	out	0x3f, r0	; 63
    39c2:	cd bf       	out	0x3d, r28	; 61
    39c4:	09 94       	ijmp

000039c6 <__epilogue_restores__>:
    39c6:	2a 88       	ldd	r2, Y+18	; 0x12
    39c8:	39 88       	ldd	r3, Y+17	; 0x11
    39ca:	48 88       	ldd	r4, Y+16	; 0x10
    39cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    39ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    39d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    39d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    39d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    39d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    39d8:	b9 84       	ldd	r11, Y+9	; 0x09
    39da:	c8 84       	ldd	r12, Y+8	; 0x08
    39dc:	df 80       	ldd	r13, Y+7	; 0x07
    39de:	ee 80       	ldd	r14, Y+6	; 0x06
    39e0:	fd 80       	ldd	r15, Y+5	; 0x05
    39e2:	0c 81       	ldd	r16, Y+4	; 0x04
    39e4:	1b 81       	ldd	r17, Y+3	; 0x03
    39e6:	aa 81       	ldd	r26, Y+2	; 0x02
    39e8:	b9 81       	ldd	r27, Y+1	; 0x01
    39ea:	ce 0f       	add	r28, r30
    39ec:	d1 1d       	adc	r29, r1
    39ee:	0f b6       	in	r0, 0x3f	; 63
    39f0:	f8 94       	cli
    39f2:	de bf       	out	0x3e, r29	; 62
    39f4:	0f be       	out	0x3f, r0	; 63
    39f6:	cd bf       	out	0x3d, r28	; 61
    39f8:	ed 01       	movw	r28, r26
    39fa:	08 95       	ret

000039fc <_exit>:
    39fc:	f8 94       	cli

000039fe <__stop_program>:
    39fe:	ff cf       	rjmp	.-2      	; 0x39fe <__stop_program>
